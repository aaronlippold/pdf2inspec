{
  "name": "cis_aws_foundations_benchmark",
  "title": "InSpec Profile",
  "maintainer": "The Authors",
  "copyright": "The Authors",
  "copyright_email": "you@example.com",
  "license": "Apache-2.0",
  "summary": "An InSpec Compliance Profile",
  "version": "0.1.0",
  "supports": [],
  "controls": [
    {
      "title": "1.1 Avoid the use of the 'root' account (Scored)",
      "desc": "The 'root' account has unrestricted access to all resources in the AWS\naccount. It is highly recommended that the use of this account be avoided. The\n'root' account is the most privileged AWS account. Minimizing the use of this\naccount and adopting the principle of least privilege for access management\nwill reduce the risk of accidental changes and unintended disclosure of highly\nprivileged credentials.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1.\nhttp://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html 2. CIS CSC\nv6.0 #5.1",
        "severity": "medium",
        "cis_id": "1.1",
        "cis_control": [
          [
            "5.1"
          ],
          "6.1"
        ],
        "cis_level": 1,
        "nist": [
          [
            "AC-6 (9)",
            4
          ]
        ],
        "audit text": "Implement the Ensure a log metric filter and alarm exist\nfor usage of 'root'\naccount recommendation in the Monitoring section of this benchmark to receive\nnotifications of root account usage. Additionally, executing the following\ncommands will\nprovide ad-hoc means for determining the last time the root account was used:\naws iam generate-credential-report\naws iam get-credential-report --query 'Content' --output text | base64 -d | cut\n-d, f1,5,11,16 | grep -B1 '<root_account>'\nNote: there are a few conditions under which the use of the root account is\nrequired, such\nas requesting a penetration test or creating a CloudFront private key.\n",
        "fix": "Follow the remediation instructions of the Ensure IAM policies\nare attached only to\ngroups or roles recommendation\n"
      },
      "code": "control \"M-1.1\" do\n  title \"1.1 Avoid the use of the 'root' account (Scored)\"\n  desc  \"The 'root' account has unrestricted access to all resources in the AWS\naccount. It is highly recommended that the use of this account be avoided. The\n'root' account is the most privileged AWS account. Minimizing the use of this\naccount and adopting the principle of least privilege for access management\nwill reduce the risk of accidental changes and unintended disclosure of highly\nprivileged credentials. \"\n  impact 0.5\n  tag \"ref\": \"1.\nhttp://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html 2. CIS CSC\nv6.0 #5.1\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"1.1\"\n  tag \"cis_control\": [[\"5.1\"], \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"nist\": [[\"AC-6 (9)\", 4]]\n  tag \"audit text\": \"Implement the Ensure a log metric filter and alarm exist\nfor usage of 'root'\naccount recommendation in the Monitoring section of this benchmark to receive\nnotifications of root account usage. Additionally, executing the following\ncommands will\nprovide ad-hoc means for determining the last time the root account was used:\naws iam generate-credential-report\naws iam get-credential-report --query 'Content' --output text | base64 -d | cut\n-d, f1,5,11,16 | grep -B1 '<root_account>'\nNote: there are a few conditions under which the use of the root account is\nrequired, such\nas requesting a penetration test or creating a CloudFront private key.\n\"\n  tag \"fix\": \"Follow the remediation instructions of the Ensure IAM policies\nare attached only to\ngroups or roles recommendation\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-1.1.rb",
        "line": 1
      },
      "id": "M-1.1"
    },
    {
      "title": "1.10 Ensure IAM password policy prevents password reuse (Scored)",
      "desc": "IAM password policies can prevent the reuse of a given password by the\nsame user. It is recommended that the password policy prevent the reuse of\npasswords. Preventing password reuse increases account resiliency against brute\nforce login attempts.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-78908-1",
        "severity": "medium",
        "cis_id": "1.10",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Perform the following to ensure the password policy is\nconfigured as prescribed:\nVia AWS Console Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Ensure 'Prevent password reuse' is checked\nEnsure 'Number of passwords to remember' is set to 24\nVia CLI\naws iam get-account-password-policy\nEnsure the output of the above command includes 'PasswordReusePrevention': 24\n",
        "fix": "Perform the following to set the password policy as prescribed:\nVia AWS Console Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Check 'Prevent password reuse' Set 'Number of\npasswords to remember' is set to 24\nVia CLI\naws iam update-account-password-policy --password-reuse-prevention 24\nNote: All commands starting with 'aws iam update-account-password-policy' can\nbe\ncombined into a single command.\n"
      },
      "code": "control \"M-1.10\" do\n  title \"1.10 Ensure IAM password policy prevents password reuse (Scored)\"\n  desc  \"IAM password policies can prevent the reuse of a given password by the\nsame user. It is recommended that the password policy prevent the reuse of\npasswords. Preventing password reuse increases account resiliency against brute\nforce login attempts. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-78908-1\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"1.10\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Perform the following to ensure the password policy is\nconfigured as prescribed:\nVia AWS Console Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Ensure 'Prevent password reuse' is checked\nEnsure 'Number of passwords to remember' is set to 24\nVia CLI\naws iam get-account-password-policy\nEnsure the output of the above command includes 'PasswordReusePrevention': 24\n\"\n  tag \"fix\": \"Perform the following to set the password policy as prescribed:\nVia AWS Console Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Check 'Prevent password reuse' Set 'Number of\npasswords to remember' is set to 24\nVia CLI\naws iam update-account-password-policy --password-reuse-prevention 24\nNote: All commands starting with 'aws iam update-account-password-policy' can\nbe\ncombined into a single command.\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-1.10.rb",
        "line": 1
      },
      "id": "M-1.10"
    },
    {
      "title": "1.11 Ensure IAM password policy expires passwords within 90 days or\nless (Scored)",
      "desc": "IAM password policies can require passwords to be rotated or expired\nafter a given number of days. It is recommended that the password policy expire\npasswords after 90 days or less. Reducing the password lifetime increases\naccount resiliency against brute force login attempts. Additionally, requiring\nregular password changes help in the following scenarios:Passwords can be\nstolen or compromised sometimes without your knowledge. This can happen via a\nsystem compromise, software vulnerability, or internal threat. Certain\ncorporate and government web filters or proxy servers have the ability to\nintercept and record traffic even if it's encrypted. Many people use the same\npassword for many systems such as work, email, and personal. Compromised end\nuser workstations might have a keystroke logger.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-78909-9",
        "severity": "medium",
        "cis_id": "1.11",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Perform the following to ensure the password policy is\nconfigured as prescribed:\nVia AWS Console: Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Ensure 'Enable password expiration' is\nchecked Ensure 'Password expiration period (in days):' is set to 90 or less\nVia CLI\naws iam get-account-password-policy\nEnsure the output of the above command includes 'MaxPasswordAge': 90 or less\n",
        "fix": "Perform the following to set the password policy as prescribed:\nVia AWS Console: Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Check 'Enable password expiration' Set\n'Password expiration period (in days):' to 90 or less\nVia CLI\naws iam update-account-password-policy --max-password-age 90\nNote: All commands starting with 'aws iam update-account-password-policy' can\nbe\ncombined into a single command.\n"
      },
      "code": "control \"M-1.11\" do\n  title \"1.11 Ensure IAM password policy expires passwords within 90 days or\nless (Scored)\"\n  desc  \"IAM password policies can require passwords to be rotated or expired\nafter a given number of days. It is recommended that the password policy expire\npasswords after 90 days or less. Reducing the password lifetime increases\naccount resiliency against brute force login attempts. Additionally, requiring\nregular password changes help in the following scenarios:Passwords can be\nstolen or compromised sometimes without your knowledge. This can happen via a\nsystem compromise, software vulnerability, or internal threat. Certain\ncorporate and government web filters or proxy servers have the ability to\nintercept and record traffic even if it's encrypted. Many people use the same\npassword for many systems such as work, email, and personal. Compromised end\nuser workstations might have a keystroke logger. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-78909-9\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"1.11\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Perform the following to ensure the password policy is\nconfigured as prescribed:\nVia AWS Console: Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Ensure 'Enable password expiration' is\nchecked Ensure 'Password expiration period (in days):' is set to 90 or less\nVia CLI\naws iam get-account-password-policy\nEnsure the output of the above command includes 'MaxPasswordAge': 90 or less\n\"\n  tag \"fix\": \"Perform the following to set the password policy as prescribed:\nVia AWS Console: Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Check 'Enable password expiration' Set\n'Password expiration period (in days):' to 90 or less\nVia CLI\naws iam update-account-password-policy --max-password-age 90\nNote: All commands starting with 'aws iam update-account-password-policy' can\nbe\ncombined into a single command.\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-1.11.rb",
        "line": 1
      },
      "id": "M-1.11"
    },
    {
      "title": "1.12 Ensure no root account access key exists (Scored)",
      "desc": "The root account is the most privileged user in an AWS account. AWS\nAccess Keys provide programmatic access to a given AWS account. It is\nrecommended that all access keys associated with the root account be removed.\nRemoving access keys associated with the root account limits vectors by which\nthe account can be compromised. Additionally, removing the root access keys\nencourages the creation and use of role based accounts that are least\nprivileged.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1.\nhttp://docs.aws.amazon.com/general/latest/gr/aws-access-keys-bestpractices.html\n2. http://docs.aws.amazon.com/general/latest/gr/managing-aws-access-keys.html\n3. http://docs.aws.amazon.com/IAM/latest/APIReference/API_GetAccountSummary.\nhtml 4. CCE-78910-7 5. CIS CSC v6.0 #5.1",
        "severity": "medium",
        "cis_id": "1.12",
        "cis_control": [
          [
            "5.1"
          ],
          "6.1"
        ],
        "cis_level": 1,
        "nist": [
          [
            "AC-6 (9)",
            4
          ]
        ],
        "audit text": "Perform the following to determine if the root account has\naccess keys:\nVia the AWS Console\nLogin to the AWS Management Console\nClick Services\nClick IAM\nClick on Credential Report\nThis will download an .xls file which contains credential usage for all IAM\nusers\nwithin an AWS Account - open this file For the <root_account> user, ensure the\naccess_key_1_active and\naccess_key_2_active fields are set to FALSE.\nVia CLI Run the following commands:\naws iam generate-credential-report\naws iam get-credential-report --query 'Content' --output text | base64 -d | cut\n\n-d, -f1,9,14 | grep -B1 '<root_account>' For the <root_account> user, ensure\nthe access_key_1_active and access_key_2_active fields are set to FALSE.\n",
        "fix": "Perform the following to delete or disable active root access\nkeys being\nVia the AWS Console Sign in to the AWS Management Console as Root and open the\nIAM console at\nhttps://console.aws.amazon.com/iam/. Click on <Root_Account_Name> at the top\nright and select Security Credentials\nfrom the drop down list On the pop out screen Click on Continue to Security\nCredentials Click on Access Keys (Access Key ID and Secret Access Key) Under\nthe Status column if there are any Keys which are Active Click on Make Inactive\n- (Temporarily disable Key - may be needed again) Click Delete - (Deleted keys\ncannot be recovered)\n"
      },
      "code": "control \"M-1.12\" do\n  title \"1.12 Ensure no root account access key exists (Scored)\"\n  desc  \"The root account is the most privileged user in an AWS account. AWS\nAccess Keys provide programmatic access to a given AWS account. It is\nrecommended that all access keys associated with the root account be removed.\nRemoving access keys associated with the root account limits vectors by which\nthe account can be compromised. Additionally, removing the root access keys\nencourages the creation and use of role based accounts that are least\nprivileged. \"\n  impact 0.5\n  tag \"ref\": \"1.\nhttp://docs.aws.amazon.com/general/latest/gr/aws-access-keys-bestpractices.html\n2. http://docs.aws.amazon.com/general/latest/gr/managing-aws-access-keys.html\n3. http://docs.aws.amazon.com/IAM/latest/APIReference/API_GetAccountSummary.\nhtml 4. CCE-78910-7 5. CIS CSC v6.0 #5.1\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"1.12\"\n  tag \"cis_control\": [[\"5.1\"], \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"nist\": [[\"AC-6 (9)\", 4]]\n  tag \"audit text\": \"Perform the following to determine if the root account has\naccess keys:\nVia the AWS Console\nLogin to the AWS Management Console\nClick Services\nClick IAM\nClick on Credential Report\nThis will download an .xls file which contains credential usage for all IAM\nusers\nwithin an AWS Account - open this file For the <root_account> user, ensure the\naccess_key_1_active and\naccess_key_2_active fields are set to FALSE.\nVia CLI Run the following commands:\naws iam generate-credential-report\naws iam get-credential-report --query 'Content' --output text | base64 -d | cut\n\n-d, -f1,9,14 | grep -B1 '<root_account>' For the <root_account> user, ensure\nthe access_key_1_active and access_key_2_active fields are set to FALSE.\n\"\n  tag \"fix\": \"Perform the following to delete or disable active root access\nkeys being\nVia the AWS Console Sign in to the AWS Management Console as Root and open the\nIAM console at\nhttps://console.aws.amazon.com/iam/. Click on <Root_Account_Name> at the top\nright and select Security Credentials\nfrom the drop down list On the pop out screen Click on Continue to Security\nCredentials Click on Access Keys (Access Key ID and Secret Access Key) Under\nthe Status column if there are any Keys which are Active Click on Make Inactive\n- (Temporarily disable Key - may be needed again) Click Delete - (Deleted keys\ncannot be recovered)\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-1.12.rb",
        "line": 1
      },
      "id": "M-1.12"
    },
    {
      "title": "1.13 Ensure MFA is enabled for the 'root' account (Scored)",
      "desc": "The root account is the most privileged user in an AWS account. MFA\nadds an extra layer of protection on top of a user name and password. With MFA\nenabled, when a user signs in to an AWS website, they will be prompted for\ntheir user name and password as well as for an authentication code from their\nAWS MFA device. Note: When virtual MFA is used for root accounts, it is\nrecommended that the device used is NOT a personal device, but rather a\ndedicated mobile device (tablet or phone) that is managed to be kept charged\nand secured independent of any individual personal devices. ('non-personal\nvirtual MFA') This lessens the risks of losing access to the MFA due to device\nloss, device trade-in or if the individual owning the device is no longer\nemployed at the company. Enabling MFA provides increased security for console\naccess as it requires the authenticating principal to possess a device that\nemits a time-sensitive key and have knowledge of a credential.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-78911-5 2. CIS CSC v6.0 #5.6, #11.4, #12.6, #16.11",
        "severity": "medium",
        "cis_id": "1.13",
        "cis_control": [
          [
            "5.6",
            "11.4",
            "12.6",
            "16.11"
          ],
          "6.1"
        ],
        "cis_level": 1,
        "nist": [
          [
            "IA-2 (1)",
            4
          ],
          [
            "SC-23",
            4
          ],
          [
            "IA-2 (1)",
            4
          ],
          [
            "IA-2 (1)",
            4
          ]
        ],
        "audit text": "Perform the following to determine if the root account has\nMFA setup: Run the following command:\naws iam get-account-summary | grep 'AccountMFAEnabled' Ensure the\nAccountMFAEnabled property is set to 1\n",
        "fix": "Perform the following to establish MFA for the root account: Sign\nin to the AWS Management Console and open the IAM console\nat https://console.aws.amazon.com/iam/.\nNote: to manage MFA devices for the root AWS account, you must use your root\naccount\ncredentials to sign in to AWS. You cannot manage MFA devices for the root\naccount\nusing other credentials. Choose Dashboard, and under Security Status, expand\nActivate MFA on your root\naccount. Choose Activate MFA In the wizard, choose A virtual MFA device and\nthen choose Next Step. IAM generates and displays configuration information for\nthe virtual MFA device,\nincluding a QR code graphic. The graphic is a representation of the 'secret\nconfiguration key' that is available for manual entry on devices that do not\nsupport\nQR codes. Open your virtual MFA application. (For a list of apps that you can\nuse for hosting\nvirtual MFA devices, see Virtual MFA Applications.) If the virtual MFA\napplication\nsupports multiple accounts (multiple virtual MFA devices), choose the option to\n\ncreate a new account (a new virtual MFA device). Determine whether the MFA app\nsupports QR codes, and then do one of the\nfollowing:\no Use the app to scan the QR code. For example, you might choose the camera\nicon or choose an option similar to Scan code, and then use the device's\ncamera to scan the code.\no In the Manage MFA Device wizard, choose Show secret key for\nmanual configuration, and then type the secret configuration key into your\nMFA application.\nWhen you are finished, the virtual MFA device starts generating one-time\npasswords. In the Manage MFA Device wizard, in the Authentication Code 1 box,\ntype the onetime password that currently appears in the virtual MFA device.\nWait up to 30\nseconds for the device to generate a new one-time password. Then type the\nsecond\none-time password into the Authentication Code 2 box. Choose Active Virtual\nMFA.\n"
      },
      "code": "control \"M-1.13\" do\n  title \"1.13 Ensure MFA is enabled for the 'root' account (Scored)\"\n  desc  \"The root account is the most privileged user in an AWS account. MFA\nadds an extra layer of protection on top of a user name and password. With MFA\nenabled, when a user signs in to an AWS website, they will be prompted for\ntheir user name and password as well as for an authentication code from their\nAWS MFA device. Note: When virtual MFA is used for root accounts, it is\nrecommended that the device used is NOT a personal device, but rather a\ndedicated mobile device (tablet or phone) that is managed to be kept charged\nand secured independent of any individual personal devices. ('non-personal\nvirtual MFA') This lessens the risks of losing access to the MFA due to device\nloss, device trade-in or if the individual owning the device is no longer\nemployed at the company. Enabling MFA provides increased security for console\naccess as it requires the authenticating principal to possess a device that\nemits a time-sensitive key and have knowledge of a credential. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-78911-5 2. CIS CSC v6.0 #5.6, #11.4, #12.6, #16.11\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"1.13\"\n  tag \"cis_control\": [[\"5.6\", \"11.4\", \"12.6\", \"16.11\"], \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"nist\": [[\"IA-2 (1)\", 4], [\"SC-23\", 4], [\"IA-2 (1)\", 4], [\"IA-2 (1)\", 4]]\n  tag \"audit text\": \"Perform the following to determine if the root account has\nMFA setup: Run the following command:\naws iam get-account-summary | grep 'AccountMFAEnabled' Ensure the\nAccountMFAEnabled property is set to 1\n\"\n  tag \"fix\": \"Perform the following to establish MFA for the root account: Sign\nin to the AWS Management Console and open the IAM console\nat https://console.aws.amazon.com/iam/.\nNote: to manage MFA devices for the root AWS account, you must use your root\naccount\ncredentials to sign in to AWS. You cannot manage MFA devices for the root\naccount\nusing other credentials. Choose Dashboard, and under Security Status, expand\nActivate MFA on your root\naccount. Choose Activate MFA In the wizard, choose A virtual MFA device and\nthen choose Next Step. IAM generates and displays configuration information for\nthe virtual MFA device,\nincluding a QR code graphic. The graphic is a representation of the 'secret\nconfiguration key' that is available for manual entry on devices that do not\nsupport\nQR codes. Open your virtual MFA application. (For a list of apps that you can\nuse for hosting\nvirtual MFA devices, see Virtual MFA Applications.) If the virtual MFA\napplication\nsupports multiple accounts (multiple virtual MFA devices), choose the option to\n\ncreate a new account (a new virtual MFA device). Determine whether the MFA app\nsupports QR codes, and then do one of the\nfollowing:\no Use the app to scan the QR code. For example, you might choose the camera\nicon or choose an option similar to Scan code, and then use the device's\ncamera to scan the code.\no In the Manage MFA Device wizard, choose Show secret key for\nmanual configuration, and then type the secret configuration key into your\nMFA application.\nWhen you are finished, the virtual MFA device starts generating one-time\npasswords. In the Manage MFA Device wizard, in the Authentication Code 1 box,\ntype the onetime password that currently appears in the virtual MFA device.\nWait up to 30\nseconds for the device to generate a new one-time password. Then type the\nsecond\none-time password into the Authentication Code 2 box. Choose Active Virtual\nMFA.\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-1.13.rb",
        "line": 1
      },
      "id": "M-1.13"
    },
    {
      "title": "1.14 Ensure hardware MFA is enabled for the 'root' account (Scored)",
      "desc": "The root account is the most privileged user in an AWS account. MFA\nadds an extra layer of protection on top of a user name and password. With MFA\nenabled, when a user signs in to an AWS website, they will be prompted for\ntheir user name and password as well as for an authentication code from their\nAWS MFA device. For Level 2, it is recommended that the root account be\nprotected with a hardware MFA. A hardware MFA has a smaller attack surface than\na virtual MFA. For example, a hardware MFA does not suffer the attack surface\nintroduced by the mobile smartphone on which a virtual MFA resides. Note: Using\nhardware MFA for many, many AWS accounts may create a logistical device\nmanagement issue. If this is the case, consider implementing this Level 2\nrecommendation selectively to the highest security AWS accounts and the Level 1\nrecommendation applied to the remaining accounts. Link to order AWS compatible\nhardware MFA device: http://onlinenoram.gemalto.com/",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. 2. 3. 4. CCE-78911-5 CIS CSC v6.0 #5.6, #11.4, #12.6, #16.11\nOrder Hardware MFA: http://onlinenoram.gemalto.com/\nhttp://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_vir\ntual.html 5.\nhttp://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_ph\nysical.html#enable-hw-mfa-for-root",
        "severity": "medium",
        "cis_id": "1.14",
        "cis_control": [
          [
            "5.6",
            "11.4",
            "12.6",
            "16.11"
          ],
          "6.1"
        ],
        "cis_level": 2,
        "nist": [
          [
            "IA-2 (1)",
            4
          ],
          [
            "SC-23",
            4
          ],
          [
            "IA-2 (1)",
            4
          ],
          [
            "IA-2 (1)",
            4
          ]
        ],
        "audit text": "Perform the following to determine if the root account has\na hardware MFA setup: Run the following command to list all virtual MFA\ndevices:\naws iam list-virtual-mfa-devices If the output contains one MFA with the\nfollowing Serial Number, it means the MFA\nis virtual, not hardware and the account is not compliant with this\nrecommendation:\n'SerialNumber': 'arn:aws:iam::<aws_account_number>:mfa/root-account-mfa-device'\n\n",
        "fix": "Perform the following to establish a hardware MFA for the root\naccount: Sign in to the AWS Management Console and open the IAM console at\nhttps://console.aws.amazon.com/iam/.\nNote: to manage MFA devices for the root AWS account, you must use your root\naccount\ncredentials to sign in to AWS. You cannot manage MFA devices for the root\naccount\nusing other credentials. Choose Dashboard, and under Security Status, expand\nActivate MFA on your root\naccount. Choose Activate MFA In the wizard, choose A hardware MFA device and\nthen choose Next Step. In the Serial Number box, enter the serial number that\nis found on the back of the\nMFA device. In the Authentication Code 1 box, enter the six-digit number\ndisplayed by the\nMFA device. You might need to press the button on the front of the device to\ndisplay\nthe number. Wait 30 seconds while the device refreshes the code, and then enter\nthe next sixdigit number into the Authentication Code 2 box. You might need to\npress the\nbutton on the front of the device again to display the second number. Choose\nNext Step. The MFA device is now associated with the AWS account. The\nnext time you use your AWS account credentials to sign in, you must type a code\n\nfrom the hardware MFA device.\n"
      },
      "code": "control \"M-1.14\" do\n  title \"1.14 Ensure hardware MFA is enabled for the 'root' account (Scored)\"\n  desc  \"The root account is the most privileged user in an AWS account. MFA\nadds an extra layer of protection on top of a user name and password. With MFA\nenabled, when a user signs in to an AWS website, they will be prompted for\ntheir user name and password as well as for an authentication code from their\nAWS MFA device. For Level 2, it is recommended that the root account be\nprotected with a hardware MFA. A hardware MFA has a smaller attack surface than\na virtual MFA. For example, a hardware MFA does not suffer the attack surface\nintroduced by the mobile smartphone on which a virtual MFA resides. Note: Using\nhardware MFA for many, many AWS accounts may create a logistical device\nmanagement issue. If this is the case, consider implementing this Level 2\nrecommendation selectively to the highest security AWS accounts and the Level 1\nrecommendation applied to the remaining accounts. Link to order AWS compatible\nhardware MFA device: http://onlinenoram.gemalto.com/ \"\n  impact 0.5\n  tag \"ref\": \"1. 2. 3. 4. CCE-78911-5 CIS CSC v6.0 #5.6, #11.4, #12.6, #16.11\nOrder Hardware MFA: http://onlinenoram.gemalto.com/\nhttp://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_vir\ntual.html 5.\nhttp://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_enable_ph\nysical.html#enable-hw-mfa-for-root\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"1.14\"\n  tag \"cis_control\": [[\"5.6\", \"11.4\", \"12.6\", \"16.11\"], \"6.1\"]\n  tag \"cis_level\": 2\n  tag \"nist\": [[\"IA-2 (1)\", 4], [\"SC-23\", 4], [\"IA-2 (1)\", 4], [\"IA-2 (1)\", 4]]\n  tag \"audit text\": \"Perform the following to determine if the root account has\na hardware MFA setup: Run the following command to list all virtual MFA\ndevices:\naws iam list-virtual-mfa-devices If the output contains one MFA with the\nfollowing Serial Number, it means the MFA\nis virtual, not hardware and the account is not compliant with this\nrecommendation:\n'SerialNumber': 'arn:aws:iam::<aws_account_number>:mfa/root-account-mfa-device'\n\n\"\n  tag \"fix\": \"Perform the following to establish a hardware MFA for the root\naccount: Sign in to the AWS Management Console and open the IAM console at\nhttps://console.aws.amazon.com/iam/.\nNote: to manage MFA devices for the root AWS account, you must use your root\naccount\ncredentials to sign in to AWS. You cannot manage MFA devices for the root\naccount\nusing other credentials. Choose Dashboard, and under Security Status, expand\nActivate MFA on your root\naccount. Choose Activate MFA In the wizard, choose A hardware MFA device and\nthen choose Next Step. In the Serial Number box, enter the serial number that\nis found on the back of the\nMFA device. In the Authentication Code 1 box, enter the six-digit number\ndisplayed by the\nMFA device. You might need to press the button on the front of the device to\ndisplay\nthe number. Wait 30 seconds while the device refreshes the code, and then enter\nthe next sixdigit number into the Authentication Code 2 box. You might need to\npress the\nbutton on the front of the device again to display the second number. Choose\nNext Step. The MFA device is now associated with the AWS account. The\nnext time you use your AWS account credentials to sign in, you must type a code\n\nfrom the hardware MFA device.\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-1.14.rb",
        "line": 1
      },
      "id": "M-1.14"
    },
    {
      "title": "1.15 Ensure security questions are registered in the AWS account (Not\nScored)",
      "desc": "The AWS support portal allows account owners to establish security\nquestions that can be used to authenticate individuals calling AWS customer\nservice for support. It is recommended that security questions be established.\nWhen creating a new AWS account, a default super user is automatically created.\nThis account is referred to as the 'root' account. It is recommended that the\nuse of this account be limited and highly controlled. During events in which\nthe Root password is no longer accessible or the MFA token associated with root\nis lost/destroyed it is possible, through authentication using secret questions\nand associated answers, to recover root login access.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "cis_id": "1.15",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Perform the following in the AWS Management Console:\nLogin to the AWS account as root\nOn the top right you will see the <Root_Account_Name>\nClick on the <Root_Account_Name>\nFrom the drop-down menu Click My Account\nIn the Configure Security Challenge Questions section on the Personal\nInformation page, configure three security challenge questions. Click Save\nquestions.\n",
        "fix": "Perform the following in the AWS Management Console:\nLogin to the AWS Account as root\nClick on the <Root_Account_Name> from the top right of the console\nFrom the drop-down menu Click My Account\nScroll down to the Configure Security Questions section\nClick on Edit\nClick on each Question\no From the drop-down select an appropriate question\nClick on the Answer section\nEnter an appropriate answer\n Follow process for all 3 questions Click Update when complete Place Questions\nand Answers and place in a secure physical location\no\no"
      },
      "code": "control \"M-1.15\" do\n  title \"1.15 Ensure security questions are registered in the AWS account (Not\nScored)\"\n  desc  \"The AWS support portal allows account owners to establish security\nquestions that can be used to authenticate individuals calling AWS customer\nservice for support. It is recommended that security questions be established.\nWhen creating a new AWS account, a default super user is automatically created.\nThis account is referred to as the 'root' account. It is recommended that the\nuse of this account be limited and highly controlled. During events in which\nthe Root password is no longer accessible or the MFA token associated with root\nis lost/destroyed it is possible, through authentication using secret questions\nand associated answers, to recover root login access. \"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"1.15\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Perform the following in the AWS Management Console:\nLogin to the AWS account as root\nOn the top right you will see the <Root_Account_Name>\nClick on the <Root_Account_Name>\nFrom the drop-down menu Click My Account\nIn the Configure Security Challenge Questions section on the Personal\nInformation page, configure three security challenge questions. Click Save\nquestions.\n\"\n  tag \"fix\": \"Perform the following in the AWS Management Console:\nLogin to the AWS Account as root\nClick on the <Root_Account_Name> from the top right of the console\nFrom the drop-down menu Click My Account\nScroll down to the Configure Security Questions section\nClick on Edit\nClick on each Question\no From the drop-down select an appropriate question\nClick on the Answer section\nEnter an appropriate answer\n Follow process for all 3 questions Click Update when complete Place Questions\nand Answers and place in a secure physical location\no\no\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-1.15.rb",
        "line": 1
      },
      "id": "M-1.15"
    },
    {
      "title": "1.16 Ensure IAM policies are attached only to groups or roles (Scored)",
      "desc": "By default, IAM users, groups, and roles have no access to AWS\nresources. IAM policies are the means by which privileges are granted to users,\ngroups, or roles. It is recommended that IAM policies be applied directly to\ngroups and roles but not users. Assigning privileges at the group or role level\nreduces the complexity of access management as the number of users grow.\nReducing access management complexity may in-turn reduce opportunity for a\nprincipal to inadvertently receive or retain excessive privileges.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1.\nhttp://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html 2.\nhttp://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vsinline.html\n3. CCE-78912-3",
        "severity": "medium",
        "cis_id": "1.16",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Perform the following to determine if policies are\nattached directly to users: Run the following to get a list of IAM users:\naws iam list-users --query 'Users[*].UserName' --output text For each user\nreturned, run the following command to determine if any policies are\nattached to them:\naws iam list-attached-user-policies --user-name <iam_user>\naws iam list-user-policies --user-name <iam_user> If any policies are returned,\nthe user has a direct policy attachment.\n",
        "fix": "Perform the following to create an IAM group and assign a policy\nto it: Sign in to the AWS Management Console and open the IAM console at\nhttps://console.aws.amazon.com/iam/. In the navigation pane, click Groups and\nthen click Create New Group. In the Group Name box, type the name of the group\nand then click Next Step. In the list of policies, select the check box for\neach policy that you want to apply to\nall members of the group. Then click Next Step. Click Create Group\nPerform the following to add a user to a given group: Sign in to the AWS\nManagement Console and open the IAM console\nat https://console.aws.amazon.com/iam/. In the navigation pane, click Groups\nSelect the group to add a user to Click Add Users To Group Select the users to\nbe added to the group Click Add Users\nPerform the following to remove a direct association between a user and policy:\nSign in to the AWS Management Console and open the IAM console\nat https://console.aws.amazon.com/iam/. In the left navigation pane, click on\nUsers For each user: Select the user Click on the Permissions tab Expand\nManaged Policies Click Detach Policy for each policy Expand Inline Policies\nClick Remove Policy for each policy\n"
      },
      "code": "control \"M-1.16\" do\n  title \"1.16 Ensure IAM policies are attached only to groups or roles (Scored)\"\n  desc  \"By default, IAM users, groups, and roles have no access to AWS\nresources. IAM policies are the means by which privileges are granted to users,\ngroups, or roles. It is recommended that IAM policies be applied directly to\ngroups and roles but not users. Assigning privileges at the group or role level\nreduces the complexity of access management as the number of users grow.\nReducing access management complexity may in-turn reduce opportunity for a\nprincipal to inadvertently receive or retain excessive privileges. \"\n  impact 0.5\n  tag \"ref\": \"1.\nhttp://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html 2.\nhttp://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vsinline.html\n3. CCE-78912-3\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"1.16\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Perform the following to determine if policies are\nattached directly to users: Run the following to get a list of IAM users:\naws iam list-users --query 'Users[*].UserName' --output text For each user\nreturned, run the following command to determine if any policies are\nattached to them:\naws iam list-attached-user-policies --user-name <iam_user>\naws iam list-user-policies --user-name <iam_user> If any policies are returned,\nthe user has a direct policy attachment.\n\"\n  tag \"fix\": \"Perform the following to create an IAM group and assign a policy\nto it: Sign in to the AWS Management Console and open the IAM console at\nhttps://console.aws.amazon.com/iam/. In the navigation pane, click Groups and\nthen click Create New Group. In the Group Name box, type the name of the group\nand then click Next Step. In the list of policies, select the check box for\neach policy that you want to apply to\nall members of the group. Then click Next Step. Click Create Group\nPerform the following to add a user to a given group: Sign in to the AWS\nManagement Console and open the IAM console\nat https://console.aws.amazon.com/iam/. In the navigation pane, click Groups\nSelect the group to add a user to Click Add Users To Group Select the users to\nbe added to the group Click Add Users\nPerform the following to remove a direct association between a user and policy:\nSign in to the AWS Management Console and open the IAM console\nat https://console.aws.amazon.com/iam/. In the left navigation pane, click on\nUsers For each user: Select the user Click on the Permissions tab Expand\nManaged Policies Click Detach Policy for each policy Expand Inline Policies\nClick Remove Policy for each policy\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-1.16.rb",
        "line": 1
      },
      "id": "M-1.16"
    },
    {
      "title": "1.17 Enable detailed billing (Scored)",
      "desc": "Enable Detailed Billing to cause the generation of a log record for\nevery event or hourly ongoing activity which incurs cost in an AWS account.\nThese records are aggregated into CSV files of hourly records, and written to\nan S3 bucket. A CSV (Comma Separated Values) file of billing records is written\nat least every 24 hours; writing of files is often more frequent. Detailed\nBilling records can be used as an overview of AWS activity across the whole of\nan account, in addition to per-Region CloudTrail, Config and other\nservice-specific JSON-based logs. Billing records can be graphed over time\nusing the Cost Explorer tool, and budgeting alerts can be configured on billing\nrecords and pushed to SNS in the event of spend over time, or predicted spend\nat current rate, going above a customer-set threshold - this can be used as a\nsimple means of detecting anomalous utilisation of AWS resources and thereby\ntriggering investigation activities. Billing records can also be broken out by\ntag, which can serve as a starting point in identifying which part of the\nenvironment, or organisation, the anomalous activity is occurring in.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1.\nhttps://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/billing-whatis.html\n2.\nhttps://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/billingpermissions-ref.html#billing-example-policies",
        "severity": "medium",
        "cis_id": "1.17",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "There is currently no AWS CLI support for this operation,\nso it is necessary to use the\nManagement Console.\nAs a user with IAM permission to read billing information\n(aws-portal:ViewBilling): Sign in to the AWS Management Console and open the\nBilling and Cost Management\nconsole at https://console.aws.amazon.com/billing/home#/. On the navigation\npane, choose Preferences. Verify whether the “Receive Billing Reports” check\nbox is ticked. If it is not, billing\nreports are not being generated.\n",
        "fix": "There is currently no AWS CLI support for this operation, so it\nis necessary to use the\nManagement Console.\nAs a user with IAM permission to read and write billing information\n(aws-portal:*Billing):\nSign in to the AWS Management Console and open the Billing and Cost Management\n\nconsole at https://console.aws.amazon.com/billing/home#/.\nOn the navigation pane, choose Preferences.\nSelect the Receive Billing Reports check box.\nDesignate the Amazon S3 bucket <S3_billing_bucket> where you want AWS to\npublish your detailed billing reports.\nEnsure that policy allows read access only to appropriate groups of users\n(finance,\nauditors, etc). For appropriate groups in IAM who you want to have read access,\n\ninclude the following policy element:'Statement':[\n{\n'Effect':'Allow',\n'Action':[\n's3:GetObject',\n's3:GetObjectVersion”,\n“s3:GetBucketLocation'\n],\n'Resource':'arn:aws:s3:::<S3_billing_bucket>/*'\n}\n]\nAfter your S3 bucket has been verified, under Report, select the check boxes\nfor the\nreports that you want to receive.\nChoose Save preferences\nDetailed billing reports can take up to 24 hours to start being generated. Wait\n>24\nhours, and examine your designated S3 bucket to verify that files with names of\nthe\nform (eg) <AWS account\nnumber>-<aws-billing-detailed-line-items-with-resourcesand-tags-yyyy-mm>.csv.zip\nare being generated.\n"
      },
      "code": "control \"M-1.17\" do\n  title \"1.17 Enable detailed billing (Scored)\"\n  desc  \"Enable Detailed Billing to cause the generation of a log record for\nevery event or hourly ongoing activity which incurs cost in an AWS account.\nThese records are aggregated into CSV files of hourly records, and written to\nan S3 bucket. A CSV (Comma Separated Values) file of billing records is written\nat least every 24 hours; writing of files is often more frequent. Detailed\nBilling records can be used as an overview of AWS activity across the whole of\nan account, in addition to per-Region CloudTrail, Config and other\nservice-specific JSON-based logs. Billing records can be graphed over time\nusing the Cost Explorer tool, and budgeting alerts can be configured on billing\nrecords and pushed to SNS in the event of spend over time, or predicted spend\nat current rate, going above a customer-set threshold - this can be used as a\nsimple means of detecting anomalous utilisation of AWS resources and thereby\ntriggering investigation activities. Billing records can also be broken out by\ntag, which can serve as a starting point in identifying which part of the\nenvironment, or organisation, the anomalous activity is occurring in. \"\n  impact 0.5\n  tag \"ref\": \"1.\nhttps://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/billing-whatis.html\n2.\nhttps://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/billingpermissions-ref.html#billing-example-policies\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"1.17\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"There is currently no AWS CLI support for this operation,\nso it is necessary to use the\nManagement Console.\nAs a user with IAM permission to read billing information\n(aws-portal:ViewBilling): Sign in to the AWS Management Console and open the\nBilling and Cost Management\nconsole at https://console.aws.amazon.com/billing/home#/. On the navigation\npane, choose Preferences. Verify whether the “Receive Billing Reports” check\nbox is ticked. If it is not, billing\nreports are not being generated.\n\"\n  tag \"fix\": \"There is currently no AWS CLI support for this operation, so it\nis necessary to use the\nManagement Console.\nAs a user with IAM permission to read and write billing information\n(aws-portal:*Billing):\nSign in to the AWS Management Console and open the Billing and Cost Management\n\nconsole at https://console.aws.amazon.com/billing/home#/.\nOn the navigation pane, choose Preferences.\nSelect the Receive Billing Reports check box.\nDesignate the Amazon S3 bucket <S3_billing_bucket> where you want AWS to\npublish your detailed billing reports.\nEnsure that policy allows read access only to appropriate groups of users\n(finance,\nauditors, etc). For appropriate groups in IAM who you want to have read access,\n\ninclude the following policy element:'Statement':[\n{\n'Effect':'Allow',\n'Action':[\n's3:GetObject',\n's3:GetObjectVersion”,\n“s3:GetBucketLocation'\n],\n'Resource':'arn:aws:s3:::<S3_billing_bucket>/*'\n}\n]\nAfter your S3 bucket has been verified, under Report, select the check boxes\nfor the\nreports that you want to receive.\nChoose Save preferences\nDetailed billing reports can take up to 24 hours to start being generated. Wait\n>24\nhours, and examine your designated S3 bucket to verify that files with names of\nthe\nform (eg) <AWS account\nnumber>-<aws-billing-detailed-line-items-with-resourcesand-tags-yyyy-mm>.csv.zip\nare being generated.\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-1.17.rb",
        "line": 1
      },
      "id": "M-1.17"
    },
    {
      "title": "1.18 Ensure IAM Master and IAM Manager roles are active (Scored)",
      "desc": "Ensure IAM Master and IAM Manager roles are in place for IAM\nadministration and assignment of administrative permissions for other services\nto other roles. An IAM role is conceptually “a container of permissions\nresembling a user account which cannot be directly logged into, but which must\ninstead be assumed from an existing user account which has appropriate\npermissions to do so”, in the manner of roles in Unix RoleBased Access Control\n(RBAC). In AWS, roles can also be assigned to EC2 instances and Lambda\nfunctions. Control over IAM, which is also defined and mediated by a number of\nfine-grained permissions, should be divided between a number of roles, such\nthat no individual user in a production account has full control over IAM. IAM\nis the principal point of control for service configuration access, and\n'control over IAM” means “control over the configuration of all other assets in\nthe AWS account”. Therefore it is recommended that control of this degree of\nsecurity criticality should be divided among multiple individuals within an\norganisation, in a manner such that no individual retains enough control over\nIAM to “rewrite themselves to root”. Roles are recommended for\nsecurity-sensitive capabilities, as the act of assuming a role generates a set\nof ephemeral credentials using the Security Token Service (STS) and these\ncredentials - being a token, an AWS Access Key and an AWS Secret Access Key -\nare needed to make API calls in the context of the role. STS credentials expire\nafter a configurable period (default 12 hours, minimum 15 minutes, maximum 36\nhours), and this reduces the risk of engineers hard-wiring these keys into\ncode, and therefore further reduces the risk of the keys being mishandled. The\ncurrent recommendation is to divide account and permission configuration\npermissions between 2 roles, which are: IAM Master: creates users, groups and\nroles; assigns permissions to roles IAM Manager: assigns users and roles to\ngroups In this model, IAM Master and IAM Manager must work together in a\n2-person rule manner, in order for a user to gain access to a permission.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. https://docs.aws.amazon.com/IAM/latest/UserGuide/list_iam.html\n2.\nhttps://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_configure\n-api-require.html",
        "severity": "medium",
        "cis_id": "1.18",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Using the Amazon unified CLI, from a user or role which\nhas the iam:ListRoles and\niam:GetRolePolicy permissions:\nList the configured roles:\naws iam list-roles --query 'Roles[*].{RoleName:RoleName, Arn:Arn}'\nThe output should contain entries with “RoleName”: “<iam_manager_role_name>”\nand\n“Rolename”: “<iam_master_role_name>”\nExamine the permissions associated with each of these roles:\naws iam get-role-policy —role-name <iam_manager_role_name>\naws iam get-role-policy —role-name <iam_master_role_name>\nThe <iam_master_role_name> role should include the following Actions with an\nAllow\neffect:\niam: AttachRolePolicy\niam:CreateGroup\niam:CreatePolicy\niam:CreatePolicyVersion\niam:CreateRole\niam:CreateUser\niam:DeleteGroup\niam:DeletePolicy\niam:DeletePolicyVersion\niam:DeleteRole\niam:DeleteRolePolicy\niam:DeleteUser\niam:PutRolePolicy\niam:GetPolicy\niam:GetPolicyVersion\niam:GetRole\niam:GetRolePolicy\niam:GetUser\niam:GetUserPolicy\niam:ListEntitiesForPolicy\niam:ListGroupPolicies\niam:ListGroups\niam:ListGroupsForUser\niam:ListPolicies\niam:ListPoliciesGrantingServiceAccess\niam:ListPolicyVersions\niam:ListRolePolicies\niam:ListAttachedGroupPolicies\niam:ListAttachedRolePolicies\niam:ListAttachedUserPolicies\niam:ListRoles\niam:ListUsers\n…and the following Actions with a Deny effect:\niam:AddUserToGroup\niam:AttachGroupPolicy\niam:DeleteGroupPolicy\niam:DeleteUserPolicy\niam:DetachGroupPolicy\niam:DetachRolePolicy\niam:DetachUserPolicy\niam:PutGroupPolicy\niam:PutUserPolicy\niam:RemoveUserFromGroup\niam:UpdateGroup\niam:UpdateAssumeRolePolicy\niam:UpdateUser\nThe <iam_manager_role_name> role should include the following Actions with an\nAllow\neffect:\niam:AddUserToGroup\niam:AttachGroupPolicy\niam:DeleteGroupPolicy\niam:DeleteUserPolicy\niam:DetachGroupPolicy\niam:DetachRolePolicy\niam:DetachUserPolicy\niam:PutGroupPolicy\niam:PutUserPolicy\niam:RemoveUserFromGroup\niam:UpdateGroup\niam:UpdateAssumeRolePolicy\niam:UpdateUser\niam:GetPolicy\niam:GetPolicyVersion\niam:GetRole\niam:GetRolePolicy\niam:GetUser\niam:GetUserPolicy\niam:ListEntitiesForPolicy\niam:ListGroupPolicies\niam:ListGroups\niam:ListGroupsForUser\niam:ListPolicies\niam:ListPoliciesGrantingServiceAccess\niam:ListPolicyVersions\niam:ListRolePolicies\niam:ListAttachedGroupPolicies\niam:ListAttachedRolePolicies\niam:ListAttachedUserPolicies\niam:ListRoles\niam:ListUsers\n…and the following Actions with a Deny effect:\niam: AttachRolePolicy\niam:CreateGroup\niam:CreatePolicy\niam:CreatePolicyVersion\niam:CreateRole\niam:CreateUser\niam:DeleteGroup\niam:DeletePolicy\niam:DeletePolicyVersion\niam:DeleteRole\niam:DeleteRolePolicy\niam:DeleteUser\niam:PutRolePolicy\nOther iam:* Actions may be included in these policies as needed.\nBoth policies should also be limited by a Condition that MFA authentication is\nin effect, by\ncontaining:\n'Condition': {'Bool': {'aws:MultiFactorAuthPresent': 'true'}}\nin the Allow effect section (provided IAM Federation has not been configured).\n\nEach role needs to be assumable by at least one user or group:\naws iam get-role —role-name <iam_manager_role_name>\naws iam get-role —role-name <iam_master_role_name>\nshould display the AssumeRolePolicyDocument indicating which users and groups\nare able\nto assume the roles. No user or group should be able to assume both roles.\n",
        "fix": "Using the Amazon unified CLI, from a user or role which has the\niam:CreateRole,\niam:CreatePolicy and iam:PutRolePolicy permissions:\naws iam create-role --role-name <iam_manager_role_name>\naws iam create-role --role-name <iam_master_role_name>\naws iam put-role-policy --role-name <iam_manager_role_name> --policy-name\n<iam_manager_permissions_policy> --policy-document\nfile://IAM-Manager-policy.json\naws iam put-role-policy --role-name <iam_master_role_name> --policy-name\n<iam_master_permissions_policy> --policy-document file://IAM-Master-policy.json\n\nwhere IAM-Master-policy.json contains:\n{\n'Version': '2012-10-17',\n'Statement': [{\n'Action': [\n“iam:CreateGroup”,\n“iam:CreatePolicy”,\n“iam:CreatePolicyVersion”,\n“iam:CreateRole”,\n“iam:CreateUser”,\n“iam:DeleteGroup”,\n“iam:DeletePolicy”,\n“iam:DeletePolicyVersion”,\n“iam:DeleteRole”,\n“iam:DeleteRolePolicy”,\n“iam:DeleteUser”,\n“iam:PutRolePolicy”,\n'iam:GetPolicy”,\n'iam:GetPolicyVersion”,\n'iam:GetRole”,\n'iam:GetRolePolicy”,\n'iam:GetUser”,\n'iam:GetUserPolicy”,\n'iam:ListEntitiesForPolicy”,\n'iam:ListGroupPolicies”,\n'iam:ListGroups”,\n'iam:ListGroupsForUser”,\n'iam:ListPolicies”,\n'iam:ListPoliciesGrantingServiceAccess”,\n'iam:ListPolicyVersions”,\n'iam:ListRolePolicies”,\n'iam:ListAttachedGroupPolicies”,\n'iam:ListAttachedRolePolicies”,\n'iam:ListAttachedUserPolicies”,\n'iam:ListRoles”,\n'iam:ListUsers”\n],\n'Effect': 'Allow',\n'Resource': “*”,\n'Condition': {'Bool': {'aws:MultiFactorAuthPresent': 'true'}}\n}],\n'Action': [\n“iam:AddUserToGroup”,\n“iam:AttachGroupPolicy”,\n“iam:DeleteGroupPolicy”,\n“iam:DeleteUserPolicy”,\n“iam:DetachGroupPolicy”,\n“iam:DetachRolePolicy”,\n“iam:DetachUserPolicy”,\n“iam:PutGroupPolicy”,\n“iam:PutUserPolicy”,\n“iam:RemoveUserFromGroup”,\n“iam:UpdateGroup”,\n“iam:UpdateAssumeRolePolicy”,\n“iam:UpdateUser'\n],\n'Effect': “Deny',\n'Resource': “*'\n}]\n}\nand where IAM-Manager-policy.json contains:\n{\n'Version': '2012-10-17',\n'Statement': [{\n'Action': [\n“iam:AddUserToGroup”,\n“iam:AttachGroupPolicy”,\n“iam:DeleteGroupPolicy”,\n“iam:DeleteUserPolicy”,\n“iam:DetachGroupPolicy”,\n“iam:DetachRolePolicy”,\n“iam:DetachUserPolicy”,\n“iam:PutGroupPolicy”,\n“iam:PutUserPolicy”,\n“iam:RemoveUserFromGroup”,\n“iam:UpdateGroup”,\n“iam:UpdateAssumeRolePolicy”,\n“iam:UpdateUser”,\n'iam:GetPolicy”,\n'iam:GetPolicyVersion”,\n'iam:GetRole”,\n'iam:GetRolePolicy”,\n'iam:GetUser”,\n'iam:GetUserPolicy”,\n'iam:ListEntitiesForPolicy”,\n'iam:ListGroupPolicies”,\n'iam:ListGroups”,\n'iam:ListGroupsForUser”,\n'iam:ListPolicies”,\n'iam:ListPoliciesGrantingServiceAccess”,\n'iam:ListPolicyVersions”,\n'iam:ListRolePolicies”,\n'iam:ListAttachedGroupPolicies”,\n'iam:ListAttachedRolePolicies”,\n'iam:ListAttachedUserPolicies”,\n'iam:ListRoles”,\n'iam:ListUsers”\n],\n'Effect': 'Allow',\n'Resource': “*”,\n'Condition': {'Bool': {'aws:MultiFactorAuthPresent': 'true'}}\n}],\n'Action': [\n“iam:CreateGroup”,\n“iam:CreatePolicy”,\n“iam:CreatePolicyVersion”,\n“iam:CreateRole”,\n“iam:CreateUser”,\n“iam:DeleteGroup”,\n“iam:DeletePolicy”,\n“iam:DeletePolicyVersion”,\n“iam:DeleteRole”,\n“iam:DeleteRolePolicy”,\n“iam:DeleteUser”,\n“iam:PutRolePolicy”\n],\n'Effect': “Deny',\n'Resource': “*'\n}]\n}\nNote that each of IAM-Manager-policy.json and IAM-Master-policy.json can\ncontain other\niam:* permissions in either Allow or Deny Action lists, depending on what other\nrequirements\nare in place in the account.\nEach of these roles needs to be assumable by a different user or group.\nFor appropriate users or groups (groups are recommended):\naws iam put-user-policy --user-name <iam_user> --policy-name\n<assume_iam_master_role_policy> --policy-document file://Assume-IAM-Master.json\n\naws iam put-user-policy --user-name <iam_user> --policy-name\n<assume_iam_manager_role_policy> --policy-document\nfile://Assume-IAM-Manager.json\nor\naws iam put-group-policy --group-name <iam_group> --policy-name\n<assume_iam_master_role_policy> --policy-document file://Assume-IAM-Master.json\n\naws iam put-group-policy --group-name <iam_group> --policy-name\n<assume_iam_manager_role_policy> --policy-document\nfile://Assume-IAM-Manager.json\nwhere Assume-IAM-Master.json is:\n{\n'Version': '2012-10-17',\n'Statement': {\n'Effect': 'Allow',\n'Action': 'sts:AssumeRole',\n'Resource': 'arn:aws:iam::<aws_account_number>:role/<iam_master_role_name>'\n}\n}\nand Assume-IAM-Manager.json is:\n{\n'Version': '2012-10-17',\n'Statement': {\n'Effect': 'Allow',\n'Action': 'sts:AssumeRole',\n'Resource': 'arn:aws:iam::<aws_account_number>:role/<iam_manager_role_name>'\n}\n}\n"
      },
      "code": "control \"M-1.18\" do\n  title \"1.18 Ensure IAM Master and IAM Manager roles are active (Scored)\"\n  desc  \"Ensure IAM Master and IAM Manager roles are in place for IAM\nadministration and assignment of administrative permissions for other services\nto other roles. An IAM role is conceptually “a container of permissions\nresembling a user account which cannot be directly logged into, but which must\ninstead be assumed from an existing user account which has appropriate\npermissions to do so”, in the manner of roles in Unix RoleBased Access Control\n(RBAC). In AWS, roles can also be assigned to EC2 instances and Lambda\nfunctions. Control over IAM, which is also defined and mediated by a number of\nfine-grained permissions, should be divided between a number of roles, such\nthat no individual user in a production account has full control over IAM. IAM\nis the principal point of control for service configuration access, and\n'control over IAM” means “control over the configuration of all other assets in\nthe AWS account”. Therefore it is recommended that control of this degree of\nsecurity criticality should be divided among multiple individuals within an\norganisation, in a manner such that no individual retains enough control over\nIAM to “rewrite themselves to root”. Roles are recommended for\nsecurity-sensitive capabilities, as the act of assuming a role generates a set\nof ephemeral credentials using the Security Token Service (STS) and these\ncredentials - being a token, an AWS Access Key and an AWS Secret Access Key -\nare needed to make API calls in the context of the role. STS credentials expire\nafter a configurable period (default 12 hours, minimum 15 minutes, maximum 36\nhours), and this reduces the risk of engineers hard-wiring these keys into\ncode, and therefore further reduces the risk of the keys being mishandled. The\ncurrent recommendation is to divide account and permission configuration\npermissions between 2 roles, which are: IAM Master: creates users, groups and\nroles; assigns permissions to roles IAM Manager: assigns users and roles to\ngroups In this model, IAM Master and IAM Manager must work together in a\n2-person rule manner, in order for a user to gain access to a permission. \"\n  impact 0.5\n  tag \"ref\": \"1. https://docs.aws.amazon.com/IAM/latest/UserGuide/list_iam.html\n2.\nhttps://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_configure\n-api-require.html\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"1.18\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Using the Amazon unified CLI, from a user or role which\nhas the iam:ListRoles and\niam:GetRolePolicy permissions:\nList the configured roles:\naws iam list-roles --query 'Roles[*].{RoleName:RoleName, Arn:Arn}'\nThe output should contain entries with “RoleName”: “<iam_manager_role_name>”\nand\n“Rolename”: “<iam_master_role_name>”\nExamine the permissions associated with each of these roles:\naws iam get-role-policy —role-name <iam_manager_role_name>\naws iam get-role-policy —role-name <iam_master_role_name>\nThe <iam_master_role_name> role should include the following Actions with an\nAllow\neffect:\niam: AttachRolePolicy\niam:CreateGroup\niam:CreatePolicy\niam:CreatePolicyVersion\niam:CreateRole\niam:CreateUser\niam:DeleteGroup\niam:DeletePolicy\niam:DeletePolicyVersion\niam:DeleteRole\niam:DeleteRolePolicy\niam:DeleteUser\niam:PutRolePolicy\niam:GetPolicy\niam:GetPolicyVersion\niam:GetRole\niam:GetRolePolicy\niam:GetUser\niam:GetUserPolicy\niam:ListEntitiesForPolicy\niam:ListGroupPolicies\niam:ListGroups\niam:ListGroupsForUser\niam:ListPolicies\niam:ListPoliciesGrantingServiceAccess\niam:ListPolicyVersions\niam:ListRolePolicies\niam:ListAttachedGroupPolicies\niam:ListAttachedRolePolicies\niam:ListAttachedUserPolicies\niam:ListRoles\niam:ListUsers\n…and the following Actions with a Deny effect:\niam:AddUserToGroup\niam:AttachGroupPolicy\niam:DeleteGroupPolicy\niam:DeleteUserPolicy\niam:DetachGroupPolicy\niam:DetachRolePolicy\niam:DetachUserPolicy\niam:PutGroupPolicy\niam:PutUserPolicy\niam:RemoveUserFromGroup\niam:UpdateGroup\niam:UpdateAssumeRolePolicy\niam:UpdateUser\nThe <iam_manager_role_name> role should include the following Actions with an\nAllow\neffect:\niam:AddUserToGroup\niam:AttachGroupPolicy\niam:DeleteGroupPolicy\niam:DeleteUserPolicy\niam:DetachGroupPolicy\niam:DetachRolePolicy\niam:DetachUserPolicy\niam:PutGroupPolicy\niam:PutUserPolicy\niam:RemoveUserFromGroup\niam:UpdateGroup\niam:UpdateAssumeRolePolicy\niam:UpdateUser\niam:GetPolicy\niam:GetPolicyVersion\niam:GetRole\niam:GetRolePolicy\niam:GetUser\niam:GetUserPolicy\niam:ListEntitiesForPolicy\niam:ListGroupPolicies\niam:ListGroups\niam:ListGroupsForUser\niam:ListPolicies\niam:ListPoliciesGrantingServiceAccess\niam:ListPolicyVersions\niam:ListRolePolicies\niam:ListAttachedGroupPolicies\niam:ListAttachedRolePolicies\niam:ListAttachedUserPolicies\niam:ListRoles\niam:ListUsers\n…and the following Actions with a Deny effect:\niam: AttachRolePolicy\niam:CreateGroup\niam:CreatePolicy\niam:CreatePolicyVersion\niam:CreateRole\niam:CreateUser\niam:DeleteGroup\niam:DeletePolicy\niam:DeletePolicyVersion\niam:DeleteRole\niam:DeleteRolePolicy\niam:DeleteUser\niam:PutRolePolicy\nOther iam:* Actions may be included in these policies as needed.\nBoth policies should also be limited by a Condition that MFA authentication is\nin effect, by\ncontaining:\n'Condition': {'Bool': {'aws:MultiFactorAuthPresent': 'true'}}\nin the Allow effect section (provided IAM Federation has not been configured).\n\nEach role needs to be assumable by at least one user or group:\naws iam get-role —role-name <iam_manager_role_name>\naws iam get-role —role-name <iam_master_role_name>\nshould display the AssumeRolePolicyDocument indicating which users and groups\nare able\nto assume the roles. No user or group should be able to assume both roles.\n\"\n  tag \"fix\": \"Using the Amazon unified CLI, from a user or role which has the\niam:CreateRole,\niam:CreatePolicy and iam:PutRolePolicy permissions:\naws iam create-role --role-name <iam_manager_role_name>\naws iam create-role --role-name <iam_master_role_name>\naws iam put-role-policy --role-name <iam_manager_role_name> --policy-name\n<iam_manager_permissions_policy> --policy-document\nfile://IAM-Manager-policy.json\naws iam put-role-policy --role-name <iam_master_role_name> --policy-name\n<iam_master_permissions_policy> --policy-document file://IAM-Master-policy.json\n\nwhere IAM-Master-policy.json contains:\n{\n'Version': '2012-10-17',\n'Statement': [{\n'Action': [\n“iam:CreateGroup”,\n“iam:CreatePolicy”,\n“iam:CreatePolicyVersion”,\n“iam:CreateRole”,\n“iam:CreateUser”,\n“iam:DeleteGroup”,\n“iam:DeletePolicy”,\n“iam:DeletePolicyVersion”,\n“iam:DeleteRole”,\n“iam:DeleteRolePolicy”,\n“iam:DeleteUser”,\n“iam:PutRolePolicy”,\n'iam:GetPolicy”,\n'iam:GetPolicyVersion”,\n'iam:GetRole”,\n'iam:GetRolePolicy”,\n'iam:GetUser”,\n'iam:GetUserPolicy”,\n'iam:ListEntitiesForPolicy”,\n'iam:ListGroupPolicies”,\n'iam:ListGroups”,\n'iam:ListGroupsForUser”,\n'iam:ListPolicies”,\n'iam:ListPoliciesGrantingServiceAccess”,\n'iam:ListPolicyVersions”,\n'iam:ListRolePolicies”,\n'iam:ListAttachedGroupPolicies”,\n'iam:ListAttachedRolePolicies”,\n'iam:ListAttachedUserPolicies”,\n'iam:ListRoles”,\n'iam:ListUsers”\n],\n'Effect': 'Allow',\n'Resource': “*”,\n'Condition': {'Bool': {'aws:MultiFactorAuthPresent': 'true'}}\n}],\n'Action': [\n“iam:AddUserToGroup”,\n“iam:AttachGroupPolicy”,\n“iam:DeleteGroupPolicy”,\n“iam:DeleteUserPolicy”,\n“iam:DetachGroupPolicy”,\n“iam:DetachRolePolicy”,\n“iam:DetachUserPolicy”,\n“iam:PutGroupPolicy”,\n“iam:PutUserPolicy”,\n“iam:RemoveUserFromGroup”,\n“iam:UpdateGroup”,\n“iam:UpdateAssumeRolePolicy”,\n“iam:UpdateUser'\n],\n'Effect': “Deny',\n'Resource': “*'\n}]\n}\nand where IAM-Manager-policy.json contains:\n{\n'Version': '2012-10-17',\n'Statement': [{\n'Action': [\n“iam:AddUserToGroup”,\n“iam:AttachGroupPolicy”,\n“iam:DeleteGroupPolicy”,\n“iam:DeleteUserPolicy”,\n“iam:DetachGroupPolicy”,\n“iam:DetachRolePolicy”,\n“iam:DetachUserPolicy”,\n“iam:PutGroupPolicy”,\n“iam:PutUserPolicy”,\n“iam:RemoveUserFromGroup”,\n“iam:UpdateGroup”,\n“iam:UpdateAssumeRolePolicy”,\n“iam:UpdateUser”,\n'iam:GetPolicy”,\n'iam:GetPolicyVersion”,\n'iam:GetRole”,\n'iam:GetRolePolicy”,\n'iam:GetUser”,\n'iam:GetUserPolicy”,\n'iam:ListEntitiesForPolicy”,\n'iam:ListGroupPolicies”,\n'iam:ListGroups”,\n'iam:ListGroupsForUser”,\n'iam:ListPolicies”,\n'iam:ListPoliciesGrantingServiceAccess”,\n'iam:ListPolicyVersions”,\n'iam:ListRolePolicies”,\n'iam:ListAttachedGroupPolicies”,\n'iam:ListAttachedRolePolicies”,\n'iam:ListAttachedUserPolicies”,\n'iam:ListRoles”,\n'iam:ListUsers”\n],\n'Effect': 'Allow',\n'Resource': “*”,\n'Condition': {'Bool': {'aws:MultiFactorAuthPresent': 'true'}}\n}],\n'Action': [\n“iam:CreateGroup”,\n“iam:CreatePolicy”,\n“iam:CreatePolicyVersion”,\n“iam:CreateRole”,\n“iam:CreateUser”,\n“iam:DeleteGroup”,\n“iam:DeletePolicy”,\n“iam:DeletePolicyVersion”,\n“iam:DeleteRole”,\n“iam:DeleteRolePolicy”,\n“iam:DeleteUser”,\n“iam:PutRolePolicy”\n],\n'Effect': “Deny',\n'Resource': “*'\n}]\n}\nNote that each of IAM-Manager-policy.json and IAM-Master-policy.json can\ncontain other\niam:* permissions in either Allow or Deny Action lists, depending on what other\nrequirements\nare in place in the account.\nEach of these roles needs to be assumable by a different user or group.\nFor appropriate users or groups (groups are recommended):\naws iam put-user-policy --user-name <iam_user> --policy-name\n<assume_iam_master_role_policy> --policy-document file://Assume-IAM-Master.json\n\naws iam put-user-policy --user-name <iam_user> --policy-name\n<assume_iam_manager_role_policy> --policy-document\nfile://Assume-IAM-Manager.json\nor\naws iam put-group-policy --group-name <iam_group> --policy-name\n<assume_iam_master_role_policy> --policy-document file://Assume-IAM-Master.json\n\naws iam put-group-policy --group-name <iam_group> --policy-name\n<assume_iam_manager_role_policy> --policy-document\nfile://Assume-IAM-Manager.json\nwhere Assume-IAM-Master.json is:\n{\n'Version': '2012-10-17',\n'Statement': {\n'Effect': 'Allow',\n'Action': 'sts:AssumeRole',\n'Resource': 'arn:aws:iam::<aws_account_number>:role/<iam_master_role_name>'\n}\n}\nand Assume-IAM-Manager.json is:\n{\n'Version': '2012-10-17',\n'Statement': {\n'Effect': 'Allow',\n'Action': 'sts:AssumeRole',\n'Resource': 'arn:aws:iam::<aws_account_number>:role/<iam_manager_role_name>'\n}\n}\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-1.18.rb",
        "line": 1
      },
      "id": "M-1.18"
    },
    {
      "title": "1.19 Maintain current contact details (Scored)",
      "desc": "Ensure contact email and telephone details for AWS accounts are\ncurrent and map to more than one individual in your organisation. An AWS\naccount supports a number of contact details, and AWS will use these to contact\nthe account owner if activity judged to be in breach of Acceptable Use Policy\nor indicative of likely security compromise is observed by the AWS Abuse team.\nContact details should not be for a single individual, as circumstances may\narise where that individual is unavailable. Email contact details should point\nto a mail alias which forwards email to multiple individuals within the\norganisation; where feasible, phone contact details should point to a PABX hunt\ngroup or other call-forwarding system. If an AWS account is observed to be\nbehaving in a prohibited or suspicious manner, AWS will attempt to contact the\naccount owner by email and phone using the contact details listed. If this is\nunsuccessful and the account behaviour needs urgent mitigation, proactive\nmeasures may be taken, including throttling of traffic between the account\nexhibiting suspicious behaviour and the AWS API endpoints and the Internet.\nThis will result in impaired service to and from the account in question, so it\nis in both the customers’ and AWS’ best interests that prompt contact can be\nestablished. This is best achieved by setting AWS account contact details to\npoint to resources which have multiple individuals as recipients, such as email\naliases and PABX hunt groups.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1.\nhttps://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/manage-accountpayment.html#contact-info",
        "severity": "medium",
        "cis_id": "1.19",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "This activity can only be performed via the AWS Console,\nwith a user who has permission\nto read and write Billing information (aws-portal:*Billing ).Sign in to the AWS\nManagement Console and open the Billing and Cost Management\nconsole at https://console.aws.amazon.com/billing/home#/.\nOn the navigation bar, choose your account name, and then choose My Account.\nOn the Account Settings page, review and verify the current details.\nUnder Contact Information, review and verify the current details.\n",
        "fix": "This activity can only be performed via the AWS Console, with a\nuser who has permission\nto read and write Billing information (aws-portal:*Billing ).Sign in to the AWS\nManagement Console and open the Billing and Cost Management\nconsole at https://console.aws.amazon.com/billing/home#/.\nOn the navigation bar, choose your account name, and then choose My Account.\nOn the Account Settings page, next to Account Settings, choose Edit.\nNext to the field that you need to update, choose Edit.\nAfter you have entered your changes, choose Save changes.\nAfter you have made your changes, choose Done.\nTo edit your contact information, under Contact Information, choose Edit.\nFor the fields that you want to change, type your updated information, and then\n\nchoose Update.\n"
      },
      "code": "control \"M-1.19\" do\n  title \"1.19 Maintain current contact details (Scored)\"\n  desc  \"Ensure contact email and telephone details for AWS accounts are\ncurrent and map to more than one individual in your organisation. An AWS\naccount supports a number of contact details, and AWS will use these to contact\nthe account owner if activity judged to be in breach of Acceptable Use Policy\nor indicative of likely security compromise is observed by the AWS Abuse team.\nContact details should not be for a single individual, as circumstances may\narise where that individual is unavailable. Email contact details should point\nto a mail alias which forwards email to multiple individuals within the\norganisation; where feasible, phone contact details should point to a PABX hunt\ngroup or other call-forwarding system. If an AWS account is observed to be\nbehaving in a prohibited or suspicious manner, AWS will attempt to contact the\naccount owner by email and phone using the contact details listed. If this is\nunsuccessful and the account behaviour needs urgent mitigation, proactive\nmeasures may be taken, including throttling of traffic between the account\nexhibiting suspicious behaviour and the AWS API endpoints and the Internet.\nThis will result in impaired service to and from the account in question, so it\nis in both the customers’ and AWS’ best interests that prompt contact can be\nestablished. This is best achieved by setting AWS account contact details to\npoint to resources which have multiple individuals as recipients, such as email\naliases and PABX hunt groups. \"\n  impact 0.5\n  tag \"ref\": \"1.\nhttps://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/manage-accountpayment.html#contact-info\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"1.19\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"This activity can only be performed via the AWS Console,\nwith a user who has permission\nto read and write Billing information (aws-portal:*Billing ).Sign in to the AWS\nManagement Console and open the Billing and Cost Management\nconsole at https://console.aws.amazon.com/billing/home#/.\nOn the navigation bar, choose your account name, and then choose My Account.\nOn the Account Settings page, review and verify the current details.\nUnder Contact Information, review and verify the current details.\n\"\n  tag \"fix\": \"This activity can only be performed via the AWS Console, with a\nuser who has permission\nto read and write Billing information (aws-portal:*Billing ).Sign in to the AWS\nManagement Console and open the Billing and Cost Management\nconsole at https://console.aws.amazon.com/billing/home#/.\nOn the navigation bar, choose your account name, and then choose My Account.\nOn the Account Settings page, next to Account Settings, choose Edit.\nNext to the field that you need to update, choose Edit.\nAfter you have entered your changes, choose Save changes.\nAfter you have made your changes, choose Done.\nTo edit your contact information, under Contact Information, choose Edit.\nFor the fields that you want to change, type your updated information, and then\n\nchoose Update.\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-1.19.rb",
        "line": 1
      },
      "id": "M-1.19"
    },
    {
      "title": "1.2 Ensure multi-factor authentication (MFA) is enabled for all IAM\nusers that have a console password (Scored)",
      "desc": "Multi-Factor Authentication (MFA) adds an extra layer of protection on\ntop of a user name and password. With MFA enabled, when a user signs in to an\nAWS website, they will be prompted for their user name and password as well as\nfor an authentication code from their AWS MFA device. It is recommended that\nMFA be enabled for all accounts that have a console password. Enabling MFA\nprovides increased security for console access as it requires the\nauthenticating principal to possess a device that emits a time-sensitive key\nand have knowledge of a credential.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. 2. 3. 4. http://tools.ietf.org/html/rfc6238\nhttp://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa.html\nCCE-78901-6 CIS CSC v6.0 #5.6, #11.4, #12.6, #16.11",
        "severity": "medium",
        "cis_id": "1.2",
        "cis_control": [
          [
            "5.6",
            "11.4",
            "12.6",
            "16.11"
          ],
          "6.1"
        ],
        "cis_level": 1,
        "nist": [
          [
            "IA-2 (1)",
            4
          ],
          [
            "SC-23",
            4
          ],
          [
            "IA-2 (1)",
            4
          ],
          [
            "IA-2 (1)",
            4
          ]
        ],
        "audit text": "Perform the following to determine if a MFA device is\nenabled for all IAM users having a\nconsole password:\nVia Management Console Open the IAM console at\nhttps://console.aws.amazon.com/iam/. In the left pane, select Users If the MFA\nDevice or Password columns are not visible in the table, click the gear\nicon at the upper right corner of the table and ensure a checkmark is next to\nboth,\nthen click Close. Ensure each user having a checkmark in the Password column\nalso has a value in the\nMFA Device column.\nVia the CLI Run the following command (OSX/Linux/UNIX) to generate a list of\nall IAM users\nalong with their password and MFA status:\naws iam generate-credential-report\naws iam get-credential-report --query 'Content' --output text | base64 -d | cut\n\n-d, -f1,4,8 The output of this command will produce a table similar to the\nfollowing:\nuser,password_enabled,mfa_active\nelise,false,false\nbrandon,true,true\nrakesh,false,false\nhelene,false,false\nparas,true,true\nanitha,false,false For any column having password_enabled set to true, ensure\nmfa_active is also set\nto true.\n",
        "fix": "Perform the following to enable MFA: Sign in to the AWS\nManagement Console and open the IAM console at\nhttps://console.aws.amazon.com/iam/. In the navigation pane, choose Users. In\nthe User Name list, choose the name of the intended MFA user. Choose the\nSecurity Credentials tab, and then choose Manage MFA Device. In the Manage MFA\nDevice wizard, choose A virtual MFA device, and then choose\nNext Step.\nIAM generates and displays configuration information for the virtual MFA\ndevice,\nincluding a QR code graphic. The graphic is a representation of the 'secret\nconfiguration key' that is available for manual entry on devices that do not\nsupport\nQR codes. Open your virtual MFA application. (For a list of apps that you can\nuse for hosting\nvirtual MFA devices, see Virtual MFA Applications.) If the virtual MFA\napplication\nsupports multiple accounts (multiple virtual MFA devices), choose the option to\n\ncreate a new account (a new virtual MFA device). Determine whether the MFA app\nsupports QR codes, and then do one of the\nfollowing:\no Use the app to scan the QR code. For example, you might choose the camera\nicon or choose an option similar to Scan code, and then use the device's\ncamera to scan the code.\no In the Manage MFA Device wizard, choose Show secret key for manual\nconfiguration, and then type the secret configuration key into your MFA\napplication.\nWhen you are finished, the virtual MFA device starts generating one-time\npasswords. In the Manage MFA Device wizard, in the Authentication Code 1 box,\ntype the onetime password that currently appears in the virtual MFA device.\nWait up to 30\nseconds for the device to generate a new one-time password. Then type the\nsecond\none-time password into the Authentication Code 2 box. Choose Active Virtual\nMFA.\nForced IAM User Self-Service Remediation\nAmazon has published a pattern that forces users to self-service setup MFA\nbefore they\nhave access to their complete permissions set. Until they complete this step,\nthey\ncannot access their full permissions. This pattern can be used on new AWS\naccounts. It can also be used on existing accounts - it is recommended users\nare given\ninstructions and a grace period to accomplish MFA enrollment before active\nenforcement on existing AWS accounts.\nHow to Delegate Management of Multi-Factor Authentication to AWS IAM Users\n"
      },
      "code": "control \"M-1.2\" do\n  title \"1.2 Ensure multi-factor authentication (MFA) is enabled for all IAM\nusers that have a console password (Scored)\"\n  desc  \"Multi-Factor Authentication (MFA) adds an extra layer of protection on\ntop of a user name and password. With MFA enabled, when a user signs in to an\nAWS website, they will be prompted for their user name and password as well as\nfor an authentication code from their AWS MFA device. It is recommended that\nMFA be enabled for all accounts that have a console password. Enabling MFA\nprovides increased security for console access as it requires the\nauthenticating principal to possess a device that emits a time-sensitive key\nand have knowledge of a credential. \"\n  impact 0.5\n  tag \"ref\": \"1. 2. 3. 4. http://tools.ietf.org/html/rfc6238\nhttp://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa.html\nCCE-78901-6 CIS CSC v6.0 #5.6, #11.4, #12.6, #16.11\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"1.2\"\n  tag \"cis_control\": [[\"5.6\", \"11.4\", \"12.6\", \"16.11\"], \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"nist\": [[\"IA-2 (1)\", 4], [\"SC-23\", 4], [\"IA-2 (1)\", 4], [\"IA-2 (1)\", 4]]\n  tag \"audit text\": \"Perform the following to determine if a MFA device is\nenabled for all IAM users having a\nconsole password:\nVia Management Console Open the IAM console at\nhttps://console.aws.amazon.com/iam/. In the left pane, select Users If the MFA\nDevice or Password columns are not visible in the table, click the gear\nicon at the upper right corner of the table and ensure a checkmark is next to\nboth,\nthen click Close. Ensure each user having a checkmark in the Password column\nalso has a value in the\nMFA Device column.\nVia the CLI Run the following command (OSX/Linux/UNIX) to generate a list of\nall IAM users\nalong with their password and MFA status:\naws iam generate-credential-report\naws iam get-credential-report --query 'Content' --output text | base64 -d | cut\n\n-d, -f1,4,8 The output of this command will produce a table similar to the\nfollowing:\nuser,password_enabled,mfa_active\nelise,false,false\nbrandon,true,true\nrakesh,false,false\nhelene,false,false\nparas,true,true\nanitha,false,false For any column having password_enabled set to true, ensure\nmfa_active is also set\nto true.\n\"\n  tag \"fix\": \"Perform the following to enable MFA: Sign in to the AWS\nManagement Console and open the IAM console at\nhttps://console.aws.amazon.com/iam/. In the navigation pane, choose Users. In\nthe User Name list, choose the name of the intended MFA user. Choose the\nSecurity Credentials tab, and then choose Manage MFA Device. In the Manage MFA\nDevice wizard, choose A virtual MFA device, and then choose\nNext Step.\nIAM generates and displays configuration information for the virtual MFA\ndevice,\nincluding a QR code graphic. The graphic is a representation of the 'secret\nconfiguration key' that is available for manual entry on devices that do not\nsupport\nQR codes. Open your virtual MFA application. (For a list of apps that you can\nuse for hosting\nvirtual MFA devices, see Virtual MFA Applications.) If the virtual MFA\napplication\nsupports multiple accounts (multiple virtual MFA devices), choose the option to\n\ncreate a new account (a new virtual MFA device). Determine whether the MFA app\nsupports QR codes, and then do one of the\nfollowing:\no Use the app to scan the QR code. For example, you might choose the camera\nicon or choose an option similar to Scan code, and then use the device's\ncamera to scan the code.\no In the Manage MFA Device wizard, choose Show secret key for manual\nconfiguration, and then type the secret configuration key into your MFA\napplication.\nWhen you are finished, the virtual MFA device starts generating one-time\npasswords. In the Manage MFA Device wizard, in the Authentication Code 1 box,\ntype the onetime password that currently appears in the virtual MFA device.\nWait up to 30\nseconds for the device to generate a new one-time password. Then type the\nsecond\none-time password into the Authentication Code 2 box. Choose Active Virtual\nMFA.\nForced IAM User Self-Service Remediation\nAmazon has published a pattern that forces users to self-service setup MFA\nbefore they\nhave access to their complete permissions set. Until they complete this step,\nthey\ncannot access their full permissions. This pattern can be used on new AWS\naccounts. It can also be used on existing accounts - it is recommended users\nare given\ninstructions and a grace period to accomplish MFA enrollment before active\nenforcement on existing AWS accounts.\nHow to Delegate Management of Multi-Factor Authentication to AWS IAM Users\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-1.2.rb",
        "line": 1
      },
      "id": "M-1.2"
    },
    {
      "title": "1.20 Ensure security contact information is registered (Scored)",
      "desc": "AWS provides customers with the option of specifying the contact\ninformation for account's security team. It is recommended that this\ninformation be provided. Specifying security-specific contact information will\nhelp ensure that security advisories sent by AWS reach the team in your\norganization that is best equipped to respond to them.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-79200-2",
        "severity": "medium",
        "cis_id": "1.20",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Perform the following in the AWS Management Console to\ndetermine if security contact\ninformation is present:\nClick on your account name at the top right corner of the console\nFrom the drop-down menu Click My Account\nScroll down to the Alternate Contacts section\nEnsure contact information is specified in the Security section\n",
        "fix": "Perform the following in the AWS Management Console to establish\nsecurity contact\ninformation:\nClick on your account name at the top right corner of the console.\nFrom the drop-down menu Click My Account\nScroll down to the Alternate Contacts section\nEnter contact information in the Security section\nNote: Consider specifying an internal email distribution list to ensure emails\nare regularly\nmonitored by more than one individual.\n"
      },
      "code": "control \"M-1.20\" do\n  title \"1.20 Ensure security contact information is registered (Scored)\"\n  desc  \"AWS provides customers with the option of specifying the contact\ninformation for account's security team. It is recommended that this\ninformation be provided. Specifying security-specific contact information will\nhelp ensure that security advisories sent by AWS reach the team in your\norganization that is best equipped to respond to them. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-79200-2\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"1.20\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Perform the following in the AWS Management Console to\ndetermine if security contact\ninformation is present:\nClick on your account name at the top right corner of the console\nFrom the drop-down menu Click My Account\nScroll down to the Alternate Contacts section\nEnsure contact information is specified in the Security section\n\"\n  tag \"fix\": \"Perform the following in the AWS Management Console to establish\nsecurity contact\ninformation:\nClick on your account name at the top right corner of the console.\nFrom the drop-down menu Click My Account\nScroll down to the Alternate Contacts section\nEnter contact information in the Security section\nNote: Consider specifying an internal email distribution list to ensure emails\nare regularly\nmonitored by more than one individual.\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-1.20.rb",
        "line": 1
      },
      "id": "M-1.20"
    },
    {
      "title": "1.21 Ensure IAM instance roles are used for AWS resource access from\ninstances (Not Scored)",
      "desc": "AWS access from within AWS instances can be done by either encoding\nAWS keys into AWS API calls or by assigning the instance to a role which has an\nappropriate permissions policy for the required access. 'AWS Access' means\naccessing the APIs of AWS in order to access AWS resources or manage AWS\naccount resources. AWS IAM roles reduce the risks associated with sharing and\nrotating credentials that can be used outside of AWS itself. If credentials are\ncompromised, they can be used from outside of the the AWS account they give\naccess to. In contrast, in order to leverage role permissions an attacker would\nneed to gain and maintain access to a specific instance to use the privileges\nassociated with it. Additionally, if credentials are encoded into compiled\napplications or other hard to change mechanisms, then they are even more\nunlikely to be properly rotated due to service disruption risks. As time goes\non, credentials that cannot be rotated are more likely to be known by an\nincreasing number of individuals who no longer work for the organization owning\nthe credentials.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1.\nhttp://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-roleec2.html\n2.\nhttp://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazonec2.html\n3. CIS CSC v6.0 #16.14 (someone please check the applicability of this for me)",
        "severity": "medium",
        "cis_id": "1.21",
        "cis_control": [
          [
            "16.14"
          ],
          "6.1"
        ],
        "cis_level": 2,
        "nist": [
          [
            "SC-28",
            4
          ]
        ],
        "audit text": "Whether an Instance Is Associated With a Role\nFor instances that are known to perform AWS actions, ensure that they belong to\nan\ninstance role that has the necessary permissions: Login to AWS Console (with\nappropriate permissions to View Identity Access\nManagement Account Settings) Open the EC2 Dashboard and choose 'Instances'\nClick the EC2 instance that performs AWS actions, in the lower pane details\nfind\n'IAM Role' If the Role is blank, the instance is not assigned to one. If the\nRole is filled in, it does not mean the instance might not *also* have\ncredentials\nencoded on it for some activities.\nWhether an Instance Contains Embedded Credentials\nOn the instance that is known to perform AWS actions, audit all scripts and\nenvironment\nvariables to ensure that none of them contain AWS credentials.\nWhether an Instance Application Contains Embedded Credentials\nApplications that run on an instance may also have credentials embedded. This\nis a bad\npractice, but even worse if the source code is stored in a public code\nrepository such as\ngithub. When an application contains credentials can be determined by\neliminating allther sources of credentials and if the application can still\naccess AWS resources - it likely\ncontains embedded credentials. Another method is to examine all source code and\n\nconfiguration files of the application.\n",
        "fix": "IAM roles can only be associated at the launch of an instance. To\nremediate an instance to\nadd it to a role you must create a new instance.\nIf the instance has no external dependencies on it's current private ip or\npublic addresses\nare elastic IPs: In AWS IAM create a new role. Assign a permissions policy if\nneeded permissions\nare already known. In the AWS console launch a new instance with identical\nsettings to the existing\ninstance, and ensure that the newly created role is selected. Shutdown both the\nexisting instance and the new instance. Detach disks from both instances.\nAttach the existing instance disks to the new instance. Boot the new instance\nand you should have the same machine, but with the\nassociated role.\nNote: if your environment has dependencies on a dynamically assigned PRIVATE IP\n\naddress you can create an AMI from the existing instance, destroy the old one\nand then\nwhen launching from the AMI, manually assign the previous private IP address.\nNote: if your environment has dependencies on a dynamically assigned PUBLIC IP\naddress\nthere is not a way ensure the address is retained and assign an instance role.\nDependencies\non dynamically assigned public IP addresses are a bad practice and, if\npossible, you may\nwish to rebuild the instance with a new elastic IP address and make the\ninvestment to\nremediate affected systems while assigning the system to a role.\n"
      },
      "code": "control \"M-1.21\" do\n  title \"1.21 Ensure IAM instance roles are used for AWS resource access from\ninstances (Not Scored)\"\n  desc  \"AWS access from within AWS instances can be done by either encoding\nAWS keys into AWS API calls or by assigning the instance to a role which has an\nappropriate permissions policy for the required access. 'AWS Access' means\naccessing the APIs of AWS in order to access AWS resources or manage AWS\naccount resources. AWS IAM roles reduce the risks associated with sharing and\nrotating credentials that can be used outside of AWS itself. If credentials are\ncompromised, they can be used from outside of the the AWS account they give\naccess to. In contrast, in order to leverage role permissions an attacker would\nneed to gain and maintain access to a specific instance to use the privileges\nassociated with it. Additionally, if credentials are encoded into compiled\napplications or other hard to change mechanisms, then they are even more\nunlikely to be properly rotated due to service disruption risks. As time goes\non, credentials that cannot be rotated are more likely to be known by an\nincreasing number of individuals who no longer work for the organization owning\nthe credentials. \"\n  impact 0.5\n  tag \"ref\": \"1.\nhttp://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-roleec2.html\n2.\nhttp://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazonec2.html\n3. CIS CSC v6.0 #16.14 (someone please check the applicability of this for me)\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"1.21\"\n  tag \"cis_control\": [[\"16.14\"], \"6.1\"]\n  tag \"cis_level\": 2\n  tag \"nist\": [[\"SC-28\", 4]]\n  tag \"audit text\": \"Whether an Instance Is Associated With a Role\nFor instances that are known to perform AWS actions, ensure that they belong to\nan\ninstance role that has the necessary permissions: Login to AWS Console (with\nappropriate permissions to View Identity Access\nManagement Account Settings) Open the EC2 Dashboard and choose 'Instances'\nClick the EC2 instance that performs AWS actions, in the lower pane details\nfind\n'IAM Role' If the Role is blank, the instance is not assigned to one. If the\nRole is filled in, it does not mean the instance might not *also* have\ncredentials\nencoded on it for some activities.\nWhether an Instance Contains Embedded Credentials\nOn the instance that is known to perform AWS actions, audit all scripts and\nenvironment\nvariables to ensure that none of them contain AWS credentials.\nWhether an Instance Application Contains Embedded Credentials\nApplications that run on an instance may also have credentials embedded. This\nis a bad\npractice, but even worse if the source code is stored in a public code\nrepository such as\ngithub. When an application contains credentials can be determined by\neliminating allther sources of credentials and if the application can still\naccess AWS resources - it likely\ncontains embedded credentials. Another method is to examine all source code and\n\nconfiguration files of the application.\n\"\n  tag \"fix\": \"IAM roles can only be associated at the launch of an instance. To\nremediate an instance to\nadd it to a role you must create a new instance.\nIf the instance has no external dependencies on it's current private ip or\npublic addresses\nare elastic IPs: In AWS IAM create a new role. Assign a permissions policy if\nneeded permissions\nare already known. In the AWS console launch a new instance with identical\nsettings to the existing\ninstance, and ensure that the newly created role is selected. Shutdown both the\nexisting instance and the new instance. Detach disks from both instances.\nAttach the existing instance disks to the new instance. Boot the new instance\nand you should have the same machine, but with the\nassociated role.\nNote: if your environment has dependencies on a dynamically assigned PRIVATE IP\n\naddress you can create an AMI from the existing instance, destroy the old one\nand then\nwhen launching from the AMI, manually assign the previous private IP address.\nNote: if your environment has dependencies on a dynamically assigned PUBLIC IP\naddress\nthere is not a way ensure the address is retained and assign an instance role.\nDependencies\non dynamically assigned public IP addresses are a bad practice and, if\npossible, you may\nwish to rebuild the instance with a new elastic IP address and make the\ninvestment to\nremediate affected systems while assigning the system to a role.\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-1.21.rb",
        "line": 1
      },
      "id": "M-1.21"
    },
    {
      "title": "1.22 Ensure a support role has been created to manage incidents with\nAWS Support (Scored)",
      "desc": "AWS provides a support center that can be used for incident\nnotification and response, as well as technical support and customer services.\nCreate an IAM Role to allow authorized users to manage incidents with AWS\nSupport. By implementing least privilege for access control, an IAM Role will\nrequire an appropriate IAM Policy to allow Support Center Access in order to\nmanage Incidents with AWS Support.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1.\nhttp://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vsinline.html\n2. https://aws.amazon.com/premiumsupport/pricing/ 3.\nhttp://docs.aws.amazon.com/cli/latest/reference/iam/list-policies.html 4.\nhttp://docs.aws.amazon.com/cli/latest/reference/iam/attach-role-policy.html 5.\nhttp://docs.aws.amazon.com/cli/latest/reference/iam/list-entities-for-policy.html",
        "severity": "medium",
        "cis_id": "1.22",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Using the Amazon unified command line interface:List IAM\npolicies, filter for the 'AWSSupportAccess' managed policy, and note the\n'Arn' element value:aws iam list-policies --query 'Policies[?PolicyName ==\n'AWSSupportAccess']'Check if the 'AWSSupportAccess' is attached to any IAM\nuser, group or role:\naws iam list-entities-for-policy --policy-arn <iam_policy_arn>\n",
        "fix": "Using the Amazon unified command line interface:Create an IAM\nrole for managing incidents with AWS:\no Create a trust relationship policy document that allows <iam_user> to\nmanage AWS incidents, and save it locally as /tmp/TrustPolicy.json:\no\n{\n'Version': '2012-10-17',\n'Statement': [\n{\n'Effect': 'Allow',\n'Principal': {\n'AWS': '<iam_user>'\n},\n'Action': 'sts:AssumeRole'\n}\n]\n}o\no\nCreate the IAM role using the above trust policy:o\no\nAttach 'AWSSupportAccess' managed policy to the created IAM role:\naws iam create-role --role-name <aws_support_iam_role>\n--assume-rolepolicy-document file:///tmp/TrustPolicy.json\naws iam attach-role-policy --policy-arn <iam_policy_arn> --role-name\n<aws_support_iam_role>\n"
      },
      "code": "control \"M-1.22\" do\n  title \"1.22 Ensure a support role has been created to manage incidents with\nAWS Support (Scored)\"\n  desc  \"AWS provides a support center that can be used for incident\nnotification and response, as well as technical support and customer services.\nCreate an IAM Role to allow authorized users to manage incidents with AWS\nSupport. By implementing least privilege for access control, an IAM Role will\nrequire an appropriate IAM Policy to allow Support Center Access in order to\nmanage Incidents with AWS Support. \"\n  impact 0.5\n  tag \"ref\": \"1.\nhttp://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vsinline.html\n2. https://aws.amazon.com/premiumsupport/pricing/ 3.\nhttp://docs.aws.amazon.com/cli/latest/reference/iam/list-policies.html 4.\nhttp://docs.aws.amazon.com/cli/latest/reference/iam/attach-role-policy.html 5.\nhttp://docs.aws.amazon.com/cli/latest/reference/iam/list-entities-for-policy.html\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"1.22\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Using the Amazon unified command line interface:List IAM\npolicies, filter for the 'AWSSupportAccess' managed policy, and note the\n'Arn' element value:aws iam list-policies --query 'Policies[?PolicyName ==\n'AWSSupportAccess']'Check if the 'AWSSupportAccess' is attached to any IAM\nuser, group or role:\naws iam list-entities-for-policy --policy-arn <iam_policy_arn>\n\"\n  tag \"fix\": \"Using the Amazon unified command line interface:Create an IAM\nrole for managing incidents with AWS:\no Create a trust relationship policy document that allows <iam_user> to\nmanage AWS incidents, and save it locally as /tmp/TrustPolicy.json:\no\n{\n'Version': '2012-10-17',\n'Statement': [\n{\n'Effect': 'Allow',\n'Principal': {\n'AWS': '<iam_user>'\n},\n'Action': 'sts:AssumeRole'\n}\n]\n}o\no\nCreate the IAM role using the above trust policy:o\no\nAttach 'AWSSupportAccess' managed policy to the created IAM role:\naws iam create-role --role-name <aws_support_iam_role>\n--assume-rolepolicy-document file:///tmp/TrustPolicy.json\naws iam attach-role-policy --policy-arn <iam_policy_arn> --role-name\n<aws_support_iam_role>\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-1.22.rb",
        "line": 1
      },
      "id": "M-1.22"
    },
    {
      "title": "1.23 Do not setup access keys during initial user setup for all IAM\nusers that have a console password (Not Scored)",
      "desc": "AWS console defaults the checkbox for creating access keys to enabled.\nThis results in many access keys being generated unnecessarily. In addition to\nunnecessary credentials, it also generates unnecessary management work in\nauditing and rotating these keys. Requiring that additional steps be taken by\nthe user after their profile has been created will give a stronger indication\nof intent that access keys are [a] necessary for their work and [b] once the\naccess key is established on an account, that the keys may be in use somewhere\nin the organization. Note: Even if it is known the user will need access keys,\nrequire them to create the keys themselves or put in a support ticket to have\nthe created as a separate step from user creation.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "cis_id": "1.23",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Perform the following to determine if access keys are\nrotated as prescribed:\nLogin to the AWS Management Console\nClickServices\nClickIAM\nClick onA User\nCompare the user creation date to the key 1 creation date.\nFor any that match, the key was created during initial user setup.o\nKeys that were created at the same time as the user profile and do not have a\nlast used date should be deleted.\nVia the CLI Run the following command (OSX/Linux/UNIX) to generate a list of\nall IAM users\nalong with their access keys utilization:\naws iam generate-credential-report\naws iam get-credential-report --query 'Content' --output text | base64 -d | cut\n\n-d, -f1,4,9,11,14,16 The output of this command will produce a table similar to\nthe following:\nuser,password_enabled,access_key_1_active,access_key_1_last_used_date,access_ke\n\ny_2_active,access_key_2_last_used_date\nelise,false,true,2015-04-16T15:14:00+00:00,false,N/A\nbrandon,true,true,N/A,false,N/A\nrakesh,false,false,N/A,false,N/A\nhelene,false,true,2015-11-18T17:47:00+00:00,false,N/A\nparas,true,true,2016-08-28T12:04:00+00:00,true,2016-03-04T10:11:00+00:00\nanitha,true,true,2016-06-08T11:43:00+00:00,true,N/A For any user having\naccess_key_last_used_date set to N/A, ensure that access key\nis deleted.\n",
        "fix": "Perform the following to delete access keys that do not pass the\naudit:\nLogin to the AWS Management Console:\nClick Services\nClick IAM\nClick on Users\nClick on Security Credentials\nAs an Administrator\no Click on Delete for keys that were created at the same time as the user\nprofile but have not been used. As an IAM User\no Click on Delete for keys that were created at the same time as the user\nprofile but have not been used.\nVia CLI\naws iam delete-access-key"
      },
      "code": "control \"M-1.23\" do\n  title \"1.23 Do not setup access keys during initial user setup for all IAM\nusers that have a console password (Not Scored)\"\n  desc  \"AWS console defaults the checkbox for creating access keys to enabled.\nThis results in many access keys being generated unnecessarily. In addition to\nunnecessary credentials, it also generates unnecessary management work in\nauditing and rotating these keys. Requiring that additional steps be taken by\nthe user after their profile has been created will give a stronger indication\nof intent that access keys are [a] necessary for their work and [b] once the\naccess key is established on an account, that the keys may be in use somewhere\nin the organization. Note: Even if it is known the user will need access keys,\nrequire them to create the keys themselves or put in a support ticket to have\nthe created as a separate step from user creation. \"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"1.23\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Perform the following to determine if access keys are\nrotated as prescribed:\nLogin to the AWS Management Console\nClickServices\nClickIAM\nClick onA User\nCompare the user creation date to the key 1 creation date.\nFor any that match, the key was created during initial user setup.o\nKeys that were created at the same time as the user profile and do not have a\nlast used date should be deleted.\nVia the CLI Run the following command (OSX/Linux/UNIX) to generate a list of\nall IAM users\nalong with their access keys utilization:\naws iam generate-credential-report\naws iam get-credential-report --query 'Content' --output text | base64 -d | cut\n\n-d, -f1,4,9,11,14,16 The output of this command will produce a table similar to\nthe following:\nuser,password_enabled,access_key_1_active,access_key_1_last_used_date,access_ke\n\ny_2_active,access_key_2_last_used_date\nelise,false,true,2015-04-16T15:14:00+00:00,false,N/A\nbrandon,true,true,N/A,false,N/A\nrakesh,false,false,N/A,false,N/A\nhelene,false,true,2015-11-18T17:47:00+00:00,false,N/A\nparas,true,true,2016-08-28T12:04:00+00:00,true,2016-03-04T10:11:00+00:00\nanitha,true,true,2016-06-08T11:43:00+00:00,true,N/A For any user having\naccess_key_last_used_date set to N/A, ensure that access key\nis deleted.\n\"\n  tag \"fix\": \"Perform the following to delete access keys that do not pass the\naudit:\nLogin to the AWS Management Console:\nClick Services\nClick IAM\nClick on Users\nClick on Security Credentials\nAs an Administrator\no Click on Delete for keys that were created at the same time as the user\nprofile but have not been used. As an IAM User\no Click on Delete for keys that were created at the same time as the user\nprofile but have not been used.\nVia CLI\naws iam delete-access-key\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-1.23.rb",
        "line": 1
      },
      "id": "M-1.23"
    },
    {
      "title": "1.24 Ensure IAM policies that allow full '*:*' administrative\nprivileges are not created (Scored)",
      "desc": "IAM policies are the means by which privileges are granted to users,\ngroups, or roles. It is recommended and considered a standard security advice\nto grant least privilege—that is, granting only the permissions required to\nperform a task. Determine what users need to do and then craft policies for\nthem that let the users perform only those tasks, instead of allowing full\nadministrative privileges. It's more secure to start with a minimum set of\npermissions and grant additional permissions as necessary, rather than starting\nwith permissions that are too lenient and then trying to tighten them later.\nProviding full administrative privileges instead of restricting to the minimum\nset of permissions that the user is required to do exposes the resources to\npotentially unwanted actions. IAM policies that have a statement with 'Effect':\n'Allow' with 'Action': '*' over 'Resource': '*' should be removed.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1.\nhttp://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html 2.\nhttp://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vsinline.html\n3. CCE-78912-3 4.\nhttp://docs.aws.amazon.com/cli/latest/reference/iam/index.html#cli-aws-iam",
        "severity": "medium",
        "cis_id": "1.24",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Perform the following to determine what policies are\ncreated: Run the following to get a list of IAM policies:\naws iam list-policies --output text For each policy returned, run the following\ncommand to determine if any policies is\nallowing full administrative privileges on the account:\naws iam get-policy-version --policy-arn <policy_arn> --version <policy_version>\n\n--query 'PolicyVersion.Document.Statement[?Effect == 'Allow' &&\ncontains(Resource, '*') && contains (Action, '*')]' If the output of the\ncommand returns any policies, it's not compliant.\n",
        "fix": "Using the GUI, perform the following to detach the policy that\nhas full administrative\nprivileges: Sign in to the AWS Management Console and open the IAM console at\nhttps://console.aws.amazon.com/iam/. In the navigation pane, click Policies and\nthen search for the policy name found in\nthe audit step. Select the policy that needs to be deleted. In the policy\naction menu, select first Detach Select all Users, Groups, Roles that have this\npolicy attached Click Detach Policy In the policy action menu, select Detach\nUsing the CLI, perform the following to detach the policy that has full\nadministrative\nprivileges as found in the audit step: Lists all IAM users, groups, and roles\nthat the specified managed policy is attached to. aws iam\nlist-entities-for-policy --policy-arn <policy_arn> Detach the policy from all\nIAM Users: aws iam detach-user-policy --user-name <iam_user> --policy-arn\n<policy_arn> Detach the policy from all IAM Groups: aws iam detach-group-policy\n--group-name <iam_group> --policy-arn <policy_arn> Detach the policy from all\nIAM Roles: aws iam detach-role-policy --role-name <iam_role> --policy-arn\n<policy_arn>\n"
      },
      "code": "control \"M-1.24\" do\n  title \"1.24 Ensure IAM policies that allow full '*:*' administrative\nprivileges are not created (Scored)\"\n  desc  \"IAM policies are the means by which privileges are granted to users,\ngroups, or roles. It is recommended and considered a standard security advice\nto grant least privilege—that is, granting only the permissions required to\nperform a task. Determine what users need to do and then craft policies for\nthem that let the users perform only those tasks, instead of allowing full\nadministrative privileges. It's more secure to start with a minimum set of\npermissions and grant additional permissions as necessary, rather than starting\nwith permissions that are too lenient and then trying to tighten them later.\nProviding full administrative privileges instead of restricting to the minimum\nset of permissions that the user is required to do exposes the resources to\npotentially unwanted actions. IAM policies that have a statement with 'Effect':\n'Allow' with 'Action': '*' over 'Resource': '*' should be removed. \"\n  impact 0.5\n  tag \"ref\": \"1.\nhttp://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html 2.\nhttp://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vsinline.html\n3. CCE-78912-3 4.\nhttp://docs.aws.amazon.com/cli/latest/reference/iam/index.html#cli-aws-iam\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"1.24\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Perform the following to determine what policies are\ncreated: Run the following to get a list of IAM policies:\naws iam list-policies --output text For each policy returned, run the following\ncommand to determine if any policies is\nallowing full administrative privileges on the account:\naws iam get-policy-version --policy-arn <policy_arn> --version <policy_version>\n\n--query 'PolicyVersion.Document.Statement[?Effect == 'Allow' &&\ncontains(Resource, '*') && contains (Action, '*')]' If the output of the\ncommand returns any policies, it's not compliant.\n\"\n  tag \"fix\": \"Using the GUI, perform the following to detach the policy that\nhas full administrative\nprivileges: Sign in to the AWS Management Console and open the IAM console at\nhttps://console.aws.amazon.com/iam/. In the navigation pane, click Policies and\nthen search for the policy name found in\nthe audit step. Select the policy that needs to be deleted. In the policy\naction menu, select first Detach Select all Users, Groups, Roles that have this\npolicy attached Click Detach Policy In the policy action menu, select Detach\nUsing the CLI, perform the following to detach the policy that has full\nadministrative\nprivileges as found in the audit step: Lists all IAM users, groups, and roles\nthat the specified managed policy is attached to. aws iam\nlist-entities-for-policy --policy-arn <policy_arn> Detach the policy from all\nIAM Users: aws iam detach-user-policy --user-name <iam_user> --policy-arn\n<policy_arn> Detach the policy from all IAM Groups: aws iam detach-group-policy\n--group-name <iam_group> --policy-arn <policy_arn> Detach the policy from all\nIAM Roles: aws iam detach-role-policy --role-name <iam_role> --policy-arn\n<policy_arn>\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-1.24.rb",
        "line": 1
      },
      "id": "M-1.24"
    },
    {
      "title": "1.3 Ensure credentials unused for 90 days or greater are disabled\n(Scored)",
      "desc": "AWS IAM users can access AWS resources using different types of\ncredentials, such as passwords or access keys. It is recommended that all\ncredentials that have been unused in 90 or greater days be removed or\ndeactivated. Disabling or removing unnecessary credentials will reduce the\nwindow of opportunity for credentials associated with a compromised or\nabandoned account to be used.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-78900-8 2. CIS CSC v6.0 #16.6",
        "severity": "medium",
        "cis_id": "1.3",
        "cis_control": [
          [
            "16.6"
          ],
          "6.1"
        ],
        "cis_level": 1,
        "nist": [
          [
            "IA-4",
            4
          ]
        ],
        "audit text": "Perform the following to determine if unused credentials\nexist:\nLogin to the AWS Management Console\nClick Services\nClick IAM\nClick on Credential Report\nThis will download an .xls file which contains credential usage for all users\nwithin\nan AWS Account - open this file For each user having password_enabled set to\nTRUE, ensure password_last_used is\nless than 90 days ago. For each user having access_key_1_active or\naccess_key_2_active to TRUE,\nensure the corresponding access_key_n_last_used_date is less than 90 days ago.\n\nVia CLI Run the following commands:\naws iam generate-credential-report\naws iam get-credential-report --query 'Content' --output text | base64 -d | cut\n\n-d, -f1,9,10,11,14,15,16 For each user having password_enabled set to TRUE,\nensure password_last_used_date is less than 90 days ago. For each user having\nan access_key_1_active or access_key_2_active to TRUE,\nensure the corresponding access_key_n_last_used_date is less than 90 days ago.\n\n",
        "fix": "Perform the following to remove or deactivate credentials:\nLogin to the AWS Management Console:\nClick Services\nClick IAM\nClick on Users\nClick on Security Credentials\nAs an Administrator\no Click on Make Inactive for credentials that have not been used in 90 Days As\nan IAM User\no Click on Make Inactive or Delete for credentials which have not been used\nin 90 Days\n"
      },
      "code": "control \"M-1.3\" do\n  title \"1.3 Ensure credentials unused for 90 days or greater are disabled\n(Scored)\"\n  desc  \"AWS IAM users can access AWS resources using different types of\ncredentials, such as passwords or access keys. It is recommended that all\ncredentials that have been unused in 90 or greater days be removed or\ndeactivated. Disabling or removing unnecessary credentials will reduce the\nwindow of opportunity for credentials associated with a compromised or\nabandoned account to be used. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-78900-8 2. CIS CSC v6.0 #16.6\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"1.3\"\n  tag \"cis_control\": [[\"16.6\"], \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"nist\": [[\"IA-4\", 4]]\n  tag \"audit text\": \"Perform the following to determine if unused credentials\nexist:\nLogin to the AWS Management Console\nClick Services\nClick IAM\nClick on Credential Report\nThis will download an .xls file which contains credential usage for all users\nwithin\nan AWS Account - open this file For each user having password_enabled set to\nTRUE, ensure password_last_used is\nless than 90 days ago. For each user having access_key_1_active or\naccess_key_2_active to TRUE,\nensure the corresponding access_key_n_last_used_date is less than 90 days ago.\n\nVia CLI Run the following commands:\naws iam generate-credential-report\naws iam get-credential-report --query 'Content' --output text | base64 -d | cut\n\n-d, -f1,9,10,11,14,15,16 For each user having password_enabled set to TRUE,\nensure password_last_used_date is less than 90 days ago. For each user having\nan access_key_1_active or access_key_2_active to TRUE,\nensure the corresponding access_key_n_last_used_date is less than 90 days ago.\n\n\"\n  tag \"fix\": \"Perform the following to remove or deactivate credentials:\nLogin to the AWS Management Console:\nClick Services\nClick IAM\nClick on Users\nClick on Security Credentials\nAs an Administrator\no Click on Make Inactive for credentials that have not been used in 90 Days As\nan IAM User\no Click on Make Inactive or Delete for credentials which have not been used\nin 90 Days\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-1.3.rb",
        "line": 1
      },
      "id": "M-1.3"
    },
    {
      "title": "1.4 Ensure access keys are rotated every 90 days or less (Scored)",
      "desc": "Access keys consist of an access key ID and secret access key, which\nare used to sign programmatic requests that you make to AWS. AWS users need\ntheir own access keys to make programmatic calls to AWS from the AWS Command\nLine Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct\nHTTP calls using the APIs for individual AWS services. It is recommended that\nall access keys be regularly rotated. Rotating access keys will reduce the\nwindow of opportunity for an access key that is associated with a compromised\nor terminated account to be used. Access keys should be rotated to ensure that\ndata cannot be accessed with an old key which might have been lost, cracked, or\nstolen.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-78902-4",
        "severity": "medium",
        "cis_id": "1.4",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Perform the following to determine if access keys are\nrotated as prescribed:\nLogin to the AWS Management Console\nClick Services\nClick IAM\nClick on Credential Report\nThis will download an .xls file which contains Access Key usage for all IAM\nusers\nwithin an AWS Account - open this file Focus on the following columns (where x\n= 1 or 2)\naccess_key_X_active\naccess_key_X_last_rotated\naccess_key_X_last_used_date Ensure all active keys have been rotated within 90\ndays Ensure all active keys have been used since last rotation Keys not in-use\nsince last rotation should be disabled/deleted\nVia CLI\naws iam generate-credential-report\naws iam get-credential-report --query 'Content' --output text | base64 -d\n",
        "fix": "Perform the following to rotate access keys:\nLogin to the AWS Management Console:\nClick Services\nClick IAM\nClick on Users\nClick on Security Credentials\nAs an Administrator\no Click on Make Inactive for keys that have not been rotated in 90 Days As an\nIAM User\no Click on Make Inactive or Delete for keys which have not been rotated or\nused in 90 Days Click on Create Access Key Update programmatic call with new\nAccess Key credentials\nVia CLI\naws iam update-access-key\naws iam create-access-key\naws iam delete-access-key\n"
      },
      "code": "control \"M-1.4\" do\n  title \"1.4 Ensure access keys are rotated every 90 days or less (Scored)\"\n  desc  \"Access keys consist of an access key ID and secret access key, which\nare used to sign programmatic requests that you make to AWS. AWS users need\ntheir own access keys to make programmatic calls to AWS from the AWS Command\nLine Interface (AWS CLI), Tools for Windows PowerShell, the AWS SDKs, or direct\nHTTP calls using the APIs for individual AWS services. It is recommended that\nall access keys be regularly rotated. Rotating access keys will reduce the\nwindow of opportunity for an access key that is associated with a compromised\nor terminated account to be used. Access keys should be rotated to ensure that\ndata cannot be accessed with an old key which might have been lost, cracked, or\nstolen. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-78902-4\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"1.4\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Perform the following to determine if access keys are\nrotated as prescribed:\nLogin to the AWS Management Console\nClick Services\nClick IAM\nClick on Credential Report\nThis will download an .xls file which contains Access Key usage for all IAM\nusers\nwithin an AWS Account - open this file Focus on the following columns (where x\n= 1 or 2)\naccess_key_X_active\naccess_key_X_last_rotated\naccess_key_X_last_used_date Ensure all active keys have been rotated within 90\ndays Ensure all active keys have been used since last rotation Keys not in-use\nsince last rotation should be disabled/deleted\nVia CLI\naws iam generate-credential-report\naws iam get-credential-report --query 'Content' --output text | base64 -d\n\"\n  tag \"fix\": \"Perform the following to rotate access keys:\nLogin to the AWS Management Console:\nClick Services\nClick IAM\nClick on Users\nClick on Security Credentials\nAs an Administrator\no Click on Make Inactive for keys that have not been rotated in 90 Days As an\nIAM User\no Click on Make Inactive or Delete for keys which have not been rotated or\nused in 90 Days Click on Create Access Key Update programmatic call with new\nAccess Key credentials\nVia CLI\naws iam update-access-key\naws iam create-access-key\naws iam delete-access-key\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-1.4.rb",
        "line": 1
      },
      "id": "M-1.4"
    },
    {
      "title": "1.5 Ensure IAM password policy requires at least one uppercase letter\n(Scored)",
      "desc": "Password policies are, in part, used to enforce password complexity\nrequirements. IAM password policies can be used to ensure password are\ncomprised of different character sets. It is recommended that the password\npolicy require at least one uppercase letter. Setting a password complexity\npolicy increases account resiliency against brute force login attempts.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-78903-2",
        "severity": "medium",
        "cis_id": "1.5",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Perform the following to ensure the password policy is\nconfigured as prescribed:\nVia AWS Console Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Ensure 'Requires at least one uppercase\nletter' is checked under 'Password Policy'\nVia CLI\naws iam get-account-password-policy\nEnsure the output of the above command includes 'RequireUppercaseCharacters':\ntrue\n",
        "fix": "Perform the following to set the password policy as prescribed:\nVia AWS Console Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Check 'Requires at least one uppercase\nletter' Click 'Apply password policy'\nVia CLI\naws iam update-account-password-policy --require-uppercase-characters\nNote: All commands starting with 'aws iam update-account-password-policy' can\nbe\ncombined into a single command.\n"
      },
      "code": "control \"M-1.5\" do\n  title \"1.5 Ensure IAM password policy requires at least one uppercase letter\n(Scored)\"\n  desc  \"Password policies are, in part, used to enforce password complexity\nrequirements. IAM password policies can be used to ensure password are\ncomprised of different character sets. It is recommended that the password\npolicy require at least one uppercase letter. Setting a password complexity\npolicy increases account resiliency against brute force login attempts. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-78903-2\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"1.5\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Perform the following to ensure the password policy is\nconfigured as prescribed:\nVia AWS Console Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Ensure 'Requires at least one uppercase\nletter' is checked under 'Password Policy'\nVia CLI\naws iam get-account-password-policy\nEnsure the output of the above command includes 'RequireUppercaseCharacters':\ntrue\n\"\n  tag \"fix\": \"Perform the following to set the password policy as prescribed:\nVia AWS Console Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Check 'Requires at least one uppercase\nletter' Click 'Apply password policy'\nVia CLI\naws iam update-account-password-policy --require-uppercase-characters\nNote: All commands starting with 'aws iam update-account-password-policy' can\nbe\ncombined into a single command.\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-1.5.rb",
        "line": 1
      },
      "id": "M-1.5"
    },
    {
      "title": "1.6 Ensure IAM password policy require at least one lowercase letter\n(Scored)",
      "desc": "Password policies are, in part, used to enforce password complexity\nrequirements. IAM password policies can be used to ensure password are\ncomprised of different character sets. It is recommended that the password\npolicy require at least one lowercase letter. Setting a password complexity\npolicy increases account resiliency against brute force login attempts.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-78904-0",
        "severity": "medium",
        "cis_id": "1.6",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Perform the following to ensure the password policy is\nconfigured as prescribed:\nVia the AWS Console Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Ensure 'Requires at least one lowercase\nletter' is checked under 'Password Policy'\nVia CLI\naws iam get-account-password-policy\nEnsure the output of the above command includes 'RequireLowercaseCharacters':\ntrue\n",
        "fix": "Perform the following to set the password policy as prescribed:\nVia the AWS Console Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Check 'Requires at least one lowercase\nletter' Click 'Apply password policy'\nVia CLI\naws iam update-account-password-policy --require-lowercase-characters\nNote: All commands starting with 'aws iam update-account-password-policy' can\nbe\ncombined into a single command.\n"
      },
      "code": "control \"M-1.6\" do\n  title \"1.6 Ensure IAM password policy require at least one lowercase letter\n(Scored)\"\n  desc  \"Password policies are, in part, used to enforce password complexity\nrequirements. IAM password policies can be used to ensure password are\ncomprised of different character sets. It is recommended that the password\npolicy require at least one lowercase letter. Setting a password complexity\npolicy increases account resiliency against brute force login attempts. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-78904-0\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"1.6\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Perform the following to ensure the password policy is\nconfigured as prescribed:\nVia the AWS Console Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Ensure 'Requires at least one lowercase\nletter' is checked under 'Password Policy'\nVia CLI\naws iam get-account-password-policy\nEnsure the output of the above command includes 'RequireLowercaseCharacters':\ntrue\n\"\n  tag \"fix\": \"Perform the following to set the password policy as prescribed:\nVia the AWS Console Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Check 'Requires at least one lowercase\nletter' Click 'Apply password policy'\nVia CLI\naws iam update-account-password-policy --require-lowercase-characters\nNote: All commands starting with 'aws iam update-account-password-policy' can\nbe\ncombined into a single command.\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-1.6.rb",
        "line": 1
      },
      "id": "M-1.6"
    },
    {
      "title": "1.7 Ensure IAM password policy require at least one symbol (Scored)",
      "desc": "Password policies are, in part, used to enforce password complexity\nrequirements. IAM password policies can be used to ensure password are\ncomprised of different character sets. It is recommended that the password\npolicy require at least one symbol. Setting a password complexity policy\nincreases account resiliency against brute force login attempts.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-78905-7",
        "severity": "medium",
        "cis_id": "1.7",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Perform the following to ensure the password policy is\nconfigured as prescribed:\nVia AWS Console Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Ensure 'Require at least one non-alphanumeric\ncharacter' is checked under\n'Password Policy'\nVia CLI\naws iam get-account-password-policy\nEnsure the output of the above command includes 'RequireSymbols': true\n",
        "fix": "Perform the following to set the password policy as prescribed:\nVia AWS Console Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings)\nGo to IAM Service on the AWS Console\nClick on Account Settings on the Left Pane\nCheck 'Require at least one non-alphanumeric character'\nClick 'Apply password policy'\nVia CLI\naws iam update-account-password-policy --require-symbols\nNote: All commands starting with 'aws iam update-account-password-policy' can\nbe\ncombined into a single command.\n"
      },
      "code": "control \"M-1.7\" do\n  title \"1.7 Ensure IAM password policy require at least one symbol (Scored)\"\n  desc  \"Password policies are, in part, used to enforce password complexity\nrequirements. IAM password policies can be used to ensure password are\ncomprised of different character sets. It is recommended that the password\npolicy require at least one symbol. Setting a password complexity policy\nincreases account resiliency against brute force login attempts. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-78905-7\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"1.7\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Perform the following to ensure the password policy is\nconfigured as prescribed:\nVia AWS Console Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Ensure 'Require at least one non-alphanumeric\ncharacter' is checked under\n'Password Policy'\nVia CLI\naws iam get-account-password-policy\nEnsure the output of the above command includes 'RequireSymbols': true\n\"\n  tag \"fix\": \"Perform the following to set the password policy as prescribed:\nVia AWS Console Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings)\nGo to IAM Service on the AWS Console\nClick on Account Settings on the Left Pane\nCheck 'Require at least one non-alphanumeric character'\nClick 'Apply password policy'\nVia CLI\naws iam update-account-password-policy --require-symbols\nNote: All commands starting with 'aws iam update-account-password-policy' can\nbe\ncombined into a single command.\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-1.7.rb",
        "line": 1
      },
      "id": "M-1.7"
    },
    {
      "title": "1.8 Ensure IAM password policy require at least one number (Scored)",
      "desc": "Password policies are, in part, used to enforce password complexity\nrequirements. IAM password policies can be used to ensure password are\ncomprised of different character sets. It is recommended that the password\npolicy require at least one number. Setting a password complexity policy\nincreases account resiliency against brute force login attempts.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-78906-5",
        "severity": "medium",
        "cis_id": "1.8",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Perform the following to ensure the password policy is\nconfigured as prescribed:\nVia AWS Console Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Ensure 'Require at least one number ' is\nchecked under 'Password Policy'\nVia CLI\naws iam get-account-password-policy\nEnsure the output of the above command includes 'RequireNumbers': true\n",
        "fix": "Perform the following to set the password policy as prescribed:\nVia AWS Console Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Check 'Require at least one number' Click\n'Apply password policy'\nVia CLI\naws iam update-account-password-policy --require-numbers\nNote: All commands starting with 'aws iam update-account-password-policy' can\nbe\ncombined into a single command.\n"
      },
      "code": "control \"M-1.8\" do\n  title \"1.8 Ensure IAM password policy require at least one number (Scored)\"\n  desc  \"Password policies are, in part, used to enforce password complexity\nrequirements. IAM password policies can be used to ensure password are\ncomprised of different character sets. It is recommended that the password\npolicy require at least one number. Setting a password complexity policy\nincreases account resiliency against brute force login attempts. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-78906-5\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"1.8\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Perform the following to ensure the password policy is\nconfigured as prescribed:\nVia AWS Console Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Ensure 'Require at least one number ' is\nchecked under 'Password Policy'\nVia CLI\naws iam get-account-password-policy\nEnsure the output of the above command includes 'RequireNumbers': true\n\"\n  tag \"fix\": \"Perform the following to set the password policy as prescribed:\nVia AWS Console Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Check 'Require at least one number' Click\n'Apply password policy'\nVia CLI\naws iam update-account-password-policy --require-numbers\nNote: All commands starting with 'aws iam update-account-password-policy' can\nbe\ncombined into a single command.\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-1.8.rb",
        "line": 1
      },
      "id": "M-1.8"
    },
    {
      "title": "1.9 Ensure IAM password policy requires minimum length of 14 or\ngreater (Scored)",
      "desc": "Password policies are, in part, used to enforce password complexity\nrequirements. IAM password policies can be used to ensure password are at least\na given length. It is recommended that the password policy require a minimum\npassword length 14. Setting a password complexity policy increases account\nresiliency against brute force login attempts.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-78907-3 2. CIS CSC v6.0 #5.7, #16.12",
        "severity": "medium",
        "cis_id": "1.9",
        "cis_control": [
          [
            "5.7",
            "16.12"
          ],
          "6.1"
        ],
        "cis_level": 1,
        "nist": [
          [
            "IA-5 (1)",
            4
          ],
          [
            "IA-2",
            4
          ]
        ],
        "audit text": "Perform the following to ensure the password policy is\nconfigured as prescribed:\nVia AWS Console Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Ensure 'Minimum password length' is set to 14\nor greater.\nVia CLI\naws iam get-account-password-policy\nEnsure the output of the above command includes 'MinimumPasswordLength': 14 (or\n\nhigher)\n",
        "fix": "Perform the following to set the password policy as prescribed:\nVia AWS Console Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Set 'Minimum password length' to 14 or\ngreater. Click 'Apply password policy'\nVia CLI\naws iam update-account-password-policy --minimum-password-length 14\nNote: All commands starting with 'aws iam update-account-password-policy' can\nbe\ncombined into a single command.\n"
      },
      "code": "control \"M-1.9\" do\n  title \"1.9 Ensure IAM password policy requires minimum length of 14 or\ngreater (Scored)\"\n  desc  \"Password policies are, in part, used to enforce password complexity\nrequirements. IAM password policies can be used to ensure password are at least\na given length. It is recommended that the password policy require a minimum\npassword length 14. Setting a password complexity policy increases account\nresiliency against brute force login attempts. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-78907-3 2. CIS CSC v6.0 #5.7, #16.12\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"1.9\"\n  tag \"cis_control\": [[\"5.7\", \"16.12\"], \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"nist\": [[\"IA-5 (1)\", 4], [\"IA-2\", 4]]\n  tag \"audit text\": \"Perform the following to ensure the password policy is\nconfigured as prescribed:\nVia AWS Console Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Ensure 'Minimum password length' is set to 14\nor greater.\nVia CLI\naws iam get-account-password-policy\nEnsure the output of the above command includes 'MinimumPasswordLength': 14 (or\n\nhigher)\n\"\n  tag \"fix\": \"Perform the following to set the password policy as prescribed:\nVia AWS Console Login to AWS Console (with appropriate permissions to View\nIdentity Access\nManagement Account Settings) Go to IAM Service on the AWS Console Click on\nAccount Settings on the Left Pane Set 'Minimum password length' to 14 or\ngreater. Click 'Apply password policy'\nVia CLI\naws iam update-account-password-policy --minimum-password-length 14\nNote: All commands starting with 'aws iam update-account-password-policy' can\nbe\ncombined into a single command.\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-1.9.rb",
        "line": 1
      },
      "id": "M-1.9"
    },
    {
      "title": "2.1 Ensure CloudTrail is enabled in all regions (Scored)",
      "desc": "AWS CloudTrail is a web service that records AWS API calls for your\naccount and delivers log files to you. The recorded information includes the\nidentity of the API caller, the time of the API call, the source IP address of\nthe API caller, the request parameters, and the response elements returned by\nthe AWS service. CloudTrail provides a history of AWS API calls for an account,\nincluding API calls made via the Management Console, SDKs, command line tools,\nand higher-level AWS services (such as CloudFormation). The AWS API call\nhistory produced by CloudTrail enables security analysis, resource change\ntracking, and compliance auditing. Additionally, ensuring that a multi-regions\ntrail exists will ensure that unexpected activity occurring in otherwise unused\nregions is detected.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-78913-1 2. CIS CSC v6.0 #14.6",
        "severity": "medium",
        "cis_id": "2.1",
        "cis_control": [
          [
            "14.6"
          ],
          "6.1"
        ],
        "cis_level": 1,
        "nist": [
          [
            "AU-2",
            4
          ]
        ],
        "audit text": "Perform the following to determine if CloudTrail is\nenabled for all regions:\nVia the management Console Sign in to the AWS Management Console and open the\nCloudTrail console\nat https://console.aws.amazon.com/cloudtrail Click on Trails on the left\nnavigation pane You will be presented with a list of trails across all regions\nEnsure at least one Trail has All specified in the Region column Click on a\ntrail via the link in the Name column Ensure Logging is set to ON Ensure Apply\ntrail to all regions is set to Yes\nVia CLI\naws cloudtrail describe-trails\nEnsure IsMultiRegionTrail is set to true\n",
        "fix": "Perform the following to enable global CloudTrail logging:\nVia the management Console Sign in to the AWS Management Console and open the\nIAM console\nat https://console.aws.amazon.com/cloudtrail Click on Trails on the left\nnavigation pane Click Get Started Now, if presented\no Click Add new trail\no Enter a trail name in the Trail name box\no Set the Apply trail to all regions option to Yes\no Specify an S3 bucket name in the S3 bucket box\no Click Create If 1 or more trails already exist, select the target trail to\nenable for global logging Click the edit icon (pencil) next to Apply trail to\nall regions Click Yes Click Save\nVia CLI\naws cloudtrail create-trail --name <trail_name> --bucket-name\n<s3_bucket_for_cloudtrail> -is-multi-region-trail\naws cloudtrail update-trail --name <trail_name> --is-multi-region-trail\n",
        "Default Value": "Not Enabled\n"
      },
      "code": "control \"M-2.1\" do\n  title \"2.1 Ensure CloudTrail is enabled in all regions (Scored)\"\n  desc  \"AWS CloudTrail is a web service that records AWS API calls for your\naccount and delivers log files to you. The recorded information includes the\nidentity of the API caller, the time of the API call, the source IP address of\nthe API caller, the request parameters, and the response elements returned by\nthe AWS service. CloudTrail provides a history of AWS API calls for an account,\nincluding API calls made via the Management Console, SDKs, command line tools,\nand higher-level AWS services (such as CloudFormation). The AWS API call\nhistory produced by CloudTrail enables security analysis, resource change\ntracking, and compliance auditing. Additionally, ensuring that a multi-regions\ntrail exists will ensure that unexpected activity occurring in otherwise unused\nregions is detected. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-78913-1 2. CIS CSC v6.0 #14.6\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"2.1\"\n  tag \"cis_control\": [[\"14.6\"], \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"nist\": [[\"AU-2\", 4]]\n  tag \"audit text\": \"Perform the following to determine if CloudTrail is\nenabled for all regions:\nVia the management Console Sign in to the AWS Management Console and open the\nCloudTrail console\nat https://console.aws.amazon.com/cloudtrail Click on Trails on the left\nnavigation pane You will be presented with a list of trails across all regions\nEnsure at least one Trail has All specified in the Region column Click on a\ntrail via the link in the Name column Ensure Logging is set to ON Ensure Apply\ntrail to all regions is set to Yes\nVia CLI\naws cloudtrail describe-trails\nEnsure IsMultiRegionTrail is set to true\n\"\n  tag \"fix\": \"Perform the following to enable global CloudTrail logging:\nVia the management Console Sign in to the AWS Management Console and open the\nIAM console\nat https://console.aws.amazon.com/cloudtrail Click on Trails on the left\nnavigation pane Click Get Started Now, if presented\no Click Add new trail\no Enter a trail name in the Trail name box\no Set the Apply trail to all regions option to Yes\no Specify an S3 bucket name in the S3 bucket box\no Click Create If 1 or more trails already exist, select the target trail to\nenable for global logging Click the edit icon (pencil) next to Apply trail to\nall regions Click Yes Click Save\nVia CLI\naws cloudtrail create-trail --name <trail_name> --bucket-name\n<s3_bucket_for_cloudtrail> -is-multi-region-trail\naws cloudtrail update-trail --name <trail_name> --is-multi-region-trail\n\"\n  tag \"Default Value\": \"Not Enabled\\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-2.1.rb",
        "line": 1
      },
      "id": "M-2.1"
    },
    {
      "title": "2.2 Ensure CloudTrail log file validation is enabled (Scored)",
      "desc": "CloudTrail log file validation creates a digitally signed digest file\ncontaining a hash of each log that CloudTrail writes to S3. These digest files\ncan be used to determine whether a log file was changed, deleted, or unchanged\nafter CloudTrail delivered the log. It is recommended that file validation be\nenabled on all CloudTrails. Enabling log file validation will provide\nadditional integrity checking of CloudTrail logs.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1.\nhttp://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-log-filevalidation-enabling.html\n2. CCE-78914-9 3. CIS CSC v6.0 #6.3",
        "severity": "medium",
        "cis_id": "2.2",
        "cis_control": [
          [
            "6.3"
          ],
          "6.1"
        ],
        "cis_level": 2,
        "nist": [
          [
            "AU-4",
            4
          ]
        ],
        "audit text": "Perform the following on each trail to determine if log\nfile validation is enabled:\nVia the management Console Sign in to the AWS Management Console and open the\nIAM console\nat https://console.aws.amazon.com/cloudtrail Click on Trails on the left\nnavigation pane You will be presented with a list of trails across all regions\nEnsure at least one Trail has All specified in the Region column Click on a\ntrail via the link in the Name column Under the S3 section, ensure Enable log\nfile validation is set to Yes\nVia CLI\naws cloudtrail describe-trails\nEnsure LogFileValidationEnabled is set to true for each trail.\n",
        "fix": "Perform the following to enable log file validation on a given\ntrail:\nVia the management Console Sign in to the AWS Management Console and open the\nIAM console\nat https://console.aws.amazon.com/cloudtrail Click on Trails on the left\nnavigation pane\nClick on target trail\nWithin the S3 section click on the edit icon (pencil)\nClick Advanced\nClick on the Yes radio button in section Enable log file validation\nClick Save\nVia CLI\naws cloudtrail update-trail --name <trail_name> --enable-log-file-validation\nNote that periodic validation of logs using these digests can be performed by\nrunning the\nfollowing command:\naws cloudtrail validate-logs --trail-arn <trail_arn> --start-time <start_time>\n--endtime <end_time>\n",
        "Default Value": "Not Enabled\n"
      },
      "code": "control \"M-2.2\" do\n  title \"2.2 Ensure CloudTrail log file validation is enabled (Scored)\"\n  desc  \"CloudTrail log file validation creates a digitally signed digest file\ncontaining a hash of each log that CloudTrail writes to S3. These digest files\ncan be used to determine whether a log file was changed, deleted, or unchanged\nafter CloudTrail delivered the log. It is recommended that file validation be\nenabled on all CloudTrails. Enabling log file validation will provide\nadditional integrity checking of CloudTrail logs. \"\n  impact 0.5\n  tag \"ref\": \"1.\nhttp://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-log-filevalidation-enabling.html\n2. CCE-78914-9 3. CIS CSC v6.0 #6.3\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"2.2\"\n  tag \"cis_control\": [[\"6.3\"], \"6.1\"]\n  tag \"cis_level\": 2\n  tag \"nist\": [[\"AU-4\", 4]]\n  tag \"audit text\": \"Perform the following on each trail to determine if log\nfile validation is enabled:\nVia the management Console Sign in to the AWS Management Console and open the\nIAM console\nat https://console.aws.amazon.com/cloudtrail Click on Trails on the left\nnavigation pane You will be presented with a list of trails across all regions\nEnsure at least one Trail has All specified in the Region column Click on a\ntrail via the link in the Name column Under the S3 section, ensure Enable log\nfile validation is set to Yes\nVia CLI\naws cloudtrail describe-trails\nEnsure LogFileValidationEnabled is set to true for each trail.\n\"\n  tag \"fix\": \"Perform the following to enable log file validation on a given\ntrail:\nVia the management Console Sign in to the AWS Management Console and open the\nIAM console\nat https://console.aws.amazon.com/cloudtrail Click on Trails on the left\nnavigation pane\nClick on target trail\nWithin the S3 section click on the edit icon (pencil)\nClick Advanced\nClick on the Yes radio button in section Enable log file validation\nClick Save\nVia CLI\naws cloudtrail update-trail --name <trail_name> --enable-log-file-validation\nNote that periodic validation of logs using these digests can be performed by\nrunning the\nfollowing command:\naws cloudtrail validate-logs --trail-arn <trail_arn> --start-time <start_time>\n--endtime <end_time>\n\"\n  tag \"Default Value\": \"Not Enabled\\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-2.2.rb",
        "line": 1
      },
      "id": "M-2.2"
    },
    {
      "title": "2.3 Ensure the S3 bucket CloudTrail logs to is not publicly accessible\n(Scored)",
      "desc": "CloudTrail logs a record of every API call made in your AWS account.\nThese logs file are stored in an S3 bucket. It is recommended that the bucket\npolicy or access control list (ACL) applied to the S3 bucket that CloudTrail\nlogs to prevents public access to the CloudTrail logs. Allowing public access\nto CloudTrail log content may aid an adversary in identifying weaknesses in the\naffected account's use or configuration.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-78915-6",
        "severity": "medium",
        "cis_id": "2.3",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Perform the following to determine if any public access is\ngranted to an S3 bucket via an\nACL or S3 bucket policy:\nVia the Management Console Go to the Amazon CloudTrail console\nat https://console.aws.amazon.com/cloudtrail/home In the API activity history\npane on the left, click Trails In the Trails pane, note the bucket names in the\nS3 bucket column Go to Amazon S3 console at\nhttps://console.aws.amazon.com/s3/home For each bucket noted in step 3,\nright-click on the bucket and click Properties In the Properties pane, click\nthe Permissions tab. The tab shows a list of grants, one row per grant, in the\nbucket ACL. Each row\nidentifies the grantee and the permissions granted. Ensure no rows exists that\nhave the Grantee set to Everyone or the Grantee set to\nAny Authenticated User. If the Edit bucket policy button is present, click it\nto review the bucket policy.\n10. Ensure the policy does not contain a Statement having an Effect set to\nAllow and\na Principal set to *.\nVia CLI: Get the name of the S3 bucket that CloudTrail is logging to:\naws cloudtrail describe-trails --query 'trailList[*].S3BucketName' Ensure the\nAllUsers principal is not granted privileges to that <bucket>:\naws s3api get-bucket-acl --bucket <s3_bucket_for_cloudtrail> --query\n'Grants[?Grantee.URI==`http://acs.amazonaws.com/groups/global/AllUsers`]'\nEnsure the AuthenticatedUsersprincipal is not granted privileges to that\n<bucket>:\naws s3api get-bucket-acl --bucket <s3_bucket_for_cloudtrail> --query\n'Grants[?Grantee.URI==`http://acs.amazonaws.com/groups/global/Authenticated\nUsers`]' Get the S3 Bucket Policy\naws s3api get-bucket-policy --bucket <s3_bucket_for_cloudtrail> Ensure the\npolicy does not contain a Statement having an Effect set to Allow and a\nPrincipal set to *.\n",
        "fix": "Perform the following to remove any public access that has been\ngranted to the bucket via\nan ACL or S3 bucket policy:\nGo to Amazon S3 console at https://console.aws.amazon.com/s3/home\nRight-click on the bucket and click Properties\nIn the Properties pane, click the Permissions tab.\nThe tab shows a list of grants, one row per grant, in the bucket ACL. Each row\n\nidentifies the grantee and the permissions granted.\nSelect the row that grants permission to Everyone or Any Authenticated User\nUncheck all the permissions granted to Everyone or Any Authenticated\nUser (click x to delete the row).\nClick Save to save the ACL.\nIf the Edit bucket policy button is present, click it.\nRemove any Statement having an Effect set to Allow and a Principal set to *.\n",
        "Default Value": "By default, S3 buckets are not publicly accessible\n"
      },
      "code": "control \"M-2.3\" do\n  title \"2.3 Ensure the S3 bucket CloudTrail logs to is not publicly accessible\n(Scored)\"\n  desc  \"CloudTrail logs a record of every API call made in your AWS account.\nThese logs file are stored in an S3 bucket. It is recommended that the bucket\npolicy or access control list (ACL) applied to the S3 bucket that CloudTrail\nlogs to prevents public access to the CloudTrail logs. Allowing public access\nto CloudTrail log content may aid an adversary in identifying weaknesses in the\naffected account's use or configuration. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-78915-6\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"2.3\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Perform the following to determine if any public access is\ngranted to an S3 bucket via an\nACL or S3 bucket policy:\nVia the Management Console Go to the Amazon CloudTrail console\nat https://console.aws.amazon.com/cloudtrail/home In the API activity history\npane on the left, click Trails In the Trails pane, note the bucket names in the\nS3 bucket column Go to Amazon S3 console at\nhttps://console.aws.amazon.com/s3/home For each bucket noted in step 3,\nright-click on the bucket and click Properties In the Properties pane, click\nthe Permissions tab. The tab shows a list of grants, one row per grant, in the\nbucket ACL. Each row\nidentifies the grantee and the permissions granted. Ensure no rows exists that\nhave the Grantee set to Everyone or the Grantee set to\nAny Authenticated User. If the Edit bucket policy button is present, click it\nto review the bucket policy.\n10. Ensure the policy does not contain a Statement having an Effect set to\nAllow and\na Principal set to *.\nVia CLI: Get the name of the S3 bucket that CloudTrail is logging to:\naws cloudtrail describe-trails --query 'trailList[*].S3BucketName' Ensure the\nAllUsers principal is not granted privileges to that <bucket>:\naws s3api get-bucket-acl --bucket <s3_bucket_for_cloudtrail> --query\n'Grants[?Grantee.URI==`http://acs.amazonaws.com/groups/global/AllUsers`]'\nEnsure the AuthenticatedUsersprincipal is not granted privileges to that\n<bucket>:\naws s3api get-bucket-acl --bucket <s3_bucket_for_cloudtrail> --query\n'Grants[?Grantee.URI==`http://acs.amazonaws.com/groups/global/Authenticated\nUsers`]' Get the S3 Bucket Policy\naws s3api get-bucket-policy --bucket <s3_bucket_for_cloudtrail> Ensure the\npolicy does not contain a Statement having an Effect set to Allow and a\nPrincipal set to *.\n\"\n  tag \"fix\": \"Perform the following to remove any public access that has been\ngranted to the bucket via\nan ACL or S3 bucket policy:\nGo to Amazon S3 console at https://console.aws.amazon.com/s3/home\nRight-click on the bucket and click Properties\nIn the Properties pane, click the Permissions tab.\nThe tab shows a list of grants, one row per grant, in the bucket ACL. Each row\n\nidentifies the grantee and the permissions granted.\nSelect the row that grants permission to Everyone or Any Authenticated User\nUncheck all the permissions granted to Everyone or Any Authenticated\nUser (click x to delete the row).\nClick Save to save the ACL.\nIf the Edit bucket policy button is present, click it.\nRemove any Statement having an Effect set to Allow and a Principal set to *.\n\"\n  tag \"Default Value\": \"By default, S3 buckets are not publicly accessible\\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-2.3.rb",
        "line": 1
      },
      "id": "M-2.3"
    },
    {
      "title": "2.4 Ensure CloudTrail trails are integrated with CloudWatch Logs\n(Scored)",
      "desc": "AWS CloudTrail is a web service that records AWS API calls made in a\ngiven AWS account. The recorded information includes the identity of the API\ncaller, the time of the API call, the source IP address of the API caller, the\nrequest parameters, and the response elements returned by the AWS service.\nCloudTrail uses Amazon S3 for log file storage and delivery, so log files are\nstored durably. In addition to capturing CloudTrail logs within a specified S3\nbucket for long term analysis, realtime analysis can be performed by\nconfiguring CloudTrail to send logs to CloudWatch Logs. For a trail that is\nenabled in all regions in an account, CloudTrail sends log files from all those\nregions to a CloudWatch Logs log group. It is recommended that CloudTrail logs\nbe sent to CloudWatch Logs. Note: The intent of this recommendation is to\nensure AWS account activity is being captured, monitored, and appropriately\nalarmed on. CloudWatch Logs is a native way to accomplish this using AWS\nservices but does not preclude the use of an alternate solution. Sending\nCloudTrail logs to CloudWatch Logs will facilitate real-time and historic\nactivity logging based on user, API, resource, and IP address, and provides\nopportunity to establish alarms and notifications for anomalous or sensitivity\naccount activity.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. https://aws.amazon.com/cloudtrail/ 2. CCE-78916-4 3. CIS CSC\nv6.0 #6.6, #14.6",
        "severity": "medium",
        "cis_id": "2.4",
        "cis_control": [
          [
            "6.6",
            "14.6"
          ],
          "6.1"
        ],
        "cis_level": 1,
        "nist": [
          [
            "SI-4 (2)",
            4
          ],
          [
            "AU-2",
            4
          ]
        ],
        "audit text": "Perform the following to ensure CloudTrail is configured\nas prescribed:\nVia the AWS management Console Sign in to the AWS Management Console and open\nthe CloudTrail console\nat https://console.aws.amazon.com/cloudtrail/ Under All Buckets, click on the\ntarget bucket you wish to evaluate Click Properties on the top right of the\nconsole Click Trails in the left menu Ensure a CloudWatch Logs log group is\nconfigured and has a recent (~one dayld) Last log file delivered timestamp.\nVia CLI Run the following command to get a listing of existing trails:\naws cloudtrail describe-trails Ensure CloudWatchLogsLogGroupArn is not empty\nand note the value of the Name\nproperty. Using the noted value of the Name property, run the following\ncommand:\naws cloudtrail get-trail-status --name <trail_name> Ensure the\nLatestcloudwatchLogdDeliveryTime property is set to a recent (~one\nday old) timestamp.\n",
        "fix": "Perform the following to establish the prescribed state:\nVia the AWS management Console Sign in to the AWS Management Console and open\nthe CloudTrail console\nat https://console.aws.amazon.com/cloudtrail/ Under All Buckets, click on the\ntarget bucket you wish to evaluate Click Properties on the top right of the\nconsole Click Trails in the left menu Click on each trail where no CloudWatch\nLogs are defined Go to the CloudWatch Logs section and click on Configure\nDefine a new or select an existing log group Click on Continue Configure IAM\nRole which will deliver CloudTrail events to CloudWatch Logs Create/Select an\nIAM Role and Policy Name Click Allow to continue\nVia CLI\naws cloudtrail update-trail --name <trail_name> --cloudwatch-logs-log-group-arn\n\n<cloudtrail_log_group_arn> --cloudwatch-logs-role-arn\n<cloudtrail_cloudwatchLogs_role_arn>\n"
      },
      "code": "control \"M-2.4\" do\n  title \"2.4 Ensure CloudTrail trails are integrated with CloudWatch Logs\n(Scored)\"\n  desc  \"AWS CloudTrail is a web service that records AWS API calls made in a\ngiven AWS account. The recorded information includes the identity of the API\ncaller, the time of the API call, the source IP address of the API caller, the\nrequest parameters, and the response elements returned by the AWS service.\nCloudTrail uses Amazon S3 for log file storage and delivery, so log files are\nstored durably. In addition to capturing CloudTrail logs within a specified S3\nbucket for long term analysis, realtime analysis can be performed by\nconfiguring CloudTrail to send logs to CloudWatch Logs. For a trail that is\nenabled in all regions in an account, CloudTrail sends log files from all those\nregions to a CloudWatch Logs log group. It is recommended that CloudTrail logs\nbe sent to CloudWatch Logs. Note: The intent of this recommendation is to\nensure AWS account activity is being captured, monitored, and appropriately\nalarmed on. CloudWatch Logs is a native way to accomplish this using AWS\nservices but does not preclude the use of an alternate solution. Sending\nCloudTrail logs to CloudWatch Logs will facilitate real-time and historic\nactivity logging based on user, API, resource, and IP address, and provides\nopportunity to establish alarms and notifications for anomalous or sensitivity\naccount activity. \"\n  impact 0.5\n  tag \"ref\": \"1. https://aws.amazon.com/cloudtrail/ 2. CCE-78916-4 3. CIS CSC\nv6.0 #6.6, #14.6\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"2.4\"\n  tag \"cis_control\": [[\"6.6\", \"14.6\"], \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"nist\": [[\"SI-4 (2)\", 4], [\"AU-2\", 4]]\n  tag \"audit text\": \"Perform the following to ensure CloudTrail is configured\nas prescribed:\nVia the AWS management Console Sign in to the AWS Management Console and open\nthe CloudTrail console\nat https://console.aws.amazon.com/cloudtrail/ Under All Buckets, click on the\ntarget bucket you wish to evaluate Click Properties on the top right of the\nconsole Click Trails in the left menu Ensure a CloudWatch Logs log group is\nconfigured and has a recent (~one dayld) Last log file delivered timestamp.\nVia CLI Run the following command to get a listing of existing trails:\naws cloudtrail describe-trails Ensure CloudWatchLogsLogGroupArn is not empty\nand note the value of the Name\nproperty. Using the noted value of the Name property, run the following\ncommand:\naws cloudtrail get-trail-status --name <trail_name> Ensure the\nLatestcloudwatchLogdDeliveryTime property is set to a recent (~one\nday old) timestamp.\n\"\n  tag \"fix\": \"Perform the following to establish the prescribed state:\nVia the AWS management Console Sign in to the AWS Management Console and open\nthe CloudTrail console\nat https://console.aws.amazon.com/cloudtrail/ Under All Buckets, click on the\ntarget bucket you wish to evaluate Click Properties on the top right of the\nconsole Click Trails in the left menu Click on each trail where no CloudWatch\nLogs are defined Go to the CloudWatch Logs section and click on Configure\nDefine a new or select an existing log group Click on Continue Configure IAM\nRole which will deliver CloudTrail events to CloudWatch Logs Create/Select an\nIAM Role and Policy Name Click Allow to continue\nVia CLI\naws cloudtrail update-trail --name <trail_name> --cloudwatch-logs-log-group-arn\n\n<cloudtrail_log_group_arn> --cloudwatch-logs-role-arn\n<cloudtrail_cloudwatchLogs_role_arn>\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-2.4.rb",
        "line": 1
      },
      "id": "M-2.4"
    },
    {
      "title": "2.5 Ensure AWS Config is enabled in all regions (Scored)",
      "desc": "AWS Config is a web service that performs configuration management of\nsupported AWS resources within your account and delivers log files to you. The\nrecorded information includes the configuration item (AWS resource),\nrelationships between configuration items (AWS resources), any configuration\nchanges between resources. It is recommended to enable AWS Config be enabled in\nall regions. The AWS configuration item history captured by AWS Config enables\nsecurity analysis, resource change tracking, and compliance auditing.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-78917-2 2. CIS CSC v6.0 #1.1, #1.3, #1.4, #5.2, #11.1 -\n#11.3, #14.6",
        "severity": "medium",
        "cis_id": "2.5",
        "cis_control": [
          [
            "1.1",
            "1.3",
            "1.4",
            "5.2",
            "11.1",
            "11.3",
            "14.6"
          ],
          "6.1"
        ],
        "cis_level": 1,
        "nist": [
          [
            "CM-8 (3)",
            4
          ],
          [
            "CM-8 (2)",
            4
          ],
          [
            "CM-8",
            4
          ],
          [
            "AC-6 (7)",
            4
          ],
          [
            "CM-6 (1)",
            4
          ],
          [
            "CM-6 (2)",
            4
          ],
          [
            "AU-2",
            4
          ]
        ],
        "audit text": "Process to evaluate AWS Config configuration per region\nVia AWS Management Console Sign in to the AWS Management Console and open the\nAWS Config console at\nhttps://console.aws.amazon.com/config/. On the top right of the console select\ntarget Region. If presented with Setup AWS Config - follow remediation\nprocedure: On the Resource inventory page, Click on edit (the gear icon). The\nSet Up AWS\nConfig page appears. Ensure 1 or both check-boxes under 'All Resources' is\nchecked. Include global resources related to IAM resources - which needs to be\n\nenabled in 1 region only Ensure the correct S3 bucket has been defined. Ensure\nthe correct SNS topic has been defined. Repeat steps 2 to 7 for each region.\n",
        "fix": "Perform the following in the AWS Management Console:\nSelect the region you want to focus on in the top right of the console\nClick Services\nClick Config\nDefine which resources you want to record in the selected region\nChoose to include global resources (IAM resources)\nSpecify an S3 bucket in the same account or in another managed AWS account\nCreate an SNS Topic from the same AWS account or another managed AWS account\nAPI Call:\naws configservice start-configuration-recorder\n"
      },
      "code": "control \"M-2.5\" do\n  title \"2.5 Ensure AWS Config is enabled in all regions (Scored)\"\n  desc  \"AWS Config is a web service that performs configuration management of\nsupported AWS resources within your account and delivers log files to you. The\nrecorded information includes the configuration item (AWS resource),\nrelationships between configuration items (AWS resources), any configuration\nchanges between resources. It is recommended to enable AWS Config be enabled in\nall regions. The AWS configuration item history captured by AWS Config enables\nsecurity analysis, resource change tracking, and compliance auditing. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-78917-2 2. CIS CSC v6.0 #1.1, #1.3, #1.4, #5.2, #11.1 -\n#11.3, #14.6\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"2.5\"\n  tag \"cis_control\": [[\"1.1\", \"1.3\", \"1.4\", \"5.2\", \"11.1\", \"11.3\", \"14.6\"],\n\"6.1\"]\n  tag \"cis_level\": 1\n  tag \"nist\": [[\"CM-8 (3)\", 4], [\"CM-8 (2)\", 4], [\"CM-8\", 4], [\"AC-6 (7)\", 4],\n[\"CM-6 (1)\", 4], [\"CM-6 (2)\", 4], [\"AU-2\", 4]]\n  tag \"audit text\": \"Process to evaluate AWS Config configuration per region\nVia AWS Management Console Sign in to the AWS Management Console and open the\nAWS Config console at\nhttps://console.aws.amazon.com/config/. On the top right of the console select\ntarget Region. If presented with Setup AWS Config - follow remediation\nprocedure: On the Resource inventory page, Click on edit (the gear icon). The\nSet Up AWS\nConfig page appears. Ensure 1 or both check-boxes under 'All Resources' is\nchecked. Include global resources related to IAM resources - which needs to be\n\nenabled in 1 region only Ensure the correct S3 bucket has been defined. Ensure\nthe correct SNS topic has been defined. Repeat steps 2 to 7 for each region.\n\"\n  tag \"fix\": \"Perform the following in the AWS Management Console:\nSelect the region you want to focus on in the top right of the console\nClick Services\nClick Config\nDefine which resources you want to record in the selected region\nChoose to include global resources (IAM resources)\nSpecify an S3 bucket in the same account or in another managed AWS account\nCreate an SNS Topic from the same AWS account or another managed AWS account\nAPI Call:\naws configservice start-configuration-recorder\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-2.5.rb",
        "line": 1
      },
      "id": "M-2.5"
    },
    {
      "title": "2.6 Ensure S3 bucket access logging is enabled on the CloudTrail S3\nbucket (Scored)",
      "desc": "S3 Bucket Access Logging generates a log that contains access records\nfor each request made to your S3 bucket. An access log record contains details\nabout the request, such as the request type, the resources specified in the\nrequest worked, and the time and date the request was processed. It is\nrecommended that bucket access logging be enabled on the CloudTrail S3 bucket.\nBy enabling S3 bucket logging on target S3 buckets, it is possible to capture\nall events which may affect objects within an target buckets. Configuring logs\nto be placed in a separate bucket allows access to log information which can be\nuseful in security and incident response workflows.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-78918-0 2. CIS CSC v6.0 #14.6",
        "severity": "medium",
        "cis_id": "2.6",
        "cis_control": [
          [
            "14.6"
          ],
          "6.1"
        ],
        "cis_level": 1,
        "nist": [
          [
            "AU-2",
            4
          ]
        ],
        "audit text": "Perform the following ensure the CloudTrail S3 bucket has\naccess logging is enabled:\nVia the management Console Go to the Amazon CloudTrail console\nat https://console.aws.amazon.com/cloudtrail/home In the API activity history\npane on the left, click Trails In the Trails pane, note the bucket names in the\nS3 bucket column Sign in to the AWS Management Console and open the S3 console\n\nat https://console.aws.amazon.com/s3. Under All Buckets click on a target S3\nbucket Click on Properties in the top right of the console Under\nBucket:<bucket_name> click on Logging Ensure Enabled is checked.\nVia CLI\naws s3api get-bucket-logging --bucket <s3_bucket_for_cloudtrail>\n",
        "fix": "Perform the following to enable S3 bucket logging:\nVia the Management Console Sign in to the AWS Management Console and open the\nS3 console\nat https://console.aws.amazon.com/s3. Under All Buckets click on the target S3\nbucket Click on Properties in the top right of the console Under\nBucket:<s3_bucket_for_cloudtrail> click on Logging Configure bucket logging\nClick on Enabled checkbox Select Target Bucket from list Enter a Target Prefix\nClick Save\n",
        "Default Value": "Logging is disabled.\n"
      },
      "code": "control \"M-2.6\" do\n  title \"2.6 Ensure S3 bucket access logging is enabled on the CloudTrail S3\nbucket (Scored)\"\n  desc  \"S3 Bucket Access Logging generates a log that contains access records\nfor each request made to your S3 bucket. An access log record contains details\nabout the request, such as the request type, the resources specified in the\nrequest worked, and the time and date the request was processed. It is\nrecommended that bucket access logging be enabled on the CloudTrail S3 bucket.\nBy enabling S3 bucket logging on target S3 buckets, it is possible to capture\nall events which may affect objects within an target buckets. Configuring logs\nto be placed in a separate bucket allows access to log information which can be\nuseful in security and incident response workflows. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-78918-0 2. CIS CSC v6.0 #14.6\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"2.6\"\n  tag \"cis_control\": [[\"14.6\"], \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"nist\": [[\"AU-2\", 4]]\n  tag \"audit text\": \"Perform the following ensure the CloudTrail S3 bucket has\naccess logging is enabled:\nVia the management Console Go to the Amazon CloudTrail console\nat https://console.aws.amazon.com/cloudtrail/home In the API activity history\npane on the left, click Trails In the Trails pane, note the bucket names in the\nS3 bucket column Sign in to the AWS Management Console and open the S3 console\n\nat https://console.aws.amazon.com/s3. Under All Buckets click on a target S3\nbucket Click on Properties in the top right of the console Under\nBucket:<bucket_name> click on Logging Ensure Enabled is checked.\nVia CLI\naws s3api get-bucket-logging --bucket <s3_bucket_for_cloudtrail>\n\"\n  tag \"fix\": \"Perform the following to enable S3 bucket logging:\nVia the Management Console Sign in to the AWS Management Console and open the\nS3 console\nat https://console.aws.amazon.com/s3. Under All Buckets click on the target S3\nbucket Click on Properties in the top right of the console Under\nBucket:<s3_bucket_for_cloudtrail> click on Logging Configure bucket logging\nClick on Enabled checkbox Select Target Bucket from list Enter a Target Prefix\nClick Save\n\"\n  tag \"Default Value\": \"Logging is disabled.\\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-2.6.rb",
        "line": 1
      },
      "id": "M-2.6"
    },
    {
      "title": "2.7 Ensure CloudTrail logs are encrypted at rest using KMS CMKs\n(Scored)",
      "desc": "AWS CloudTrail is a web service that records AWS API calls for an\naccount and makes those logs available to users and resources in accordance\nwith IAM policies. AWS Key Management Service (KMS) is a managed service that\nhelps create and control the encryption keys used to encrypt account data, and\nuses Hardware Security Modules (HSMs) to protect the security of encryption\nkeys. CloudTrail logs can be configured to leverage server side encryption\n(SSE) and KMS customer created master keys (CMK) to further protect CloudTrail\nlogs. It is recommended that CloudTrail be configured to use SSE-KMS.\nConfiguring CloudTrail to use SSE-KMS provides additional confidentiality\ncontrols on log data as a given user must have S3 read permission on the\ncorresponding log bucket and must be granted decrypt permission by the CMK\npolicy.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CIS CSC v6.0 #13.1: Perform an assessment of data to identify\nsensitive information. 2.\nhttps://docs.aws.amazon.com/awscloudtrail/latest/userguide/encryptingcloudtrail-log-files-with-aws-kms.html\n3. http://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html 4. CIS\nCSC v6.0 #6: Maintenance, Monitoring, and Analysis of Audit Logs 5. CCE-78919-8",
        "severity": "medium",
        "cis_id": "2.7",
        "cis_control": [
          [
            "13.1"
          ],
          "6.1"
        ],
        "cis_level": 2,
        "nist": [
          [
            "AR-2",
            4
          ]
        ],
        "audit text": "Perform the following to determine if CloudTrail is\nconfigured to use SSE-KMS:\nVia the Management Console Sign in to the AWS Management Console and open the\nCloudTrail console\nat https://console.aws.amazon.com/cloudtrail In the left navigation pane,\nchoose Trails. Select a Trail Under the S3 section, ensure Encrypt log files is\nset to Yes and a KMS key ID is\nspecified in the KSM Key Id field.\nVia CLI Run the following command:\naws cloudtrail describe-trails For each trail listed, SSE-KMS is enabled if the\ntrail has a KmsKeyId property defined.\n",
        "fix": "Perform the following to configure CloudTrail to use SSE-KMS:\nVia the Management Console Sign in to the AWS Management Console and open the\nCloudTrail console\nat https://console.aws.amazon.com/cloudtrail In the left navigation pane,\nchoose Trails. Click on a Trail Under the S3 section click on the edit button\n(pencil icon) Click Advanced Select an existing CMK from the KMS key Id\ndrop-down menu\no Note: Ensure the CMK is located in the same region as the S3 bucket\no Note: You will need to apply a KMS Key policy on the selected CMK in order\nfor CloudTrail as a service to encrypt and decrypt log files using the CMK\nprovided. Steps are provided here for editing the selected CMK Key policy Click\nSave You will see a notification message stating that you need to have decrypt\n\npermissions on the specified KMS key to decrypt log files. Click Yes\nVia CLI\naws cloudtrail update-trail --name <trail_name> --kms-id <cloudtrail_kms_key>\naws kms put-key-policy --key-id <cloudtrail_kms_key> -policy\n<cloudtrail_kms_key_policy>\n"
      },
      "code": "control \"M-2.7\" do\n  title \"2.7 Ensure CloudTrail logs are encrypted at rest using KMS CMKs\n(Scored)\"\n  desc  \"AWS CloudTrail is a web service that records AWS API calls for an\naccount and makes those logs available to users and resources in accordance\nwith IAM policies. AWS Key Management Service (KMS) is a managed service that\nhelps create and control the encryption keys used to encrypt account data, and\nuses Hardware Security Modules (HSMs) to protect the security of encryption\nkeys. CloudTrail logs can be configured to leverage server side encryption\n(SSE) and KMS customer created master keys (CMK) to further protect CloudTrail\nlogs. It is recommended that CloudTrail be configured to use SSE-KMS.\nConfiguring CloudTrail to use SSE-KMS provides additional confidentiality\ncontrols on log data as a given user must have S3 read permission on the\ncorresponding log bucket and must be granted decrypt permission by the CMK\npolicy. \"\n  impact 0.5\n  tag \"ref\": \"1. CIS CSC v6.0 #13.1: Perform an assessment of data to identify\nsensitive information. 2.\nhttps://docs.aws.amazon.com/awscloudtrail/latest/userguide/encryptingcloudtrail-log-files-with-aws-kms.html\n3. http://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html 4. CIS\nCSC v6.0 #6: Maintenance, Monitoring, and Analysis of Audit Logs 5. CCE-78919-8\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"2.7\"\n  tag \"cis_control\": [[\"13.1\"], \"6.1\"]\n  tag \"cis_level\": 2\n  tag \"nist\": [[\"AR-2\", 4]]\n  tag \"audit text\": \"Perform the following to determine if CloudTrail is\nconfigured to use SSE-KMS:\nVia the Management Console Sign in to the AWS Management Console and open the\nCloudTrail console\nat https://console.aws.amazon.com/cloudtrail In the left navigation pane,\nchoose Trails. Select a Trail Under the S3 section, ensure Encrypt log files is\nset to Yes and a KMS key ID is\nspecified in the KSM Key Id field.\nVia CLI Run the following command:\naws cloudtrail describe-trails For each trail listed, SSE-KMS is enabled if the\ntrail has a KmsKeyId property defined.\n\"\n  tag \"fix\": \"Perform the following to configure CloudTrail to use SSE-KMS:\nVia the Management Console Sign in to the AWS Management Console and open the\nCloudTrail console\nat https://console.aws.amazon.com/cloudtrail In the left navigation pane,\nchoose Trails. Click on a Trail Under the S3 section click on the edit button\n(pencil icon) Click Advanced Select an existing CMK from the KMS key Id\ndrop-down menu\no Note: Ensure the CMK is located in the same region as the S3 bucket\no Note: You will need to apply a KMS Key policy on the selected CMK in order\nfor CloudTrail as a service to encrypt and decrypt log files using the CMK\nprovided. Steps are provided here for editing the selected CMK Key policy Click\nSave You will see a notification message stating that you need to have decrypt\n\npermissions on the specified KMS key to decrypt log files. Click Yes\nVia CLI\naws cloudtrail update-trail --name <trail_name> --kms-id <cloudtrail_kms_key>\naws kms put-key-policy --key-id <cloudtrail_kms_key> -policy\n<cloudtrail_kms_key_policy>\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-2.7.rb",
        "line": 1
      },
      "id": "M-2.7"
    },
    {
      "title": "2.8 Ensure rotation for customer created CMKs is enabled (Scored)",
      "desc": "AWS Key Management Service (KMS) allows customers to rotate the\nbacking key which is key material stored within the KMS which is tied to the\nkey ID of the Customer Created customer master key (CMK). It is the backing key\nthat is used to perform cryptographic operations such as encryption and\ndecryption. Automated key rotation currently retains all prior backing keys so\nthat decryption of encrypted data can take place transparently. It is\nrecommended that CMK key rotation be enabled. Rotating encryption keys helps\nreduce the potential impact of a compromised key as data encrypted with a new\nkey cannot be accessed with a previous key that may have been exposed.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. https://aws.amazon.com/kms/pricing/ 2.\nhttp://csrc.nist.gov/publications/nistpubs/800-57/sp80057_part1_rev3_general.pdf\n3. CCE-78920-6",
        "severity": "medium",
        "cis_id": "2.8",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 2,
        "audit text": "Via the Management Console: Sign in to the AWS Management\nConsole and open the IAM console at\nhttps://console.aws.amazon.com/iam. In the left navigation pane, choose\nEncryption Keys. Select a customer created master key (CMK) Under the Key\nPolicy section, move down to Key Rotation. Ensure the Rotate this key every\nyear checkbox is checked.\nVia CLI Run the following command to get a list of all keys and their\nassociated KeyIds\naws kms list-keys For each key, note the KeyId and run the following command\naws kms get-key-rotation-status --key-id <kms_key_id> Ensure KeyRotationEnabled\nis set to true\n",
        "fix": "Via the Management Console: Sign in to the AWS Management Console\nand open the IAM console\nat https://console.aws.amazon.com/iam. In the left navigation pane, choose\nEncryption Keys. Select a customer created master key (CMK) Under the Key\nPolicy section, move down to Key Rotation. Check the Rotate this key every year\ncheckbox.\nVia CLI Run the following command to enable key rotation:\naws kms enable-key-rotation --key-id <kms_key_id>\n"
      },
      "code": "control \"M-2.8\" do\n  title \"2.8 Ensure rotation for customer created CMKs is enabled (Scored)\"\n  desc  \"AWS Key Management Service (KMS) allows customers to rotate the\nbacking key which is key material stored within the KMS which is tied to the\nkey ID of the Customer Created customer master key (CMK). It is the backing key\nthat is used to perform cryptographic operations such as encryption and\ndecryption. Automated key rotation currently retains all prior backing keys so\nthat decryption of encrypted data can take place transparently. It is\nrecommended that CMK key rotation be enabled. Rotating encryption keys helps\nreduce the potential impact of a compromised key as data encrypted with a new\nkey cannot be accessed with a previous key that may have been exposed. \"\n  impact 0.5\n  tag \"ref\": \"1. https://aws.amazon.com/kms/pricing/ 2.\nhttp://csrc.nist.gov/publications/nistpubs/800-57/sp80057_part1_rev3_general.pdf\n3. CCE-78920-6\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"2.8\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 2\n  tag \"audit text\": \"Via the Management Console: Sign in to the AWS Management\nConsole and open the IAM console at\nhttps://console.aws.amazon.com/iam. In the left navigation pane, choose\nEncryption Keys. Select a customer created master key (CMK) Under the Key\nPolicy section, move down to Key Rotation. Ensure the Rotate this key every\nyear checkbox is checked.\nVia CLI Run the following command to get a list of all keys and their\nassociated KeyIds\naws kms list-keys For each key, note the KeyId and run the following command\naws kms get-key-rotation-status --key-id <kms_key_id> Ensure KeyRotationEnabled\nis set to true\n\"\n  tag \"fix\": \"Via the Management Console: Sign in to the AWS Management Console\nand open the IAM console\nat https://console.aws.amazon.com/iam. In the left navigation pane, choose\nEncryption Keys. Select a customer created master key (CMK) Under the Key\nPolicy section, move down to Key Rotation. Check the Rotate this key every year\ncheckbox.\nVia CLI Run the following command to enable key rotation:\naws kms enable-key-rotation --key-id <kms_key_id>\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-2.8.rb",
        "line": 1
      },
      "id": "M-2.8"
    },
    {
      "title": "3.1 Ensure a log metric filter and alarm exist for unauthorized API\ncalls (Scored)",
      "desc": "Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. It is recommended that a metric filter and alarm be\nestablished for unauthorized API calls. Monitoring unauthorized API calls will\nhelp reveal application errors and may reduce time to detect malicious\nactivity.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. https://aws.amazon.com/sns/ 2. CCE-79186-3",
        "severity": "medium",
        "cis_id": "3.1",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{ ($.errorCode = \\'*UnauthorizedOperation\\') ||\n($.errorCode =\n\\'AccessDenied*\\') }' Note the <unauthorized_api_calls_metric> value\nassociated with the filterPattern\nfound in step 4. Get a list of CloudWatch alarms and filter on the\n<unauthorized_api_calls_metric>\ncaptured in step 5.\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<unauthorized_api_calls_metric>`]' Note the\nAlarmActions value - this will provide the SNS topic ARN value. Ensure there is\nat least one subscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n",
        "fix": "Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for unauthorized API\ncalls and the <cloudtrail_log_group_name> taken from audit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<unauthorized_api_calls_metric> --metric-transformations\nmetricName=<unauthorized_api_calls_metric>,metricNamespace='CISBenchmark',metricVal\n\nue=1 --filter-pattern '{ ($.errorCode = '*UnauthorizedOperation') ||\n($.errorCode =\n'AccessDenied*') }'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <unauthorized_api_calls_alarm>\n-metric-name <unauthorized_api_calls_metric> --statistic Sum --period 300\n-threshold 1 --comparison-operator GreaterThanOrEqualToThreshold\n--evaluation-periods 1\n--namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>\nNote: set the period and threshold to values that fit your organization.\n"
      },
      "code": "control \"M-3.1\" do\n  title \"3.1 Ensure a log metric filter and alarm exist for unauthorized API\ncalls (Scored)\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. It is recommended that a metric filter and alarm be\nestablished for unauthorized API calls. Monitoring unauthorized API calls will\nhelp reveal application errors and may reduce time to detect malicious\nactivity. \"\n  impact 0.5\n  tag \"ref\": \"1. https://aws.amazon.com/sns/ 2. CCE-79186-3\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"3.1\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{ ($.errorCode = \\\\'*UnauthorizedOperation\\\\') ||\n($.errorCode =\n\\\\'AccessDenied*\\\\') }' Note the <unauthorized_api_calls_metric> value\nassociated with the filterPattern\nfound in step 4. Get a list of CloudWatch alarms and filter on the\n<unauthorized_api_calls_metric>\ncaptured in step 5.\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<unauthorized_api_calls_metric>`]' Note the\nAlarmActions value - this will provide the SNS topic ARN value. Ensure there is\nat least one subscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n\"\n  tag \"fix\": \"Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for unauthorized API\ncalls and the <cloudtrail_log_group_name> taken from audit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<unauthorized_api_calls_metric> --metric-transformations\nmetricName=<unauthorized_api_calls_metric>,metricNamespace='CISBenchmark',metricVal\n\nue=1 --filter-pattern '{ ($.errorCode = '*UnauthorizedOperation') ||\n($.errorCode =\n'AccessDenied*') }'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <unauthorized_api_calls_alarm>\n-metric-name <unauthorized_api_calls_metric> --statistic Sum --period 300\n-threshold 1 --comparison-operator GreaterThanOrEqualToThreshold\n--evaluation-periods 1\n--namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>\nNote: set the period and threshold to values that fit your organization.\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-3.1.rb",
        "line": 1
      },
      "id": "M-3.1"
    },
    {
      "title": "3.10 Ensure a log metric filter and alarm exist for security group\nchanges (Scored)",
      "desc": "Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. Security Groups are a stateful packet filter that controls\ningress and egress traffic within a VPC. It is recommended that a metric filter\nand alarm be established changes to Security Groups. Monitoring changes to\nsecurity group will help ensure that resources and services are not\nunintentionally exposed.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-79195-4",
        "severity": "medium",
        "cis_id": "3.10",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 2,
        "audit text": "Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{ ($.eventName = AuthorizeSecurityGroupIngress) ||\n($.eventName =\nAuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) ||\n\n($.eventName = RevokeSecurityGroupEgress) || ($.eventName =\nCreateSecurityGroup) ||\n($.eventName = DeleteSecurityGroup)}' Note the <security_group_changes_metric>\nvalue associated with the filterPattern\nfound in step 4. Get a list of CloudWatch alarms and filter on the\n<security_group_changes_metric>\ncaptured in step 5.\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<security_group_changes_metric>`]' Note the\nAlarmActions value - this will provide the SNS topic ARN value. Ensure there is\nat least one subscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n",
        "fix": "Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for security groups\nchanges and the <cloudtrail_log_group_name> taken from audit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<security_group_changes_metric> --metric-transformations\nmetricName=<security_group_changes_metric>,metricNamespace='CISBenchmark',metricVal\n\nue=1 --filter-pattern '{ ($.eventName = AuthorizeSecurityGroupIngress) ||\n($.eventName\n= AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress)\n||\n($.eventName = RevokeSecurityGroupEgress) || ($.eventName =\nCreateSecurityGroup) ||\n($.eventName = DeleteSecurityGroup)}'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <security_group_changes_alarm>\n-metric-name <security_group_changes_metric> --statistic Sum --period 300\n-threshold 1 --comparison-operator GreaterThanOrEqualToThreshold\n--evaluation-periods 1\n--namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>\n"
      },
      "code": "control \"M-3.10\" do\n  title \"3.10 Ensure a log metric filter and alarm exist for security group\nchanges (Scored)\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. Security Groups are a stateful packet filter that controls\ningress and egress traffic within a VPC. It is recommended that a metric filter\nand alarm be established changes to Security Groups. Monitoring changes to\nsecurity group will help ensure that resources and services are not\nunintentionally exposed. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-79195-4\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"3.10\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 2\n  tag \"audit text\": \"Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{ ($.eventName = AuthorizeSecurityGroupIngress) ||\n($.eventName =\nAuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) ||\n\n($.eventName = RevokeSecurityGroupEgress) || ($.eventName =\nCreateSecurityGroup) ||\n($.eventName = DeleteSecurityGroup)}' Note the <security_group_changes_metric>\nvalue associated with the filterPattern\nfound in step 4. Get a list of CloudWatch alarms and filter on the\n<security_group_changes_metric>\ncaptured in step 5.\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<security_group_changes_metric>`]' Note the\nAlarmActions value - this will provide the SNS topic ARN value. Ensure there is\nat least one subscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n\"\n  tag \"fix\": \"Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for security groups\nchanges and the <cloudtrail_log_group_name> taken from audit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<security_group_changes_metric> --metric-transformations\nmetricName=<security_group_changes_metric>,metricNamespace='CISBenchmark',metricVal\n\nue=1 --filter-pattern '{ ($.eventName = AuthorizeSecurityGroupIngress) ||\n($.eventName\n= AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress)\n||\n($.eventName = RevokeSecurityGroupEgress) || ($.eventName =\nCreateSecurityGroup) ||\n($.eventName = DeleteSecurityGroup)}'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <security_group_changes_alarm>\n-metric-name <security_group_changes_metric> --statistic Sum --period 300\n-threshold 1 --comparison-operator GreaterThanOrEqualToThreshold\n--evaluation-periods 1\n--namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-3.10.rb",
        "line": 1
      },
      "id": "M-3.10"
    },
    {
      "title": "3.11 Ensure a log metric filter and alarm exist for changes to Network\nAccess Control Lists (NACL) (Scored)",
      "desc": "Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. NACLs are used as a stateless packet filter to control\ningress and egress traffic for subnets within a VPC. It is recommended that a\nmetric filter and alarm be established for changes made to NACLs. Monitoring\nchanges to NACLs will help ensure that AWS resources and services are not\nunintentionally exposed.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-79196-2",
        "severity": "medium",
        "cis_id": "3.11",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 2,
        "audit text": "Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{ ($.eventName = CreateNetworkAcl) || ($.eventName =\nCreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName =\nDeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) ||\n($.eventName =\nReplaceNetworkAclAssociation) }' Note the <nacl_changes_metric> value\nassociated with the filterPattern found in step Get a list of CloudWatch alarms\nand filter on the <nacl_changes_metric> captured in\nstep 5.\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<nacl_changes_metric>`]' Note the AlarmActions\nvalue - this will provide the SNS topic ARN value. Ensure there is at least one\nsubscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n",
        "fix": "Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for NACL changes\nand the <cloudtrail_log_group_name> taken from audit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<nacl_changes_metric> --metric-transformations\nmetricName=<nacl_changes_metric>,metricNamespace='CISBenchmark',metricValue=1\n-filter-pattern '{ ($.eventName = CreateNetworkAcl) || ($.eventName =\nCreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName =\nDeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) ||\n($.eventName =\nReplaceNetworkAclAssociation) }'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <nacl_changes_alarm> --metric-name\n\n<nacl_changes_metric> --statistic Sum --period 300 --threshold 1\n--comparisonoperator GreaterThanOrEqualToThreshold --evaluation-periods 1\n--namespace\n'CISBenchmark' --alarm-actions <sns_topic_arn>\n"
      },
      "code": "control \"M-3.11\" do\n  title \"3.11 Ensure a log metric filter and alarm exist for changes to Network\nAccess Control Lists (NACL) (Scored)\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. NACLs are used as a stateless packet filter to control\ningress and egress traffic for subnets within a VPC. It is recommended that a\nmetric filter and alarm be established for changes made to NACLs. Monitoring\nchanges to NACLs will help ensure that AWS resources and services are not\nunintentionally exposed. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-79196-2\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"3.11\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 2\n  tag \"audit text\": \"Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{ ($.eventName = CreateNetworkAcl) || ($.eventName =\nCreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName =\nDeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) ||\n($.eventName =\nReplaceNetworkAclAssociation) }' Note the <nacl_changes_metric> value\nassociated with the filterPattern found in step Get a list of CloudWatch alarms\nand filter on the <nacl_changes_metric> captured in\nstep 5.\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<nacl_changes_metric>`]' Note the AlarmActions\nvalue - this will provide the SNS topic ARN value. Ensure there is at least one\nsubscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n\"\n  tag \"fix\": \"Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for NACL changes\nand the <cloudtrail_log_group_name> taken from audit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<nacl_changes_metric> --metric-transformations\nmetricName=<nacl_changes_metric>,metricNamespace='CISBenchmark',metricValue=1\n-filter-pattern '{ ($.eventName = CreateNetworkAcl) || ($.eventName =\nCreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName =\nDeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) ||\n($.eventName =\nReplaceNetworkAclAssociation) }'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <nacl_changes_alarm> --metric-name\n\n<nacl_changes_metric> --statistic Sum --period 300 --threshold 1\n--comparisonoperator GreaterThanOrEqualToThreshold --evaluation-periods 1\n--namespace\n'CISBenchmark' --alarm-actions <sns_topic_arn>\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-3.11.rb",
        "line": 1
      },
      "id": "M-3.11"
    },
    {
      "title": "3.12 Ensure a log metric filter and alarm exist for changes to network\ngateways (Scored)",
      "desc": "Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. Network gateways are required to send/receive traffic to a\ndestination outside of a VPC. It is recommended that a metric filter and alarm\nbe established for changes to network gateways. Monitoring changes to network\ngateways will help ensure that all ingress/egress traffic traverses the VPC\nborder via a controlled path.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-79197-0",
        "severity": "medium",
        "cis_id": "3.12",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{ ($.eventName = CreateCustomerGateway) || ($.eventName =\nDeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName\n=\nCreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName\n=\nDetachInternetGateway) }' Note the <network_gw_changes_metric> value associated\nwith the filterPattern found\nin step 4. Get a list of CloudWatch alarms and filter on the\n<network_gw_changes_metric>\ncaptured in step 5.\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<network_gw_changes_metric>`]' Note the\nAlarmActions value - this will provide the SNS topic ARN value. Ensure there is\nat least one subscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n",
        "fix": "Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for network\ngateways changes and the <cloudtrail_log_group_name> taken from audit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<network_gw_changes_metric> --metric-transformations\nmetricName=<network_gw_changes_metric>,metricNamespace='CISBenchmark',metricValue=1\n\n--filter-pattern '{ ($.eventName = CreateCustomerGateway) || ($.eventName =\nDeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName\n=\nCreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName\n=\nDetachInternetGateway) }'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <network_gw_changes_alarm>\n--metricname <network_gw_changes_metric> --statistic Sum --period 300\n--threshold 1 -comparison-operator GreaterThanOrEqualToThreshold\n--evaluation-periods 1 --namespace\n'CISBenchmark' --alarm-actions <sns_topic_arn>\n"
      },
      "code": "control \"M-3.12\" do\n  title \"3.12 Ensure a log metric filter and alarm exist for changes to network\ngateways (Scored)\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. Network gateways are required to send/receive traffic to a\ndestination outside of a VPC. It is recommended that a metric filter and alarm\nbe established for changes to network gateways. Monitoring changes to network\ngateways will help ensure that all ingress/egress traffic traverses the VPC\nborder via a controlled path. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-79197-0\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"3.12\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{ ($.eventName = CreateCustomerGateway) || ($.eventName =\nDeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName\n=\nCreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName\n=\nDetachInternetGateway) }' Note the <network_gw_changes_metric> value associated\nwith the filterPattern found\nin step 4. Get a list of CloudWatch alarms and filter on the\n<network_gw_changes_metric>\ncaptured in step 5.\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<network_gw_changes_metric>`]' Note the\nAlarmActions value - this will provide the SNS topic ARN value. Ensure there is\nat least one subscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n\"\n  tag \"fix\": \"Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for network\ngateways changes and the <cloudtrail_log_group_name> taken from audit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<network_gw_changes_metric> --metric-transformations\nmetricName=<network_gw_changes_metric>,metricNamespace='CISBenchmark',metricValue=1\n\n--filter-pattern '{ ($.eventName = CreateCustomerGateway) || ($.eventName =\nDeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName\n=\nCreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName\n=\nDetachInternetGateway) }'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <network_gw_changes_alarm>\n--metricname <network_gw_changes_metric> --statistic Sum --period 300\n--threshold 1 -comparison-operator GreaterThanOrEqualToThreshold\n--evaluation-periods 1 --namespace\n'CISBenchmark' --alarm-actions <sns_topic_arn>\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-3.12.rb",
        "line": 1
      },
      "id": "M-3.12"
    },
    {
      "title": "3.13 Ensure a log metric filter and alarm exist for route table\nchanges (Scored)",
      "desc": "Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. Routing tables are used to route network traffic between\nsubnets and to network gateways. It is recommended that a metric filter and\nalarm be established for changes to route tables. Monitoring changes to route\ntables will help ensure that all VPC traffic flows through an expected path.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-79198-8",
        "severity": "medium",
        "cis_id": "3.13",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{ ($.eventName = CreateRoute) || ($.eventName =\nCreateRouteTable) ||\n($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) ||\n\n($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName\n=\nDisassociateRouteTable) }' Note the <route_table_changes_metric> value\nassociated with the filterPattern\nfound in step 4. Get a list of CloudWatch alarms and filter on the\n<route_table_changes_metric>\ncaptured in step 5.\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<route_table_changes_metric>`]' Note the\nAlarmActions value - this will provide the SNS topic ARN value. Ensure there is\nat least one subscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n",
        "fix": "Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for route table\nchanges and the <cloudtrail_log_group_name> taken from audit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<route_table_changes_metric> --metric-transformations\nmetricName=<route_table_changes_metric>,metricNamespace='CISBenchmark',metricValue=\n\n1 --filter-pattern '{ ($.eventName = CreateRoute) || ($.eventName =\nCreateRouteTable)\n|| ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation)\n||\n($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName\n=\nDisassociateRouteTable) }'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <route_table_changes_alarm>\n--metricname <route_table_changes_metric> --statistic Sum --period 300\n--threshold 1 -comparison-operator GreaterThanOrEqualToThreshold\n--evaluation-periods 1 --namespace\n'CISBenchmark' --alarm-actions <sns_topic_arn>\n"
      },
      "code": "control \"M-3.13\" do\n  title \"3.13 Ensure a log metric filter and alarm exist for route table\nchanges (Scored)\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. Routing tables are used to route network traffic between\nsubnets and to network gateways. It is recommended that a metric filter and\nalarm be established for changes to route tables. Monitoring changes to route\ntables will help ensure that all VPC traffic flows through an expected path. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-79198-8\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"3.13\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{ ($.eventName = CreateRoute) || ($.eventName =\nCreateRouteTable) ||\n($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) ||\n\n($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName\n=\nDisassociateRouteTable) }' Note the <route_table_changes_metric> value\nassociated with the filterPattern\nfound in step 4. Get a list of CloudWatch alarms and filter on the\n<route_table_changes_metric>\ncaptured in step 5.\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<route_table_changes_metric>`]' Note the\nAlarmActions value - this will provide the SNS topic ARN value. Ensure there is\nat least one subscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n\"\n  tag \"fix\": \"Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for route table\nchanges and the <cloudtrail_log_group_name> taken from audit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<route_table_changes_metric> --metric-transformations\nmetricName=<route_table_changes_metric>,metricNamespace='CISBenchmark',metricValue=\n\n1 --filter-pattern '{ ($.eventName = CreateRoute) || ($.eventName =\nCreateRouteTable)\n|| ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation)\n||\n($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName\n=\nDisassociateRouteTable) }'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <route_table_changes_alarm>\n--metricname <route_table_changes_metric> --statistic Sum --period 300\n--threshold 1 -comparison-operator GreaterThanOrEqualToThreshold\n--evaluation-periods 1 --namespace\n'CISBenchmark' --alarm-actions <sns_topic_arn>\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-3.13.rb",
        "line": 1
      },
      "id": "M-3.13"
    },
    {
      "title": "3.14 Ensure a log metric filter and alarm exist for VPC changes\n(Scored)",
      "desc": "Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. It is possible to have more than 1 VPC within an account,\nin addition it is also possible to create a peer connection between 2 VPCs\nenabling network traffic to route between VPCs. It is recommended that a metric\nfilter and alarm be established for changes made to VPCs. Monitoring changes to\nIAM policies will help ensure authentication and authorization controls remain\nintact.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-79199-6",
        "severity": "medium",
        "cis_id": "3.14",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) ||\n($.eventName = ModifyVpcAttribute) || ($.eventName =\nAcceptVpcPeeringConnection) ||\n($.eventName = CreateVpcPeeringConnection) || ($.eventName =\nDeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) ||\n($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) ||\n\n($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink)\n}' Note the <vpc_changes_metric> value associated with the filterPattern found\nin step Get a list of CloudWatch alarms and filter on the\n<unauthorized_api_calls_metric>\ncaptured in step 5.\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<vpc_changes_metric>`]' Note the AlarmActions value\n- this will provide the SNS topic ARN value. Ensure there is at least one\nsubscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n",
        "fix": "Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for VPC changes and\nthe <cloudtrail_log_group_name> taken from audit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<vpc_changes_metric> --metric-transformations\nmetricName=<vpc_changes_metric>,metricNamespace='CISBenchmark',metricValue=1\n-filter-pattern '{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) ||\n($.eventName = ModifyVpcAttribute) || ($.eventName =\nAcceptVpcPeeringConnection) ||\n($.eventName = CreateVpcPeeringConnection) || ($.eventName =\nDeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) ||\n($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) ||\n\n($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink)\n}'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <vpc_changes_alarm> --metric-name\n\n<vpc_changes_metric> --statistic Sum --period 300 --threshold 1\n--comparisonoperator GreaterThanOrEqualToThreshold --evaluation-periods 1\n--namespace\n'CISBenchmark' --alarm-actions <sns_topic_arn>\n"
      },
      "code": "control \"M-3.14\" do\n  title \"3.14 Ensure a log metric filter and alarm exist for VPC changes\n(Scored)\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. It is possible to have more than 1 VPC within an account,\nin addition it is also possible to create a peer connection between 2 VPCs\nenabling network traffic to route between VPCs. It is recommended that a metric\nfilter and alarm be established for changes made to VPCs. Monitoring changes to\nIAM policies will help ensure authentication and authorization controls remain\nintact. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-79199-6\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"3.14\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) ||\n($.eventName = ModifyVpcAttribute) || ($.eventName =\nAcceptVpcPeeringConnection) ||\n($.eventName = CreateVpcPeeringConnection) || ($.eventName =\nDeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) ||\n($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) ||\n\n($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink)\n}' Note the <vpc_changes_metric> value associated with the filterPattern found\nin step Get a list of CloudWatch alarms and filter on the\n<unauthorized_api_calls_metric>\ncaptured in step 5.\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<vpc_changes_metric>`]' Note the AlarmActions value\n- this will provide the SNS topic ARN value. Ensure there is at least one\nsubscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n\"\n  tag \"fix\": \"Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for VPC changes and\nthe <cloudtrail_log_group_name> taken from audit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<vpc_changes_metric> --metric-transformations\nmetricName=<vpc_changes_metric>,metricNamespace='CISBenchmark',metricValue=1\n-filter-pattern '{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) ||\n($.eventName = ModifyVpcAttribute) || ($.eventName =\nAcceptVpcPeeringConnection) ||\n($.eventName = CreateVpcPeeringConnection) || ($.eventName =\nDeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) ||\n($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) ||\n\n($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink)\n}'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <vpc_changes_alarm> --metric-name\n\n<vpc_changes_metric> --statistic Sum --period 300 --threshold 1\n--comparisonoperator GreaterThanOrEqualToThreshold --evaluation-periods 1\n--namespace\n'CISBenchmark' --alarm-actions <sns_topic_arn>\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-3.14.rb",
        "line": 1
      },
      "id": "M-3.14"
    },
    {
      "title": "3.15 Ensure appropriate subscribers to each SNS topic (Not Scored)",
      "desc": "AWS Simple Notification Service (SNS) is a web service that can\npublish messages from an application and immediately deliver them to\nsubscribers or other applications. Subscribers are clients interested in\nreceiving notifications from topics of interest; they can subscribe to a topic\nor be subscribed by the topic owner. When publishers have information or\nupdates to notify their subscribers about, they can publish a message to the\ntopic – which immediately triggers Amazon SNS to deliver the message to all\napplicable subscribers. It is recommended that the list of subscribers to given\ntopics be periodically reviewed for appropriateness. Reviewing subscriber\ntopics will help ensure that only expected recipients receive information\npublished to SNS topics.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. https://aws.amazon.com/sns/",
        "severity": "medium",
        "cis_id": "3.15",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Perform the following to ensure appropriate subscribers:\nVia the AWS Management console: Sign in to the AWS Management Console and open\nthe SNS console\nat https://console.aws.amazon.com/sns/ Click on Topics in the left navigation\npane Evaluate Topics by clicking on the value within the ARN column Within a\nselected Topic evaluate:\n Topic owner\n Region Within the Subscriptions section evaluate:\n Subscription ID\n Protocol\n Endpoint\n Subscriber (Account ID)\nVia CLI:\naws sns list-topics\naws sns list-subscriptions-by-topic --topic-arn <topic_arn>\n",
        "fix": "Perform the following to remove undesired subscriptions:\nVia Management Console Sign in to the AWS Management Console and open the SNS\nconsole\nat https://console.aws.amazon.com/sns/ Click on Subscriptions in the left\nnavigation pane For any undesired subscription, select the corresponding\ncheckboxes Click Actions Click Delete Subscriptions\n",
        "Default Value": "Not Applicable\n"
      },
      "code": "control \"M-3.15\" do\n  title \"3.15 Ensure appropriate subscribers to each SNS topic (Not Scored)\"\n  desc  \"AWS Simple Notification Service (SNS) is a web service that can\npublish messages from an application and immediately deliver them to\nsubscribers or other applications. Subscribers are clients interested in\nreceiving notifications from topics of interest; they can subscribe to a topic\nor be subscribed by the topic owner. When publishers have information or\nupdates to notify their subscribers about, they can publish a message to the\ntopic – which immediately triggers Amazon SNS to deliver the message to all\napplicable subscribers. It is recommended that the list of subscribers to given\ntopics be periodically reviewed for appropriateness. Reviewing subscriber\ntopics will help ensure that only expected recipients receive information\npublished to SNS topics. \"\n  impact 0.5\n  tag \"ref\": \"1. https://aws.amazon.com/sns/\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"3.15\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Perform the following to ensure appropriate subscribers:\nVia the AWS Management console: Sign in to the AWS Management Console and open\nthe SNS console\nat https://console.aws.amazon.com/sns/ Click on Topics in the left navigation\npane Evaluate Topics by clicking on the value within the ARN column Within a\nselected Topic evaluate:\n Topic owner\n Region Within the Subscriptions section evaluate:\n Subscription ID\n Protocol\n Endpoint\n Subscriber (Account ID)\nVia CLI:\naws sns list-topics\naws sns list-subscriptions-by-topic --topic-arn <topic_arn>\n\"\n  tag \"fix\": \"Perform the following to remove undesired subscriptions:\nVia Management Console Sign in to the AWS Management Console and open the SNS\nconsole\nat https://console.aws.amazon.com/sns/ Click on Subscriptions in the left\nnavigation pane For any undesired subscription, select the corresponding\ncheckboxes Click Actions Click Delete Subscriptions\n\"\n  tag \"Default Value\": \"Not Applicable\\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-3.15.rb",
        "line": 1
      },
      "id": "M-3.15"
    },
    {
      "title": "3.2 Ensure a log metric filter and alarm exist for Management Console\nsign-in without MFA (Scored)",
      "desc": "Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. It is recommended that a metric filter and alarm be\nestablished for console logins that are not protected by multi-factor\nauthentication (MFA). Monitoring for single-factor console logins will increase\nvisibility into accounts that are not protected by MFA.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1.\nhttp://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/viewing\n_metrics_with_cloudwatch.html 2. CCE-79187-1 3. CIS CSC v6.0 #5.5",
        "severity": "medium",
        "cis_id": "3.2",
        "cis_control": [
          [
            "5.5"
          ],
          "6.1"
        ],
        "cis_level": 1,
        "nist": [
          [
            "AU-2",
            4
          ]
        ],
        "audit text": "Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{ ($.eventName = 'ConsoleLogin') &&\n($.additionalEventData.MFAUsed\n!= 'Yes') }' Note the <no_mfa_console_signin_metric> value associated with the\nfilterPattern\nfound in step 4. Get a list of CloudWatch alarms and filter on the\n<no_mfa_console_signin_metric>\ncaptured in step 5.\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<no_mfa_console_signin_metric>`]' Note the\nAlarmActions value - this will provide the SNS topic ARN value. Ensure there is\nat least one subscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n",
        "fix": "Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for AWS\nManagement Console sign-in without MFA and the <cloudtrail_log_group_name>\ntaken from\naudit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<no_mfa_console_signin_metric> --metric-transformations\nmetricName=<no_mfa_console_signin_metric>,metricNamespace='CISBenchmark',metricValu\n\ne=1 --filter-pattern '{ ($.eventName = 'ConsoleLogin') &&\n($.additionalEventData.MFAUsed != 'Yes') }'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <no_mfa_console_signin_alarm>\n--metricname <no_mfa_console_signin_metric> --statistic Sum --period 300\n--threshold 1 -comparison-operator GreaterThanOrEqualToThreshold\n--evaluation-periods 1 --namespace\n'CISBenchmark' --alarm-actions <sns_topic_arn>\n"
      },
      "code": "control \"M-3.2\" do\n  title \"3.2 Ensure a log metric filter and alarm exist for Management Console\nsign-in without MFA (Scored)\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. It is recommended that a metric filter and alarm be\nestablished for console logins that are not protected by multi-factor\nauthentication (MFA). Monitoring for single-factor console logins will increase\nvisibility into accounts that are not protected by MFA. \"\n  impact 0.5\n  tag \"ref\": \"1.\nhttp://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/viewing\n_metrics_with_cloudwatch.html 2. CCE-79187-1 3. CIS CSC v6.0 #5.5\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"3.2\"\n  tag \"cis_control\": [[\"5.5\"], \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"nist\": [[\"AU-2\", 4]]\n  tag \"audit text\": \"Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{ ($.eventName = 'ConsoleLogin') &&\n($.additionalEventData.MFAUsed\n!= 'Yes') }' Note the <no_mfa_console_signin_metric> value associated with the\nfilterPattern\nfound in step 4. Get a list of CloudWatch alarms and filter on the\n<no_mfa_console_signin_metric>\ncaptured in step 5.\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<no_mfa_console_signin_metric>`]' Note the\nAlarmActions value - this will provide the SNS topic ARN value. Ensure there is\nat least one subscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n\"\n  tag \"fix\": \"Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for AWS\nManagement Console sign-in without MFA and the <cloudtrail_log_group_name>\ntaken from\naudit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<no_mfa_console_signin_metric> --metric-transformations\nmetricName=<no_mfa_console_signin_metric>,metricNamespace='CISBenchmark',metricValu\n\ne=1 --filter-pattern '{ ($.eventName = 'ConsoleLogin') &&\n($.additionalEventData.MFAUsed != 'Yes') }'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <no_mfa_console_signin_alarm>\n--metricname <no_mfa_console_signin_metric> --statistic Sum --period 300\n--threshold 1 -comparison-operator GreaterThanOrEqualToThreshold\n--evaluation-periods 1 --namespace\n'CISBenchmark' --alarm-actions <sns_topic_arn>\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-3.2.rb",
        "line": 1
      },
      "id": "M-3.2"
    },
    {
      "title": "3.3 Ensure a log metric filter and alarm exist for usage of 'root'\naccount (Scored)",
      "desc": "Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. It is recommended that a metric filter and alarm be\nestablished for root login attempts. Monitoring for root account logins will\nprovide visibility into the use of a fully privileged account and an\nopportunity to reduce the use of it.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-79188-9 2. CIS CSC v6.0 #4.6, #5.1, #5.5",
        "severity": "medium",
        "cis_id": "3.3",
        "cis_control": [
          [
            "4.6",
            "5.1",
            "5.5"
          ],
          "6.1"
        ],
        "cis_level": 1,
        "nist": [
          [
            "AU-6 (5)",
            4
          ],
          [
            "AC-6 (9)",
            4
          ],
          [
            "AU-2",
            4
          ]
        ],
        "audit text": "Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{ $.userIdentity.type = \\'Root\\' &&\n$.userIdentity.invokedBy NOT\nEXISTS && $.eventType != \\'AwsServiceEvent\\' } ' Note the <root_usage_metric>\nvalue associated with the filterPattern found in step 4. Get a list of\nCloudWatch alarms and filter on the <root_usage_metric> captured in step\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<root_usage_metric>`]' Note the AlarmActions value\n- this will provide the SNS topic ARN value. Ensure there is at least one\nsubscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n",
        "fix": "Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for 'Root' account\nusage and the <cloudtrail_log_group_name> taken from audit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<root_usage_metric> --metric-transformations\nmetricName=<root_usage_metric>,metricNamespace='CISBenchmark',metricValue=1\n-filter-pattern '{ $.userIdentity.type = 'Root' && $.userIdentity.invokedBy NOT\nEXISTS\n&& $.eventType != 'AwsServiceEvent' }'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <root_usage_alarm> --metric-name\n<root_usage_metric> --statistic Sum --period 300 --threshold 1\n--comparison-operator\nGreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark'\n-alarm-actions <sns_topic_arn>\n"
      },
      "code": "control \"M-3.3\" do\n  title \"3.3 Ensure a log metric filter and alarm exist for usage of 'root'\naccount (Scored)\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. It is recommended that a metric filter and alarm be\nestablished for root login attempts. Monitoring for root account logins will\nprovide visibility into the use of a fully privileged account and an\nopportunity to reduce the use of it. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-79188-9 2. CIS CSC v6.0 #4.6, #5.1, #5.5\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"3.3\"\n  tag \"cis_control\": [[\"4.6\", \"5.1\", \"5.5\"], \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"nist\": [[\"AU-6 (5)\", 4], [\"AC-6 (9)\", 4], [\"AU-2\", 4]]\n  tag \"audit text\": \"Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{ $.userIdentity.type = \\\\'Root\\\\' &&\n$.userIdentity.invokedBy NOT\nEXISTS && $.eventType != \\\\'AwsServiceEvent\\\\' } ' Note the <root_usage_metric>\nvalue associated with the filterPattern found in step 4. Get a list of\nCloudWatch alarms and filter on the <root_usage_metric> captured in step\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<root_usage_metric>`]' Note the AlarmActions value\n- this will provide the SNS topic ARN value. Ensure there is at least one\nsubscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n\"\n  tag \"fix\": \"Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for 'Root' account\nusage and the <cloudtrail_log_group_name> taken from audit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<root_usage_metric> --metric-transformations\nmetricName=<root_usage_metric>,metricNamespace='CISBenchmark',metricValue=1\n-filter-pattern '{ $.userIdentity.type = 'Root' && $.userIdentity.invokedBy NOT\nEXISTS\n&& $.eventType != 'AwsServiceEvent' }'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <root_usage_alarm> --metric-name\n<root_usage_metric> --statistic Sum --period 300 --threshold 1\n--comparison-operator\nGreaterThanOrEqualToThreshold --evaluation-periods 1 --namespace 'CISBenchmark'\n-alarm-actions <sns_topic_arn>\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-3.3.rb",
        "line": 1
      },
      "id": "M-3.3"
    },
    {
      "title": "3.4 Ensure a log metric filter and alarm exist for IAM policy changes\n(Scored)",
      "desc": "Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. It is recommended that a metric filter and alarm be\nestablished changes made to Identity and Access Management (IAM) policies.\nMonitoring changes to IAM policies will help ensure authentication and\nauthorization controls remain intact.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-79189-7",
        "severity": "medium",
        "cis_id": "3.4",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern':\n'{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=Delete\n\nUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=P\n\nutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=Cr\n\neatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)|\n\n|($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUs\n\nerPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}'\nNote the <iam_changes_metric> value associated with the filterPattern found in\nstep Get a list of CloudWatch alarms and filter on the <iam_changes_metric>\ncaptured in step\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<iam_changes_metric>`]' Note the AlarmActions value\n- this will provide the SNS topic ARN value. Ensure there is at least one\nsubscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n",
        "fix": "Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for IAM Policy\nchanges and the <cloudtrail_log_group_name> taken from audit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<iam_changes_metric> --metric-transformations\nmetricName=<iam_changes_metric>,metricNamespace='CISBenchmark',metricValue=1\n-filter-pattern\n'{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=Delete\n\nUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=P\n\nutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=Cr\n\neatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)|\n\n|($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUs\n\nerPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <iam_changes_alarm> --metric-name\n\n<iam_changes_metric> --statistic Sum --period 300 --threshold 1\n--comparisonoperator GreaterThanOrEqualToThreshold --evaluation-periods 1\n--namespace\n'CISBenchmark' --alarm-actions <sns_topic_arn>\n"
      },
      "code": "control \"M-3.4\" do\n  title \"3.4 Ensure a log metric filter and alarm exist for IAM policy changes\n(Scored)\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. It is recommended that a metric filter and alarm be\nestablished changes made to Identity and Access Management (IAM) policies.\nMonitoring changes to IAM policies will help ensure authentication and\nauthorization controls remain intact. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-79189-7\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"3.4\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern':\n'{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=Delete\n\nUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=P\n\nutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=Cr\n\neatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)|\n\n|($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUs\n\nerPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}'\nNote the <iam_changes_metric> value associated with the filterPattern found in\nstep Get a list of CloudWatch alarms and filter on the <iam_changes_metric>\ncaptured in step\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<iam_changes_metric>`]' Note the AlarmActions value\n- this will provide the SNS topic ARN value. Ensure there is at least one\nsubscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n\"\n  tag \"fix\": \"Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for IAM Policy\nchanges and the <cloudtrail_log_group_name> taken from audit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<iam_changes_metric> --metric-transformations\nmetricName=<iam_changes_metric>,metricNamespace='CISBenchmark',metricValue=1\n-filter-pattern\n'{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=Delete\n\nUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=P\n\nutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=Cr\n\neatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)|\n\n|($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUs\n\nerPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <iam_changes_alarm> --metric-name\n\n<iam_changes_metric> --statistic Sum --period 300 --threshold 1\n--comparisonoperator GreaterThanOrEqualToThreshold --evaluation-periods 1\n--namespace\n'CISBenchmark' --alarm-actions <sns_topic_arn>\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-3.4.rb",
        "line": 1
      },
      "id": "M-3.4"
    },
    {
      "title": "3.5 Ensure a log metric filter and alarm exist for CloudTrail\nconfiguration changes (Scored)",
      "desc": "Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. It is recommended that a metric filter and alarm be\nestablished for detecting changes to CloudTrail's configurations. Monitoring\nchanges to CloudTrail's configuration will help ensure sustained visibility to\nactivities performed in the AWS account.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-79190-5",
        "severity": "medium",
        "cis_id": "3.5",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail)\n||\n($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName =\nStopLogging) }' Note the <cloudtrail_cfg_changes_metric> value associated with\nthe filterPattern\nfound in step 4. Get a list of CloudWatch alarms and filter on the\n<cloudtrail_cfg_changes_metric>\ncaptured in step 5.\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<cloudtrail_cfg_changes_metric>`]' Note the\nAlarmActions value - this will provide the SNS topic ARN value. Ensure there is\nat least one subscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n",
        "fix": "Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for Cloudtrail\nconfiguration changes and the <cloudtrail_log_group_name> taken from audit step\n2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<cloudtrail_cfg_changes_metric> --metric-transformations\nmetricName=<cloudtrail_cfg_changes_metric>,metricNamespace='CISBenchmark',metricVal\n\nue=1 --filter-pattern '{ ($.eventName = CreateTrail) || ($.eventName =\nUpdateTrail) ||\n($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName =\nStopLogging) }'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <cloudtrail_cfg_changes_alarm>\n-metric-name <cloudtrail_cfg_changes_metric> --statistic Sum --period 300\n-threshold 1 --comparison-operator GreaterThanOrEqualToThreshold\n--evaluation-periods 1\n--namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>\n"
      },
      "code": "control \"M-3.5\" do\n  title \"3.5 Ensure a log metric filter and alarm exist for CloudTrail\nconfiguration changes (Scored)\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. It is recommended that a metric filter and alarm be\nestablished for detecting changes to CloudTrail's configurations. Monitoring\nchanges to CloudTrail's configuration will help ensure sustained visibility to\nactivities performed in the AWS account. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-79190-5\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"3.5\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail)\n||\n($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName =\nStopLogging) }' Note the <cloudtrail_cfg_changes_metric> value associated with\nthe filterPattern\nfound in step 4. Get a list of CloudWatch alarms and filter on the\n<cloudtrail_cfg_changes_metric>\ncaptured in step 5.\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<cloudtrail_cfg_changes_metric>`]' Note the\nAlarmActions value - this will provide the SNS topic ARN value. Ensure there is\nat least one subscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n\"\n  tag \"fix\": \"Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for Cloudtrail\nconfiguration changes and the <cloudtrail_log_group_name> taken from audit step\n2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<cloudtrail_cfg_changes_metric> --metric-transformations\nmetricName=<cloudtrail_cfg_changes_metric>,metricNamespace='CISBenchmark',metricVal\n\nue=1 --filter-pattern '{ ($.eventName = CreateTrail) || ($.eventName =\nUpdateTrail) ||\n($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName =\nStopLogging) }'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <cloudtrail_cfg_changes_alarm>\n-metric-name <cloudtrail_cfg_changes_metric> --statistic Sum --period 300\n-threshold 1 --comparison-operator GreaterThanOrEqualToThreshold\n--evaluation-periods 1\n--namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-3.5.rb",
        "line": 1
      },
      "id": "M-3.5"
    },
    {
      "title": "3.6 Ensure a log metric filter and alarm exist for AWS Management\nConsole authentication failures (Scored)",
      "desc": "Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. It is recommended that a metric filter and alarm be\nestablished for failed console authentication attempts. Monitoring failed\nconsole logins may decrease lead time to detect an attempt to brute force a\ncredential, which may provide an indicator, such as source IP, that can be used\nin other event correlation.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-79191-3",
        "severity": "medium",
        "cis_id": "3.6",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 2,
        "audit text": "Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{ ($.eventName = ConsoleLogin) && ($.errorMessage = \\'Failed\n\nauthentication\\') }' Note the <console_signin_failure_metric> value associated\nwith the filterPattern\nfound in step 4. Get a list of CloudWatch alarms and filter on the\n<console_signin_failure_metric>\ncaptured in step 5.\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<console_signin_failure_metric>`]' Note the\nAlarmActions value - this will provide the SNS topic ARN value. Ensure there is\nat least one subscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n",
        "fix": "Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for AWS\nManagement Console authentication failures and the <cloudtrail_log_group_name>\ntaken\nfrom audit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<console_signin_failure_metric> --metric-transformations\nmetricName=<console_signin_failure_metric>,metricNamespace='CISBenchmark',metricVal\n\nue=1 --filter-pattern '{ ($.eventName = ConsoleLogin) && ($.errorMessage =\n''Failed\nauthentication'') }'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <console_signin_failure_alarm>\n-metric-name <console_signin_failure_metric> --statistic Sum --period 300\n-threshold 1 --comparison-operator GreaterThanOrEqualToThreshold\n--evaluation-periods 1\n--namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>\n"
      },
      "code": "control \"M-3.6\" do\n  title \"3.6 Ensure a log metric filter and alarm exist for AWS Management\nConsole authentication failures (Scored)\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. It is recommended that a metric filter and alarm be\nestablished for failed console authentication attempts. Monitoring failed\nconsole logins may decrease lead time to detect an attempt to brute force a\ncredential, which may provide an indicator, such as source IP, that can be used\nin other event correlation. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-79191-3\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"3.6\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 2\n  tag \"audit text\": \"Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{ ($.eventName = ConsoleLogin) && ($.errorMessage = \\\\'Failed\n\nauthentication\\\\') }' Note the <console_signin_failure_metric> value associated\nwith the filterPattern\nfound in step 4. Get a list of CloudWatch alarms and filter on the\n<console_signin_failure_metric>\ncaptured in step 5.\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<console_signin_failure_metric>`]' Note the\nAlarmActions value - this will provide the SNS topic ARN value. Ensure there is\nat least one subscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n\"\n  tag \"fix\": \"Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for AWS\nManagement Console authentication failures and the <cloudtrail_log_group_name>\ntaken\nfrom audit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<console_signin_failure_metric> --metric-transformations\nmetricName=<console_signin_failure_metric>,metricNamespace='CISBenchmark',metricVal\n\nue=1 --filter-pattern '{ ($.eventName = ConsoleLogin) && ($.errorMessage =\n''Failed\nauthentication'') }'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <console_signin_failure_alarm>\n-metric-name <console_signin_failure_metric> --statistic Sum --period 300\n-threshold 1 --comparison-operator GreaterThanOrEqualToThreshold\n--evaluation-periods 1\n--namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-3.6.rb",
        "line": 1
      },
      "id": "M-3.6"
    },
    {
      "title": "3.7 Ensure a log metric filter and alarm exist for disabling or\nscheduled deletion of customer created CMKs (Scored)",
      "desc": "Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. It is recommended that a metric filter and alarm be\nestablished for customer created CMKs which have changed state to disabled or\nscheduled deletion. Data encrypted with disabled or deleted keys will no longer\nbe accessible.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-79192-1",
        "severity": "medium",
        "cis_id": "3.7",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 2,
        "audit text": "Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{($.eventSource = kms.amazonaws.com) &&\n(($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion))} }' Note the\n<disable_or_delete_cmk_metric> value associated with the filterPattern\nfound in step 4. Get a list of CloudWatch alarms and filter on the\n<disable_or_delete_cmk_metric>\ncaptured in step 5.\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<disable_or_delete_cmk_metric>`]' Note the\nAlarmActions value - this will provide the SNS topic ARN value. Ensure there is\nat least one subscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n",
        "fix": "Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for disabled or\nscheduled for deletion CMK's and the <cloudtrail_log_group_name> taken from\naudit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<disable_or_delete_cmk_metric> --metric-transformations\nmetricName=<disable_or_delete_cmk_metric>,metricNamespace='CISBenchmark',metricValu\n\ne=1 --filter-pattern '{($.eventSource = kms.amazonaws.com) &&\n(($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion))}'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <disable_or_delete_cmk_alarm>\n-metric-name <disable_or_delete_cmk_metric> --statistic Sum --period 300\n--threshold\n1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1\n-namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>\n"
      },
      "code": "control \"M-3.7\" do\n  title \"3.7 Ensure a log metric filter and alarm exist for disabling or\nscheduled deletion of customer created CMKs (Scored)\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. It is recommended that a metric filter and alarm be\nestablished for customer created CMKs which have changed state to disabled or\nscheduled deletion. Data encrypted with disabled or deleted keys will no longer\nbe accessible. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-79192-1\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"3.7\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 2\n  tag \"audit text\": \"Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{($.eventSource = kms.amazonaws.com) &&\n(($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion))} }' Note the\n<disable_or_delete_cmk_metric> value associated with the filterPattern\nfound in step 4. Get a list of CloudWatch alarms and filter on the\n<disable_or_delete_cmk_metric>\ncaptured in step 5.\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<disable_or_delete_cmk_metric>`]' Note the\nAlarmActions value - this will provide the SNS topic ARN value. Ensure there is\nat least one subscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n\"\n  tag \"fix\": \"Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for disabled or\nscheduled for deletion CMK's and the <cloudtrail_log_group_name> taken from\naudit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<disable_or_delete_cmk_metric> --metric-transformations\nmetricName=<disable_or_delete_cmk_metric>,metricNamespace='CISBenchmark',metricValu\n\ne=1 --filter-pattern '{($.eventSource = kms.amazonaws.com) &&\n(($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion))}'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <disable_or_delete_cmk_alarm>\n-metric-name <disable_or_delete_cmk_metric> --statistic Sum --period 300\n--threshold\n1 --comparison-operator GreaterThanOrEqualToThreshold --evaluation-periods 1\n-namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-3.7.rb",
        "line": 1
      },
      "id": "M-3.7"
    },
    {
      "title": "3.8 Ensure a log metric filter and alarm exist for S3 bucket policy\nchanges (Scored)",
      "desc": "Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. It is recommended that a metric filter and alarm be\nestablished for changes to S3 bucket policies. Monitoring changes to S3 bucket\npolicies may reduce time to detect and correct permissive policies on sensitive\nS3 buckets.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-79193-9",
        "severity": "medium",
        "cis_id": "3.8",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{ ($.eventSource = s3.amazonaws.com) && (($.eventName =\nPutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName =\nPutBucketCors) ||\n($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) ||\n($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) ||\n($.eventName\n= DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }' Note\nthe <s3_bucket_policy_changes_metric> value associated with the\nfilterPattern found in step 4. Get a list of CloudWatch alarms and filter on\nthe <s3_bucket_policy_changes_metric>\ncaptured in step 5.\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<s3_bucket_policy_changes_metric>`]' Note the\nAlarmActions value - this will provide the SNS topic ARN value. Ensure there is\nat least one subscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n",
        "fix": "Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for S3 Bucket Policy\nchanges and the <cloudtrail_log_group_name> taken from audit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<s3_bucket_policy_changes_metric> --metric-transformations\nmetricName=<s3_bucket_policy_changes_metric>,metricNamespace='CISBenchmark',metric\n\nValue=1 --filter-pattern '{ ($.eventSource = s3.amazonaws.com) && (($.eventName\n=\nPutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName =\nPutBucketCors) ||\n($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) ||\n($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) ||\n($.eventName\n= DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <s3_bucket_policy_changes_alarm>\n-metric-name <s3_bucket_policy_changes_metric> --statistic Sum --period 300\n-threshold 1 --comparison-operator GreaterThanOrEqualToThreshold\n--evaluation-periods 1\n--namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>\n"
      },
      "code": "control \"M-3.8\" do\n  title \"3.8 Ensure a log metric filter and alarm exist for S3 bucket policy\nchanges (Scored)\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. It is recommended that a metric filter and alarm be\nestablished for changes to S3 bucket policies. Monitoring changes to S3 bucket\npolicies may reduce time to detect and correct permissive policies on sensitive\nS3 buckets. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-79193-9\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"3.8\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{ ($.eventSource = s3.amazonaws.com) && (($.eventName =\nPutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName =\nPutBucketCors) ||\n($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) ||\n($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) ||\n($.eventName\n= DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }' Note\nthe <s3_bucket_policy_changes_metric> value associated with the\nfilterPattern found in step 4. Get a list of CloudWatch alarms and filter on\nthe <s3_bucket_policy_changes_metric>\ncaptured in step 5.\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<s3_bucket_policy_changes_metric>`]' Note the\nAlarmActions value - this will provide the SNS topic ARN value. Ensure there is\nat least one subscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n\"\n  tag \"fix\": \"Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for S3 Bucket Policy\nchanges and the <cloudtrail_log_group_name> taken from audit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<s3_bucket_policy_changes_metric> --metric-transformations\nmetricName=<s3_bucket_policy_changes_metric>,metricNamespace='CISBenchmark',metric\n\nValue=1 --filter-pattern '{ ($.eventSource = s3.amazonaws.com) && (($.eventName\n=\nPutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName =\nPutBucketCors) ||\n($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) ||\n($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) ||\n($.eventName\n= DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <s3_bucket_policy_changes_alarm>\n-metric-name <s3_bucket_policy_changes_metric> --statistic Sum --period 300\n-threshold 1 --comparison-operator GreaterThanOrEqualToThreshold\n--evaluation-periods 1\n--namespace 'CISBenchmark' --alarm-actions <sns_topic_arn>\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-3.8.rb",
        "line": 1
      },
      "id": "M-3.8"
    },
    {
      "title": "3.9 Ensure a log metric filter and alarm exist for AWS Config\nconfiguration changes (Scored)",
      "desc": "Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. It is recommended that a metric filter and alarm be\nestablished for detecting changes to CloudTrail's configurations. Monitoring\nchanges to AWS Config configuration will help ensure sustained visibility of\nconfiguration items within the AWS account.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-79194-7 2. CIS CSC v6.0 #5.4",
        "severity": "medium",
        "cis_id": "3.9",
        "cis_control": [
          [
            "5.4"
          ],
          "6.1"
        ],
        "cis_level": 2,
        "nist": [
          [
            "AC-2 (4)",
            4
          ]
        ],
        "audit text": "Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{($.eventSource = config.amazonaws.com) &&\n(($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even\n\ntName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}' Note the\n<aws_config_changes_metric> value associated with the filterPattern found\nin step 4. Get a list of CloudWatch alarms and filter on the\n<aws_config_changes_metric>\ncaptured in step 5.\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<aws_config_changes_metric>`]' Note the\nAlarmActions value - this will provide the SNS topic ARN value. Ensure there is\nat least one subscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n",
        "fix": "Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for AWS Config\nchanges and the <cloudtrail_log_group_name> taken from audit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<aws_config_changes_metric> --metric-transformations\nmetricName=<aws_config_changes_metric>,metricNamespace='CISBenchmark',metricValue=1\n\n--filter-pattern '{($.eventSource = config.amazonaws.com) &&\n(($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even\n\ntName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <aws_config_changes_alarm>\n--metricname <aws_config_changes_metric> --statistic Sum --period 300\n--threshold 1 -comparison-operator GreaterThanOrEqualToThreshold\n--evaluation-periods 1 --namespace\n'CISBenchmark' --alarm-actions <sns_topic_arn>\n"
      },
      "code": "control \"M-3.9\" do\n  title \"3.9 Ensure a log metric filter and alarm exist for AWS Config\nconfiguration changes (Scored)\"\n  desc  \"Real-time monitoring of API calls can be achieved by directing\nCloudTrail Logs to CloudWatch Logs and establishing corresponding metric\nfilters and alarms. It is recommended that a metric filter and alarm be\nestablished for detecting changes to CloudTrail's configurations. Monitoring\nchanges to AWS Config configuration will help ensure sustained visibility of\nconfiguration items within the AWS account. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-79194-7 2. CIS CSC v6.0 #5.4\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"3.9\"\n  tag \"cis_control\": [[\"5.4\"], \"6.1\"]\n  tag \"cis_level\": 2\n  tag \"nist\": [[\"AC-2 (4)\", 4]]\n  tag \"audit text\": \"Perform the following to determine if the account is\nconfigured as prescribed: Identify the log group name configured for use with\nCloudTrail:\naws cloudtrail describe-trails Note the <cloudtrail_log_group_name> value\nassociated with\nCloudWatchLogsLogGroupArn:\n'arn:aws:logs:eu-west-1:<aws_account_number>:log-group:<cloudtrail_log_group_name>:*'\nGet a list of all associated metric filters for this\n<cloudtrail_log_group_name>:\naws logs describe-metric-filters --log-group-name '<cloudtrail_log_group_name>'\nEnsure the output from the above command contains the following:\n'filterPattern': '{($.eventSource = config.amazonaws.com) &&\n(($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even\n\ntName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}' Note the\n<aws_config_changes_metric> value associated with the filterPattern found\nin step 4. Get a list of CloudWatch alarms and filter on the\n<aws_config_changes_metric>\ncaptured in step 5.\naws cloudwatch describe-alarms --query\n'MetricAlarms[?MetricName==`<aws_config_changes_metric>`]' Note the\nAlarmActions value - this will provide the SNS topic ARN value. Ensure there is\nat least one subscriber to the SNS topic\naws sns list-subscriptions-by-topic --topic-arn <sns_topic_arn>\n\"\n  tag \"fix\": \"Perform the following to setup the metric filter, alarm, SNS\ntopic, and subscription: Create a metric filter based on filter pattern\nprovided which checks for AWS Config\nchanges and the <cloudtrail_log_group_name> taken from audit step 2.\naws logs put-metric-filter --log-group-name <cloudtrail_log_group_name>\n--filter-name\n<aws_config_changes_metric> --metric-transformations\nmetricName=<aws_config_changes_metric>,metricNamespace='CISBenchmark',metricValue=1\n\n--filter-pattern '{($.eventSource = config.amazonaws.com) &&\n(($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.even\n\ntName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}'\nNote: You can choose your own metricName and metricNamespace strings. Using the\nsame\nmetricNamespace for all Foundations Benchmark metrics will group them together.\nCreate an SNS topic that the alarm will notify\naws sns create-topic --name <sns_topic_name>\nNote: you can execute this command once and then re-use the same topic for all\n\nmonitoring alarms. Create an SNS subscription to the topic created in step 2\naws sns subscribe --topic-arn <sns_topic_arn> --protocol <protocol_for_sns>\n-notification-endpoint <sns_subscription_endpoints>\nNote: you can execute this command once and then re-use the SNS subscription\nfor all\nmonitoring alarms. Create an alarm that is associated with the CloudWatch Logs\nMetric Filter created in step\n1 and an SNS topic created in step 2\naws cloudwatch put-metric-alarm --alarm-name <aws_config_changes_alarm>\n--metricname <aws_config_changes_metric> --statistic Sum --period 300\n--threshold 1 -comparison-operator GreaterThanOrEqualToThreshold\n--evaluation-periods 1 --namespace\n'CISBenchmark' --alarm-actions <sns_topic_arn>\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-3.9.rb",
        "line": 1
      },
      "id": "M-3.9"
    },
    {
      "title": "4.1 Ensure no security groups allow ingress from 0.0.0.0/0 to port 22\n(Scored)",
      "desc": "Security groups provide stateful filtering of ingress/egress network\ntraffic to AWS resources. It is recommended that no security group allows\nunrestricted ingress access to port 22. Removing unfettered connectivity to\nremote console services, such as SSH, reduces a server's exposure to risk.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "cis_id": "4.1",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Perform the following to determine if the account is\nconfigured as prescribed: Login to the AWS Management Console\nat https://console.aws.amazon.com/vpc/home In the left pane, click Security\nGroups For each security group, perform the following: Select the security\ngroup Click the Inbound Rules tab Ensure no rule exists that has a port range\nthat includes port 22 and has a\nSource of 0.0.0.0/0\nNote: A Port value of ALL or a port range such as 0-1024 are inclusive of port\n22.\n",
        "fix": "Perform the following to implement the prescribed state: Login to\nthe AWS Management Console\nat https://console.aws.amazon.com/vpc/home In the left pane, click Security\nGroups For each security group, perform the following: Select the security\ngroup Click the Inbound Rules tab Identify the rules to be removed Click the x\nin the Remove column Click Save\n"
      },
      "code": "control \"M-4.1\" do\n  title \"4.1 Ensure no security groups allow ingress from 0.0.0.0/0 to port 22\n(Scored)\"\n  desc  \"Security groups provide stateful filtering of ingress/egress network\ntraffic to AWS resources. It is recommended that no security group allows\nunrestricted ingress access to port 22. Removing unfettered connectivity to\nremote console services, such as SSH, reduces a server's exposure to risk. \"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"4.1\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Perform the following to determine if the account is\nconfigured as prescribed: Login to the AWS Management Console\nat https://console.aws.amazon.com/vpc/home In the left pane, click Security\nGroups For each security group, perform the following: Select the security\ngroup Click the Inbound Rules tab Ensure no rule exists that has a port range\nthat includes port 22 and has a\nSource of 0.0.0.0/0\nNote: A Port value of ALL or a port range such as 0-1024 are inclusive of port\n22.\n\"\n  tag \"fix\": \"Perform the following to implement the prescribed state: Login to\nthe AWS Management Console\nat https://console.aws.amazon.com/vpc/home In the left pane, click Security\nGroups For each security group, perform the following: Select the security\ngroup Click the Inbound Rules tab Identify the rules to be removed Click the x\nin the Remove column Click Save\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-4.1.rb",
        "line": 1
      },
      "id": "M-4.1"
    },
    {
      "title": "4.2 Ensure no security groups allow ingress from 0.0.0.0/0 to port\n3389 (Scored)",
      "desc": "Security groups provide stateful filtering of ingress/egress network\ntraffic to AWS resources. It is recommended that no security group allows\nunrestricted ingress access to port 3389. Removing unfettered connectivity to\nremote console services, such as RDP, reduces a server's exposure to risk.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "severity": "medium",
        "cis_id": "4.2",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 1,
        "audit text": "Perform the following to determine if the account is\nconfigured as prescribed: Login to the AWS Management Console\nat https://console.aws.amazon.com/vpc/home In the left pane, click Security\nGroups For each security group, perform the following: Select the security\ngroup Click the Inbound Rules tab Ensure no rule exists that has a port range\nthat includes port 3389 and has a\nSource of 0.0.0.0/0\nNote: A Port value of ALL or a port range such as 1024-4098 are inclusive of\nport 3389.\n",
        "fix": "Perform the following to implement the prescribed state: Login to\nthe AWS Management Console\nat https://console.aws.amazon.com/vpc/home In the left pane, click Security\nGroups For each security group, perform the following: Select the security\ngroup Click the Inbound Rules tab Identify the rules to be removed Click the x\nin the Remove column Click Save\n"
      },
      "code": "control \"M-4.2\" do\n  title \"4.2 Ensure no security groups allow ingress from 0.0.0.0/0 to port\n3389 (Scored)\"\n  desc  \"Security groups provide stateful filtering of ingress/egress network\ntraffic to AWS resources. It is recommended that no security group allows\nunrestricted ingress access to port 3389. Removing unfettered connectivity to\nremote console services, such as RDP, reduces a server's exposure to risk. \"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"4.2\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 1\n  tag \"audit text\": \"Perform the following to determine if the account is\nconfigured as prescribed: Login to the AWS Management Console\nat https://console.aws.amazon.com/vpc/home In the left pane, click Security\nGroups For each security group, perform the following: Select the security\ngroup Click the Inbound Rules tab Ensure no rule exists that has a port range\nthat includes port 3389 and has a\nSource of 0.0.0.0/0\nNote: A Port value of ALL or a port range such as 1024-4098 are inclusive of\nport 3389.\n\"\n  tag \"fix\": \"Perform the following to implement the prescribed state: Login to\nthe AWS Management Console\nat https://console.aws.amazon.com/vpc/home In the left pane, click Security\nGroups For each security group, perform the following: Select the security\ngroup Click the Inbound Rules tab Identify the rules to be removed Click the x\nin the Remove column Click Save\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-4.2.rb",
        "line": 1
      },
      "id": "M-4.2"
    },
    {
      "title": "4.3 Ensure VPC flow logging is enabled in all VPCs (Scored)",
      "desc": "VPC Flow Logs is a feature that enables you to capture information\nabout the IP traffic going to and from network interfaces in your VPC. After\nyou've created a flow log, you can view and retrieve its data in Amazon\nCloudWatch Logs. It is recommended that VPC Flow Logs be enabled for packet\n'Rejects' for VPCs. VPC Flow Logs provide visibility into network traffic that\ntraverses the VPC and can be used to detect anomalous traffic or insight during\nsecurity workflows.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-79202-8 2. CIS CSC v6.0 #6.5, #12.9 3.\nhttp://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/flow-logs.html",
        "severity": "medium",
        "cis_id": "4.3",
        "cis_control": [
          [
            "6.5",
            "12.9"
          ],
          "6.1"
        ],
        "cis_level": 2,
        "nist": [
          [
            "SI-4 (4)",
            4
          ],
          [
            "SI-4 (11)",
            4
          ]
        ],
        "audit text": "Perform the following to determine if VPC Flow logs is\nenabled:\nVia the Management Console:\nSign into the management console\nSelect Services then VPC\nIn the left navigation pane, select Your VPCs\nSelect a VPC\nIn the right pane, select the Flow Logs tab.\nEnsure a Log Flow exists that has Active in the Status column.\n",
        "fix": "Perform the following to determine if VPC Flow logs is enabled:\nVia the Management Console:\nSign into the management console\nSelect Services then VPC\nIn the left navigation pane, select Your VPCs\nSelect a VPC\nIn the right pane, select the Flow Logs tab.\nIf no Flow Log exists, click Create Flow Log\nFor Filter, select Reject\nEnter in a Role and Destination Log Group Click Create Log Flow\n10. Click on CloudWatch Logs Group\nNote: Setting the filter to 'Reject' will dramatically reduce the logging data\naccumulation\nfor this recommendation and provide sufficient information for the purposes of\nbreach\ndetection, research and remediation. However, during periods of least privilege\nsecurity\ngroup engineering, setting this the filter to 'All' can be very helpful in\ndiscovering existing\ntraffic flows required for proper operation of an already running environment.\n\n"
      },
      "code": "control \"M-4.3\" do\n  title \"4.3 Ensure VPC flow logging is enabled in all VPCs (Scored)\"\n  desc  \"VPC Flow Logs is a feature that enables you to capture information\nabout the IP traffic going to and from network interfaces in your VPC. After\nyou've created a flow log, you can view and retrieve its data in Amazon\nCloudWatch Logs. It is recommended that VPC Flow Logs be enabled for packet\n'Rejects' for VPCs. VPC Flow Logs provide visibility into network traffic that\ntraverses the VPC and can be used to detect anomalous traffic or insight during\nsecurity workflows. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-79202-8 2. CIS CSC v6.0 #6.5, #12.9 3.\nhttp://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/flow-logs.html\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"4.3\"\n  tag \"cis_control\": [[\"6.5\", \"12.9\"], \"6.1\"]\n  tag \"cis_level\": 2\n  tag \"nist\": [[\"SI-4 (4)\", 4], [\"SI-4 (11)\", 4]]\n  tag \"audit text\": \"Perform the following to determine if VPC Flow logs is\nenabled:\nVia the Management Console:\nSign into the management console\nSelect Services then VPC\nIn the left navigation pane, select Your VPCs\nSelect a VPC\nIn the right pane, select the Flow Logs tab.\nEnsure a Log Flow exists that has Active in the Status column.\n\"\n  tag \"fix\": \"Perform the following to determine if VPC Flow logs is enabled:\nVia the Management Console:\nSign into the management console\nSelect Services then VPC\nIn the left navigation pane, select Your VPCs\nSelect a VPC\nIn the right pane, select the Flow Logs tab.\nIf no Flow Log exists, click Create Flow Log\nFor Filter, select Reject\nEnter in a Role and Destination Log Group Click Create Log Flow\n10. Click on CloudWatch Logs Group\nNote: Setting the filter to 'Reject' will dramatically reduce the logging data\naccumulation\nfor this recommendation and provide sufficient information for the purposes of\nbreach\ndetection, research and remediation. However, during periods of least privilege\nsecurity\ngroup engineering, setting this the filter to 'All' can be very helpful in\ndiscovering existing\ntraffic flows required for proper operation of an already running environment.\n\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-4.3.rb",
        "line": 1
      },
      "id": "M-4.3"
    },
    {
      "title": "4.4 Ensure the default security group of every VPC restricts all\ntraffic (Scored)",
      "desc": "A VPC comes with a default security group whose initial settings deny\nall inbound traffic, allow all outbound traffic, and allow all traffic between\ninstances assigned to the security group. If you don't specify a security group\nwhen you launch an instance, the instance is automatically assigned to this\ndefault security group. Security groups provide stateful filtering of\ningress/egress network traffic to AWS resources. It is recommended that the\ndefault security group restrict all traffic. The default VPC in every region\nshould have it's default security group updated to comply. Any newly created\nVPCs will automatically contain a default security group that will need\nremediation to comply with this recommendation. NOTE: When implementing this\nrecommendation, VPC flow logging is invaluable in determining the least\nprivilege port access required by systems to work properly because it can log\nall packet acceptances and rejections occurring under the current security\ngroups. This dramatically reduces the primary barrier to least privilege\nengineering discovering the minimum ports required by systems in the\nenvironment. Even if the VPC flow logging recommendation in this benchmark is\nnot adopted as a permanent security measure, it should be used during any\nperiod of discovery and engineering for least privileged security groups.\nConfiguring all VPC default security groups to restrict all traffic will\nencourage least privilege security group development and mindful placement of\nAWS resources into security groups which will in-turn reduce the exposure of\nthose resources.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1. CCE-79201-0 2.\nhttp://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-networksecurity.html\n3. CIS CSC v6.0 #9.2",
        "severity": "medium",
        "cis_id": "4.4",
        "cis_control": [
          [
            "9.2"
          ],
          "6.1"
        ],
        "cis_level": 2,
        "nist": [
          [
            "SC-7(5)",
            4
          ]
        ],
        "audit text": "Perform the following to determine if the account is\nconfigured as prescribed:\nSecurity Group State Login to the AWS Management Console\nat https://console.aws.amazon.com/vpc/home Repeat the next steps for all VPCs -\nincluding the default VPC in each AWS region: In the left pane, click Security\nGroups For each default security group, perform the following: Select the\ndefault security group Click the Inbound Rules tab Ensure no rule exist Click\nthe Outbound Rules tab Ensure no rules exist\nSecurity Group Members Login to the AWS Management Console\nat https://console.aws.amazon.com/vpc/home Repeat the next steps for all\ndefault groups in all VPCs - including the default VPC in\neach AWS region: In the left pane, click Security Groups Copy the id of the\ndefault security group. Change to the EC2 Management Console\nat https://console.aws.amazon.com/ec2/v2/home In the filter column type\n'Security Group ID : <security group id from #4>'\n",
        "fix": "Security Group Members\nPerform the following to implement the prescribed state:\nIdentify AWS resources that exist within the default security group\nCreate a set of least privilege security groups for those resources\nPlace the resources in those security groups\nRemove the resources noted in #1 from the default security group\nSecurity Group State Login to the AWS Management Console\nat https://console.aws.amazon.com/vpc/home Repeat the next steps for all VPCs -\nincluding the default VPC in each AWS region: In the left pane, click Security\nGroups For each default security group, perform the following: Select the\ndefault security group Click the Inbound Rules tab Remove any inbound rules\nClick the Outbound Rules tab Remove any inbound rules\nRecommended:\nIAM groups allow you to edit the 'name' field. After remediating default groups\nrules for\nall VPCs in all regions, edit this field to add text similar to 'DO NOT USE. DO\nNOT ADD\nRULES'\n"
      },
      "code": "control \"M-4.4\" do\n  title \"4.4 Ensure the default security group of every VPC restricts all\ntraffic (Scored)\"\n  desc  \"A VPC comes with a default security group whose initial settings deny\nall inbound traffic, allow all outbound traffic, and allow all traffic between\ninstances assigned to the security group. If you don't specify a security group\nwhen you launch an instance, the instance is automatically assigned to this\ndefault security group. Security groups provide stateful filtering of\ningress/egress network traffic to AWS resources. It is recommended that the\ndefault security group restrict all traffic. The default VPC in every region\nshould have it's default security group updated to comply. Any newly created\nVPCs will automatically contain a default security group that will need\nremediation to comply with this recommendation. NOTE: When implementing this\nrecommendation, VPC flow logging is invaluable in determining the least\nprivilege port access required by systems to work properly because it can log\nall packet acceptances and rejections occurring under the current security\ngroups. This dramatically reduces the primary barrier to least privilege\nengineering discovering the minimum ports required by systems in the\nenvironment. Even if the VPC flow logging recommendation in this benchmark is\nnot adopted as a permanent security measure, it should be used during any\nperiod of discovery and engineering for least privileged security groups.\nConfiguring all VPC default security groups to restrict all traffic will\nencourage least privilege security group development and mindful placement of\nAWS resources into security groups which will in-turn reduce the exposure of\nthose resources. \"\n  impact 0.5\n  tag \"ref\": \"1. CCE-79201-0 2.\nhttp://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-networksecurity.html\n3. CIS CSC v6.0 #9.2\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"4.4\"\n  tag \"cis_control\": [[\"9.2\"], \"6.1\"]\n  tag \"cis_level\": 2\n  tag \"nist\": [[\"SC-7(5)\", 4]]\n  tag \"audit text\": \"Perform the following to determine if the account is\nconfigured as prescribed:\nSecurity Group State Login to the AWS Management Console\nat https://console.aws.amazon.com/vpc/home Repeat the next steps for all VPCs -\nincluding the default VPC in each AWS region: In the left pane, click Security\nGroups For each default security group, perform the following: Select the\ndefault security group Click the Inbound Rules tab Ensure no rule exist Click\nthe Outbound Rules tab Ensure no rules exist\nSecurity Group Members Login to the AWS Management Console\nat https://console.aws.amazon.com/vpc/home Repeat the next steps for all\ndefault groups in all VPCs - including the default VPC in\neach AWS region: In the left pane, click Security Groups Copy the id of the\ndefault security group. Change to the EC2 Management Console\nat https://console.aws.amazon.com/ec2/v2/home In the filter column type\n'Security Group ID : <security group id from #4>'\n\"\n  tag \"fix\": \"Security Group Members\nPerform the following to implement the prescribed state:\nIdentify AWS resources that exist within the default security group\nCreate a set of least privilege security groups for those resources\nPlace the resources in those security groups\nRemove the resources noted in #1 from the default security group\nSecurity Group State Login to the AWS Management Console\nat https://console.aws.amazon.com/vpc/home Repeat the next steps for all VPCs -\nincluding the default VPC in each AWS region: In the left pane, click Security\nGroups For each default security group, perform the following: Select the\ndefault security group Click the Inbound Rules tab Remove any inbound rules\nClick the Outbound Rules tab Remove any inbound rules\nRecommended:\nIAM groups allow you to edit the 'name' field. After remediating default groups\nrules for\nall VPCs in all regions, edit this field to add text similar to 'DO NOT USE. DO\nNOT ADD\nRULES'\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-4.4.rb",
        "line": 1
      },
      "id": "M-4.4"
    },
    {
      "title": "4.5 Ensure routing tables for VPC peering are 'least access' (Not\nScored)",
      "desc": "Once a VPC peering connection is estalished, routing tables must be\nupdated to establish any connections between the peered VPCs. These routes can\nbe as specific as desired even peering a VPC to only a single host on the other\nside of the connection. Being highly selective in peering routing tables is a\nvery effective way of minimizing the impact of breach as resources outside of\nthese routes are inaccessible to the peered VPC.",
      "impact": 0.5,
      "refs": [],
      "tags": {
        "ref": "1.\nhttp://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/peeringconfigurations-partial-access.html\n",
        "severity": "medium",
        "cis_id": "4.5",
        "cis_control": [
          "No CIS Control",
          "6.1"
        ],
        "cis_level": 2,
        "audit text": "Review routing tables of peered VPCs for whether they\nroute all subnets of each VPC and\nwhether that is necessary to accomplish the intended purposes for peering the\nVPCs.\nVia CLI: List all the route tables from a VPC and check if 'GatewayId' is\npointing to a\n<peering_connection_id> (e.g. pcx-1a2b3c4d) and if 'DestinationCidrBlock' is as\n\nspecific as desired.\naws ec2 describe-route-tables --filter 'Name=vpc-id,Values=<vpc_id>' --query\n'RouteTables[*].{RouteTableId:RouteTableId, VpcId:VpcId, Routes:Routes,\nAssociatedSubnets:Associations[*].SubnetId}'\n",
        "fix": "Remove and add route table entries to ensure that the least\nnumber of subnets or hosts as\nis required to accomplish the purpose for peering are routable.\nVia CLI: For each <route_table_id> containing routes non compliant with your\nrouting policy\n(which grants more than desired 'least access'), delete the non compliant\nroute:\naws ec2 delete-route --route-table-id <route_table_id> --destination-cidr-block\n\n<non_compliant_destination_CIDR> Create a new compliant route:\naws ec2 create-route --route-table-id <route_table_id> --destination-cidr-block\n\n<compliant_destination_CIDR> --vpc-peering-connection-id\n<peering_connection_id>\n"
      },
      "code": "control \"M-4.5\" do\n  title \"4.5 Ensure routing tables for VPC peering are 'least access' (Not\nScored)\"\n  desc  \"Once a VPC peering connection is estalished, routing tables must be\nupdated to establish any connections between the peered VPCs. These routes can\nbe as specific as desired even peering a VPC to only a single host on the other\nside of the connection. Being highly selective in peering routing tables is a\nvery effective way of minimizing the impact of breach as resources outside of\nthese routes are inaccessible to the peered VPC. \"\n  impact 0.5\n  tag \"ref\": \"1.\nhttp://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/peeringconfigurations-partial-access.html\n\"\n  tag \"severity\": \"medium\"\n  tag \"cis_id\": \"4.5\"\n  tag \"cis_control\": [\"No CIS Control\", \"6.1\"]\n  tag \"cis_level\": 2\n  tag \"audit text\": \"Review routing tables of peered VPCs for whether they\nroute all subnets of each VPC and\nwhether that is necessary to accomplish the intended purposes for peering the\nVPCs.\nVia CLI: List all the route tables from a VPC and check if 'GatewayId' is\npointing to a\n<peering_connection_id> (e.g. pcx-1a2b3c4d) and if 'DestinationCidrBlock' is as\n\nspecific as desired.\naws ec2 describe-route-tables --filter 'Name=vpc-id,Values=<vpc_id>' --query\n'RouteTables[*].{RouteTableId:RouteTableId, VpcId:VpcId, Routes:Routes,\nAssociatedSubnets:Associations[*].SubnetId}'\n\"\n  tag \"fix\": \"Remove and add route table entries to ensure that the least\nnumber of subnets or hosts as\nis required to accomplish the purpose for peering are routable.\nVia CLI: For each <route_table_id> containing routes non compliant with your\nrouting policy\n(which grants more than desired 'least access'), delete the non compliant\nroute:\naws ec2 delete-route --route-table-id <route_table_id> --destination-cidr-block\n\n<non_compliant_destination_CIDR> Create a new compliant route:\naws ec2 create-route --route-table-id <route_table_id> --destination-cidr-block\n\n<compliant_destination_CIDR> --vpc-peering-connection-id\n<peering_connection_id>\n\"\nend\n",
      "source_location": {
        "ref": "cis_aws_foundations_benchmark/controls/M-4.5.rb",
        "line": 1
      },
      "id": "M-4.5"
    }
  ],
  "groups": [
    {
      "title": null,
      "controls": [
        "M-1.1"
      ],
      "id": "controls/M-1.1.rb"
    },
    {
      "title": null,
      "controls": [
        "M-1.10"
      ],
      "id": "controls/M-1.10.rb"
    },
    {
      "title": null,
      "controls": [
        "M-1.11"
      ],
      "id": "controls/M-1.11.rb"
    },
    {
      "title": null,
      "controls": [
        "M-1.12"
      ],
      "id": "controls/M-1.12.rb"
    },
    {
      "title": null,
      "controls": [
        "M-1.13"
      ],
      "id": "controls/M-1.13.rb"
    },
    {
      "title": null,
      "controls": [
        "M-1.14"
      ],
      "id": "controls/M-1.14.rb"
    },
    {
      "title": null,
      "controls": [
        "M-1.15"
      ],
      "id": "controls/M-1.15.rb"
    },
    {
      "title": null,
      "controls": [
        "M-1.16"
      ],
      "id": "controls/M-1.16.rb"
    },
    {
      "title": null,
      "controls": [
        "M-1.17"
      ],
      "id": "controls/M-1.17.rb"
    },
    {
      "title": null,
      "controls": [
        "M-1.18"
      ],
      "id": "controls/M-1.18.rb"
    },
    {
      "title": null,
      "controls": [
        "M-1.19"
      ],
      "id": "controls/M-1.19.rb"
    },
    {
      "title": null,
      "controls": [
        "M-1.2"
      ],
      "id": "controls/M-1.2.rb"
    },
    {
      "title": null,
      "controls": [
        "M-1.20"
      ],
      "id": "controls/M-1.20.rb"
    },
    {
      "title": null,
      "controls": [
        "M-1.21"
      ],
      "id": "controls/M-1.21.rb"
    },
    {
      "title": null,
      "controls": [
        "M-1.22"
      ],
      "id": "controls/M-1.22.rb"
    },
    {
      "title": null,
      "controls": [
        "M-1.23"
      ],
      "id": "controls/M-1.23.rb"
    },
    {
      "title": null,
      "controls": [
        "M-1.24"
      ],
      "id": "controls/M-1.24.rb"
    },
    {
      "title": null,
      "controls": [
        "M-1.3"
      ],
      "id": "controls/M-1.3.rb"
    },
    {
      "title": null,
      "controls": [
        "M-1.4"
      ],
      "id": "controls/M-1.4.rb"
    },
    {
      "title": null,
      "controls": [
        "M-1.5"
      ],
      "id": "controls/M-1.5.rb"
    },
    {
      "title": null,
      "controls": [
        "M-1.6"
      ],
      "id": "controls/M-1.6.rb"
    },
    {
      "title": null,
      "controls": [
        "M-1.7"
      ],
      "id": "controls/M-1.7.rb"
    },
    {
      "title": null,
      "controls": [
        "M-1.8"
      ],
      "id": "controls/M-1.8.rb"
    },
    {
      "title": null,
      "controls": [
        "M-1.9"
      ],
      "id": "controls/M-1.9.rb"
    },
    {
      "title": null,
      "controls": [
        "M-2.1"
      ],
      "id": "controls/M-2.1.rb"
    },
    {
      "title": null,
      "controls": [
        "M-2.2"
      ],
      "id": "controls/M-2.2.rb"
    },
    {
      "title": null,
      "controls": [
        "M-2.3"
      ],
      "id": "controls/M-2.3.rb"
    },
    {
      "title": null,
      "controls": [
        "M-2.4"
      ],
      "id": "controls/M-2.4.rb"
    },
    {
      "title": null,
      "controls": [
        "M-2.5"
      ],
      "id": "controls/M-2.5.rb"
    },
    {
      "title": null,
      "controls": [
        "M-2.6"
      ],
      "id": "controls/M-2.6.rb"
    },
    {
      "title": null,
      "controls": [
        "M-2.7"
      ],
      "id": "controls/M-2.7.rb"
    },
    {
      "title": null,
      "controls": [
        "M-2.8"
      ],
      "id": "controls/M-2.8.rb"
    },
    {
      "title": null,
      "controls": [
        "M-3.1"
      ],
      "id": "controls/M-3.1.rb"
    },
    {
      "title": null,
      "controls": [
        "M-3.10"
      ],
      "id": "controls/M-3.10.rb"
    },
    {
      "title": null,
      "controls": [
        "M-3.11"
      ],
      "id": "controls/M-3.11.rb"
    },
    {
      "title": null,
      "controls": [
        "M-3.12"
      ],
      "id": "controls/M-3.12.rb"
    },
    {
      "title": null,
      "controls": [
        "M-3.13"
      ],
      "id": "controls/M-3.13.rb"
    },
    {
      "title": null,
      "controls": [
        "M-3.14"
      ],
      "id": "controls/M-3.14.rb"
    },
    {
      "title": null,
      "controls": [
        "M-3.15"
      ],
      "id": "controls/M-3.15.rb"
    },
    {
      "title": null,
      "controls": [
        "M-3.2"
      ],
      "id": "controls/M-3.2.rb"
    },
    {
      "title": null,
      "controls": [
        "M-3.3"
      ],
      "id": "controls/M-3.3.rb"
    },
    {
      "title": null,
      "controls": [
        "M-3.4"
      ],
      "id": "controls/M-3.4.rb"
    },
    {
      "title": null,
      "controls": [
        "M-3.5"
      ],
      "id": "controls/M-3.5.rb"
    },
    {
      "title": null,
      "controls": [
        "M-3.6"
      ],
      "id": "controls/M-3.6.rb"
    },
    {
      "title": null,
      "controls": [
        "M-3.7"
      ],
      "id": "controls/M-3.7.rb"
    },
    {
      "title": null,
      "controls": [
        "M-3.8"
      ],
      "id": "controls/M-3.8.rb"
    },
    {
      "title": null,
      "controls": [
        "M-3.9"
      ],
      "id": "controls/M-3.9.rb"
    },
    {
      "title": null,
      "controls": [
        "M-4.1"
      ],
      "id": "controls/M-4.1.rb"
    },
    {
      "title": null,
      "controls": [
        "M-4.2"
      ],
      "id": "controls/M-4.2.rb"
    },
    {
      "title": null,
      "controls": [
        "M-4.3"
      ],
      "id": "controls/M-4.3.rb"
    },
    {
      "title": null,
      "controls": [
        "M-4.4"
      ],
      "id": "controls/M-4.4.rb"
    },
    {
      "title": null,
      "controls": [
        "M-4.5"
      ],
      "id": "controls/M-4.5.rb"
    }
  ],
  "attributes": [],
  "sha256": "adbbf10b6dd32399bde65140996a30a7379816ee9dfa9c366d872f278b9899aa"
}
